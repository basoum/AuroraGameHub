{"ts":1355499167150,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright 2012 Sardonix Creative.\n *\n * This work is licensed under the\n * Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.\n * To view a copy of this license, visit\n *\n *      http://creativecommons.org/licenses/by-nc-nd/3.0/\n *\n * or send a letter to Creative Commons, 444 Castro Street, Suite 900,\n * Mountain View, California, 94041, USA.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage aurora.V1.core;\n\nimport aurora.V1.core.screen_ui.GameLibraryUI;\nimport aurora.engine.V1.Logic.ASimpleDB;\nimport aurora.engine.V1.UI.AImagePane;\nimport java.net.MalformedURLException;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * For the AddGameUI to search through the AuroraDB for games.\n *\n * @author Sammy\n */\npublic class GameSearch implements Runnable {\n\n    private AuroraCoreUI ui;\n\n    private GameLibraryUI libraryUI;\n\n    private ASimpleDB db;\n\n    private ArrayList foundGameList;\n\n    private char typed;\n\n    private String AppendedName = \"\"; //This is the concatination of all characters\n\n    private String foundGame;\n\n    private static Game foundGameCover;\n\n    private AImagePane notFound;\n\n    private Thread typeThread;\n\n    private int sleep;\n\n    private Object[] foundArray;\n\n    private AuroraStorage storage;\n\n    /////////////////////\n    /////Constructor/////\n    /////////////////////\n    public GameSearch(GameLibraryUI gameLibraryUI, ASimpleDB database,\n                      AuroraStorage storage) {\n\n        this.ui = gameLibraryUI.getCoreUI();\n        this.db = database;\n        this.storage = storage;\n        libraryUI = gameLibraryUI;\n        foundGameList = new ArrayList();\n\n    }\n\n    public void typedChar(char typedChar) {\n        typed = typedChar; // Set variable to typeChar\n        System.out.println(\"TYPED Character: \" + String.valueOf(typed));\n\n        //Append character to var\n        AppendedName = AppendedName.concat(String.valueOf(typed));\n\n        System.out.println(\"Appended GAME name: \" + AppendedName);\n\n        //clear library grid if not already clear\n        if (AppendedName.length() > 1) {\n            //Delay search to allow for Lag Free typing :)\n            sleep = 260;\n\n            //Initiate Search Sequence\n            typeThread = null;\n            if (typeThread == null) {\n                typeThread = new Thread(this);\n            }\n\n            //Start Search Thread with delay\n            try {\n                typeThread.start();\n            } catch (IllegalThreadStateException ex) {\n                System.err.println(ex);\n            }\n\n        }\n    }\n\n    public void removeChar(char typedChar) {\n\n        typed = typedChar;\n\n        //Remove ONE Character From End of Appended Name\n        if (AppendedName.length() - 1 > 0) {\n            AppendedName = (String) AppendedName.subSequence(0, AppendedName\n                    .length() - 1);\n        } else {\n            resetCover();\n            searchGame();\n        }\n\n        System.out.println(\"Appended name: \" + AppendedName);\n\n        //Start search only when more than 1 character is typed\n        if (AppendedName.length() > 1) {\n            //Delay to allow for typing\n            sleep = 260;\n            if (typeThread == null) {\n                typeThread = new Thread(this);\n            }\n\n            //Start Search thread with Delay\n            try {\n                typeThread.start();\n            } catch (IllegalThreadStateException ex) {\n            }\n\n        }\n\n    }\n\n    //Reset text, Cover Image, List and turn notification to red\n    public void resetCover() {\n\n        libraryUI.getCoverPane().removeAll();\n        libraryUI.getCoverPane().revalidate();\n        libraryUI.getCoverPane().add(libraryUI.getCoverGame());\n        libraryUI.getCoverGame().revalidate();\n        libraryUI.getCoverPane().revalidate();\n\n        libraryUI.getSearchText().setText(\"\");\n        AppendedName = \"\";\n        foundGame = \"\";\n\n        foundArray = null;\n        libraryUI.getAddGamePane().revalidate();\n        libraryUI.getListModel().removeAllElements();\n        libraryUI.getStatusBadge1().setImgURl(\"addUI_badge_idle.png\");\n        libraryUI.getLogic().checkNotifiers();\n\n    }\n\n    public void setAppendedName(String AppendedName) {\n        this.AppendedName = AppendedName;\n    }\n\n    /**\n     * Search from outside Class using specific String\n     *\n     * @param gameName the name of the Game you want to search for\n     *\n     */\n    public void searchSpecificGame(String gameName) {\n        try {\n            foundGame = (String) db.getRowFlex(\"AuroraTable\", new String[]{\n                        \"FILE_NAME\"}, \"GAME_NAME='\" + gameName\n                    .replace(\"'\", \"''\") + \"'\", \"FILE_NAME\")[0];\n        } catch (Exception ex) {\n            Logger.getLogger(GameSearch.class.getName()).log(Level.SEVERE, null,\n                    ex);\n            foundGame = null;\n        }\n\n        //If not found show Placeholder and turn notification red\n        if (foundGame == null) {\n            libraryUI.getCoverPane().removeAll();\n            notFound = new AImagePane(\"NoGameFound.png\", libraryUI\n                    .getPnlBlankCoverGame().getWidth(), libraryUI\n                    .getPnlBlankCoverGame().getHeight());\n            libraryUI.getCoverPane().add(notFound);\n\n            foundGameCover = null;\n            libraryUI.getStatusBadge1().setImgURl(\"addUI_badge_invalid.png\");\n            libraryUI.getLogic().checkNotifiers();\n            libraryUI.getListModel().removeAllElements();\n            libraryUI.getCoverPane().repaint();\n            libraryUI.getCoverPane().revalidate();\n\n            //Show the game Cover if a single database item is found\n        } else if (foundGame != null) {\n\n            libraryUI.getCoverPane().removeAll();\n            //Create the new GameCover object\n            foundGameCover = new Game(libraryUI.getGridSplit(), ui, libraryUI\n                    .getDashboardUI(), storage);\n            try {\n                foundGameCover.setCoverUrl(foundGame);\n            } catch (MalformedURLException ex) {\n                Logger.getLogger(GameSearch.class.getName()).log(Level.SEVERE,\n                        null, ex);\n            }\n            foundGameCover.setCoverSize(libraryUI.getPnlBlankCoverGame()\n                    .getWidth(), libraryUI.getPnlBlankCoverGame().getHeight());\n            foundGameCover.setGameName(gameName);\n\n            libraryUI.getCoverPane().add(foundGameCover);\n            try {\n                foundGameCover.update();\n                foundGameCover.removeInteraction();\n            } catch (MalformedURLException ex) {\n                Logger.getLogger(GameSearch.class.getName()).log(Level.SEVERE,\n                        null, ex);\n            }\n\n            //Change notification\n            libraryUI.getStatusBadge1().setImgURl(\"addUI_badge_valid.png\");\n            libraryUI.getLogic().checkNotifiers();\n            libraryUI.getCoverPane().repaint();\n            libraryUI.getCoverPane().revalidate();\n\n        }\n    }\n\n    public Game getFoundGameCover() {\n        return foundGameCover;\n    }\n\n    private void searchGame() {\n\n        //What Happends When The Length is zero\n        if (AppendedName.length() <= 0 || libraryUI.getGameSearchBar().getText()\n                .length() == 0) {\n            System.out.println(\"RESETING PANE\");\n            resetCover();\n            libraryUI.getCoverPane().repaint();\n            libraryUI.getCoverPane().revalidate();\n        } else {\n            libraryUI.getListModel().removeAllElements();\n            //Query the database\n\n            try {\n                System.out.println(db.searchAprox(\"AuroraTable\", \"FILE_NAME\",\n                        \"GAME_NAME\", AppendedName.toString()));\n                foundArray = db.searchAprox(\"AuroraTable\", \"FILE_NAME\",\n                        \"GAME_NAME\", AppendedName.toString());\n            } catch (SQLException ex) {\n                Logger.getLogger(GameSearch.class.getName()).log(Level.SEVERE,\n                        null, ex);\n\n            }\n            try {\n                //Get the first game name as a seperate string to show\n                //in cover Art\n                foundGame = (String) foundArray[0];\n                System.out.println(foundGame);\n\n                //Add rest of found items to the List to allow for selection of other games\n                for (int i = 0; i <= 10 && i < foundArray.length; i++) {\n                    if (foundArray[i] != null) {\n                        String gameItem = (String) foundArray[i];\n                        libraryUI.getListModel().addElement(gameItem\n                                .replace(\"-\", \" \").replace(\".png\", \"\"));\n                    }\n                }\n                libraryUI.getGamesList().revalidate();\n            } catch (Exception ex) {\n                foundGame = null;\n            }\n\n\n            //If Can't Get the game then show a Placeholder Image\n            //and turn the notifier red\n            if (foundGame == null) {\n\n                libraryUI.getCoverPane().removeAll();\n                notFound = new AImagePane(\"NoGameFound.png\", libraryUI\n                        .getPnlBlankCoverGame().getWidth(), libraryUI\n                        .getPnlBlankCoverGame().getHeight());\n                libraryUI.getCoverPane().add(notFound);\n                foundGameCover = null;\n                libraryUI.getStatusBadge1().setImgURl(\"addUI_badge_invalid.png\");\n                libraryUI.getLogic().checkNotifiers();\n                libraryUI.getListModel().removeAllElements();\n                libraryUI.getCoverPane().repaint();\n                libraryUI.getCoverPane().revalidate();\n\n            } else if (foundGame != null) {\n\n                libraryUI.getCoverPane().removeAll();\n\n\n                //Set up GameCover object with First Database item found\n                foundGameCover = new Game(libraryUI.getGridSplit(), ui,\n                        libraryUI.getDashboardUI(), storage);\n                try {\n                    foundGameCover.setCoverUrl(foundGame); //use seperate string\n                } catch (MalformedURLException ex) {\n                    Logger.getLogger(GameSearch.class.getName()).log(\n                            Level.SEVERE, null, ex);\n                }\n                foundGameCover.setCoverSize(libraryUI.getPnlBlankCoverGame()\n                        .getWidth(), libraryUI.getPnlBlankCoverGame()\n                        .getHeight());\n                foundGameCover.setGameName(foundGame.replace(\"-\", \" \").replace(\n                        \".png\", \"\"));\n\n                libraryUI.getCoverPane().add(foundGameCover);\n                //Show GameCover\n                try {\n                    foundGameCover.update();\n                    foundGameCover.removeInteraction();\n                } catch (MalformedURLException ex) {\n                    Logger.getLogger(GameSearch.class.getName()).log(\n                            Level.SEVERE, null, ex);\n                }\n\n                //Trun notifier Green\n                libraryUI.getStatusBadge1().setImgURl(\"addUI_badge_valid.png\");\n                libraryUI.getLogic().checkNotifiers();\n                libraryUI.getCoverPane().repaint();\n                libraryUI.getCoverPane().revalidate();\n            }\n        }\n    }\n\n    @Override\n    public void run() {\n\n        while (Thread.currentThread() == typeThread) {\n            try {\n                System.out.println(\"WATING FOR SEARCH\");\n                Thread.sleep(sleep);\n            } catch (InterruptedException ex) {\n                Logger.getLogger(GameSearch.class.getName()).log(Level.SEVERE,\n                        null, ex);\n            }\n            break;\n        }\n        searchGame();\n        typeThread = null;\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":12102}]],"length":12102}
