/*
 *  Made By Sardonix Creative.
 *
 * This work is licensed under the
 * Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
 * To view a copy of this license, visit
 *
 *      http://creativecommons.org/licenses/by-nc-nd/3.0/
 *
 * or send a letter to Creative Commons, 444 Castro Street, Suite 900,
 * Mountain View, California, 94041, USA.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package aurora.V1.core.screen_logic;

import aurora.V1.core.AuroraCoreUI;
import aurora.V1.core.Game;
import aurora.V1.core.main;
import aurora.V1.core.screen_handler.LibraryHandler;
import aurora.V1.core.screen_handler.LibraryHandler.GameLibraryKeyListener;
import aurora.V1.core.screen_ui.DashboardUI;
import aurora.V1.core.screen_ui.LibraryUI;
import aurora.engine.V1.Logic.APostHandler;
import aurora.engine.V1.Logic.AuroraScreenHandler;
import aurora.engine.V1.Logic.AuroraScreenLogic;
import java.net.MalformedURLException;
import org.apache.log4j.Logger;

/**
 * .------------------------------------------------------------------------.
 * | LibraryLogic
 * .------------------------------------------------------------------------.
 * |
 * |
 * | This Class is the Logic component of the Library App. Its instanced
 * | In LibraryUI.
 * |
 * | This class is supposed to handle all of the Long Processing of UI or
 * | Actions generated by the Handler. Reusable processing and long logic
 * | methods should go here. It implements the AuroraScreenLogic interface.
 * |
 * .........................................................................
 *
 * @author Sammy Guergachi <sguergachi at gmail.com>
 * @author Carlos Machado <camachado@gmail.com>
 * <p/>
 */
public class LibraryLogic implements AuroraScreenLogic {

    /**
     * Library UI instance.
     */
    private final LibraryUI libraryUI;

    /**
     * Library Handler instance.
     */
    private LibraryHandler libraryHandler;

    /**
     * Core UI instance.
     */
    private final AuroraCoreUI coreUI;

    /**
     * Dashboard UI instance.
     */
    private final DashboardUI dashboardUI;

    private boolean hasFav;

    static final Logger logger = Logger.getLogger(LibraryLogic.class);

    /**
     * .-----------------------------------------------------------------------.
     * | LibraryLogic(LibraryUI)
     * .-----------------------------------------------------------------------.
     * |
     * | This is the Constructor of the Game Library Logic class.
     * |
     * | The LibraryUI is required to make adjustments to the UI from the
     * | logic.
     * |
     * | The games are loaded, added and overall managed through here.
     * |
     * | NOTE: for Logic to work you must use the set(HandlerDashboardHandler)
     * | method for the logic to be able to attach some handlers to UI
     * | elements
     * |
     * .........................................................................
     *
     * @param gamelibraryUi LibraryUI
     *
     */
    public LibraryLogic(final LibraryUI gamelibraryUi) {
        this.libraryUI = gamelibraryUi;
        this.coreUI = gamelibraryUi.getCoreUI();
        this.dashboardUI = gamelibraryUi.getDashboardUI();
    }

    @Override
    public final void setHandler(final AuroraScreenHandler handler) {

        this.libraryHandler = (LibraryHandler) handler;

    }

    /**
     * .-----------------------------------------------------------------------.
     * | addGamesToLibrary()
     * .-----------------------------------------------------------------------.
     * |
     * | This method will add all games found in the Aurora Storage to the
     * | Library UI.
     * |
     * | It will add the games from favorite to non-favorite games.
     * | It will generate new Grids along the way when it fills previous ones.
     * |
     * .........................................................................
     *
     * @return an ArrayList with info
     */
    public void addGamesToLibrary() {
        try {
            //* check that favorites are not null *//
            if (libraryUI.getStorage().getStoredLibrary().getFaveStates()
                != null) {
                hasFav = true;
            }



            //* Add Games Marked Fav first *//



            for (int i = 0; i < libraryUI.getStorage().getStoredLibrary()
                    .getGameNames()
                    .size();
                    i++) {

                Game Game = new Game(libraryUI.getGridSplit(), coreUI,
                        dashboardUI, libraryUI.getStorage());
                if (hasFav && libraryUI.getStorage().getStoredLibrary()
                        .getFaveStates()
                        .get(i)) {
                    Game.setGameName(libraryUI.getStorage()
                            .getStoredLibrary()
                            .getGameNames()
                            .get(i));
                    Game.setCoverUrl(libraryUI.getStorage()
                            .getStoredLibrary()
                            .getBoxArtPath()
                            .get(i));
                    //* Handle appostrophese in game path *//
                    Game.setGamePath(libraryUI.getStorage()
                            .getStoredLibrary()
                            .getGamePath()
                            .get(i).replace("'", "''"));
                    Game.setFavorite(libraryUI.getStorage()
                            .getStoredLibrary()
                            .getFaveStates()
                            .get(i));
                    Game.setCoverSize(libraryUI.getGameCoverWidth(),
                            libraryUI
                            .getGameCoverHeight());

                    libraryUI.getGridSplit().addGame(Game);
                }
            }


            //* Add Non-Fav games after *//

            for (int i = 0; i < libraryUI.getStorage().getStoredLibrary()
                    .getGameNames()
                    .size();
                    i++) {

                Game Game = new Game(libraryUI.getGridSplit(), coreUI,
                        dashboardUI, libraryUI.getStorage());
                if (!hasFav || !libraryUI.getStorage().getStoredLibrary()
                        .getFaveStates()
                        .get(i)) {
                    Game.setGameName(libraryUI.getStorage().getStoredLibrary()
                            .getGameNames()
                            .get(i));
                    Game.setCoverUrl(libraryUI.getStorage().getStoredLibrary()
                            .getBoxArtPath()
                            .get(i));
                    //* Handle appostrophese in game path *//
                    Game.setGamePath(libraryUI.getStorage().getStoredLibrary()
                            .getGamePath()
                            .get(i).replace("'", "''"));
                    if (hasFav) {
                        Game.setFavorite(libraryUI.getStorage()
                                .getStoredLibrary()
                                .getFaveStates()
                                .get(i));
                    }

                    Game.setCoverSize(libraryUI.getGameCoverWidth(), libraryUI
                            .getGameCoverHeight());

                    libraryUI.getGridSplit().addGame(Game);
                }

            }


            libraryUI.getGridSplit()
                    .finalizeGrid(libraryHandler.new ShowAddGameUiHandler(),
                    libraryUI
                    .getGameCoverWidth(), libraryUI.getGameCoverHeight());

            //Load First Grid by default
            loadGames(
                    0);
        } catch (MalformedURLException ex) {
        	logger.error(ex);
        }
    }

    /**
     * SmartLoad GameCover Covers to minimize memory usage through burst loading
     *
     */
    public void loadGames(int currentGridIndex) throws MalformedURLException {

    	if (logger.isDebugEnabled()) {
    		logger.debug("LAUNCHING LOAD METHOD");
    	}

        int currentGrid = currentGridIndex;
        if (currentGrid < 0) {
            currentGrid = 0;
        }

        if (logger.isDebugEnabled()) {
    		logger.debug("current panel: " + currentGrid);
    	}


        //Load First Panels

        libraryUI.setIsGameLibraryKeyListenerAdded(false);
        for (int i = 0; i < libraryUI.getGridSplit().getGrid(currentGrid)
                .getArray().size();
                i++) {
            Game game = new Game(libraryUI.getGridSplit(), coreUI, dashboardUI);
            try {
                game = (Game) libraryUI.getGridSplit().getGrid(currentGrid)
                        .getArray().get(i);
                game.addKeyListener(libraryHandler.new searchRefocusListener());

                for (int j = 0; j < game.getKeyListeners().length; j++) {
                    if (game.getKeyListeners()[j] instanceof GameLibraryKeyListener) {
                        libraryUI.setIsGameLibraryKeyListenerAdded(true);
                        break;
                    }
                }

                if (!libraryUI.IsGameLibraryKeyListenerAdded()) {
                	if (logger.isDebugEnabled()) {
                		logger.debug("ADDING GAMELIBRARYLISTENER TO " + game.getName());
                	}

                    game.addKeyListener(libraryHandler.new GameLibraryKeyListener());
                }


                if (!game.isLoaded()) {
                    game.update();

                    if (logger.isDebugEnabled()) {
                		logger.debug("loading: " + game.getGameName());
                	}

                }
            } catch (RuntimeException ex) {
            	logger.error(ex);
            }
        }


        libraryUI.setIsGameLibraryKeyListenerAdded(false);
        //Load Second Panel if exists -- SMART LOAD
        if (currentGrid < libraryUI.getGridSplit().getArray().size() - 1) {
            for (int i = 0; i < libraryUI.getGridSplit().getGrid(currentGrid
                                                                 + 1).getArray()
                    .size(); i++) {
                Game game = new Game(libraryUI.getGridSplit(), coreUI,
                        dashboardUI);
                try {
                    game = (Game) libraryUI.getGridSplit().getGrid(currentGrid
                                                                   + 1)
                            .getArray()
                            .get(i);

                    for (int j = 0; j < game.getKeyListeners().length; j++) {
                        if (game.getKeyListeners()[j] instanceof GameLibraryKeyListener) {
                            libraryUI.setIsGameLibraryKeyListenerAdded(true);
                            break;
                        }
                    }

                    if (!libraryUI.IsGameLibraryKeyListenerAdded()) {
                    	if (logger.isDebugEnabled()) {
                    		logger.debug("ADDING GAMELIBRARYLISTENER TO" + game.getName());
                    	}

                        game.addKeyListener(
                                libraryHandler.new GameLibraryKeyListener());
                    }

                    if (!game.isLoaded()) {
                        game.update();
                        if (logger.isDebugEnabled()) {
                    		logger.debug("Secondary loading: " + game.getName());
                    	}

                    }
                } catch (RuntimeException ex) {
                	logger.error(ex);
                }


            }
        }
    }

    public void checkNotifiers() {

        if (libraryUI.getStatusBadge1().getImgURl().equals(
                "addUI_badge_valid.png")
            && libraryUI.getStatusBadge2()
                .getImgURl().equals("addUI_badge_valid.png")) {
            //Animate the Button bellow Add Game UI
            libraryUI.getAddGameToLibButton().setVisible(true);
            libraryUI.getAddGameToLibButtonAnimator().setInitialLocation((coreUI
                    .getFrame()
                    .getWidth() / 2) -  libraryUI.getAddGameToLibButton().getWidth()/2, libraryUI.getAddGamePane()
                    .getImgIcon()
                    .getIconHeight() - 180);
            libraryUI.getAddGameToLibButtonAnimator().moveVertical(libraryUI
                    .getAddGamePane()
                    .getImgIcon()
                    .getIconHeight() - 55, 20);
            libraryUI.getAddGameToLibButtonAnimator().removeAllListeners();
        }

        if ((libraryUI.getStatusBadge1().getImgURl().equals(
                "addUI_badge_invalid.png")
             || libraryUI.getStatusBadge2()
                .getImgURl().equals("addUI_badge_invalid.png"))
            && libraryUI.getAddGameToLibButton().isVisible()) {


            libraryUI.getAddGameToLibButtonAnimator().moveVertical(0, 16);
            libraryUI.getAddGameToLibButtonAnimator()
                    .addPostAnimationListener(new APostHandler() {
                @Override
                public void postAction() {
                    libraryUI.getAddGameToLibButton().setVisible(false);
                }
            });
        }

    }
}
