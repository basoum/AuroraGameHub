{"ts":1355499262015,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright 2012 Sardonix Creative.\n *\n * This work is licensed under the\n * Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.\n * To view a copy of this license, visit\n *\n *      http://creativecommons.org/licenses/by-nc-nd/3.0/\n *\n * or send a letter to Creative Commons, 444 Castro Street, Suite 900,\n * Mountain View, California, 94041, USA.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage aurora.V1.core;\n\nimport aurora.engine.V1.UI.ADialog;\nimport aurora.engine.V1.UI.AImage;\nimport aurora.engine.V1.UI.AImagePane;\nimport aurora.engine.V1.UI.AProgressWheel;\nimport aurora.engine.V1.UI.ATimeLabel;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\n\n/**\n *\n * @author Sammy Guergachi <sguergachi at gmail.com>\n */\npublic class AuroraLauncher implements Runnable {\n\n    private Game game;\n\n    private JDialog launchPane;\n\n    private AuroraCoreUI ui;\n\n    private AImagePane pnlBackground;\n\n    private JPanel pnlTop;\n\n    private JPanel pnlCenter;\n\n    private JLabel lblTitle;\n\n    private JLabel lblGameName;\n\n    private AImage imageRightSide;\n\n    private AImage imageLeftSide;\n\n    private AImagePane gameIcon;\n\n    private AImagePane titleBG;\n\n    private AProgressWheel progressWheel;\n\n    private AImagePane progressWheelBG;\n\n    private JPanel pnlCenterContent;\n\n    private JPanel pnlBottom;\n\n    private Thread launcherThread;\n\n    private JPanel pnlTopCenter;\n\n    private String timeAfter;\n\n    private int minDiff;\n\n    private Process Process;\n\n    private int hoursDiff;\n\n    private int elapsedTime;\n\n    public AuroraLauncher(Game game, AuroraCoreUI ui) {\n        this.ui = ui;\n        this.game = game;\n\n\n    }\n\n    public void createUI() {\n        launchPane = new JDialog();\n        launchPane.setSize(ui.getFrame().getWidth(), ui.getFrame().getHeight());\n        launchPane.setBackground(Color.BLACK);\n        launchPane.setResizable(false);\n        launchPane.setSize(Toolkit.getDefaultToolkit().getScreenSize());\n        launchPane.setUndecorated(true);\n        launchPane.setAlwaysOnTop(true);\n\n\n\n        //Create components\n        pnlBackground = new AImagePane(\"LaunchBG.png\", launchPane.getWidth(),\n                launchPane.getHeight(), new BorderLayout());\n        pnlTop = new JPanel(new BorderLayout(0, 20));\n        pnlTop.setOpaque(false);\n        pnlTopCenter = new JPanel();\n        pnlTopCenter.setOpaque(false);\n        pnlCenter = new JPanel();\n        pnlCenter.setOpaque(false);\n        pnlCenterContent = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        pnlCenterContent.setOpaque(false);\n        pnlBottom = new JPanel();\n        pnlBottom.setOpaque(false);\n\n        lblTitle = new JLabel(\"Now Launching\");\n        lblGameName = new JLabel(game.getGameName());\n\n        imageRightSide = new AImage(\"rightBrace.png\");\n        imageLeftSide = new AImage(\"leftBrace.png\");\n        gameIcon = new AImagePane();\n        gameIcon.setImage(game.getImgIcon(), 260, 230);\n        gameIcon.setPreferredSize(new Dimension(230, 270));\n        titleBG = new AImagePane(\"launchTitle.png\");\n        progressWheel = new AProgressWheel(\"ProgressWheel.png\");\n        progressWheelBG = new AImagePane(\"ProgressWheelBG.png\",\n                new BorderLayout(0, 0));\n        progressWheelBG.setPreferredSize(new Dimension(progressWheelBG\n                .getImgIcon().getIconWidth(), progressWheelBG.getImgIcon()\n                .getIconHeight()));\n\n        //Config Component\n        progressWheelBG.add(progressWheel);\n        lblTitle.setFont(ui.getRegularFont().deriveFont(Font.PLAIN, 95));\n        lblTitle.setForeground(Color.green);\n\n        //Gracefull Resizing\n        if (lblGameName.getText().length() > 50) {\n            lblGameName.setFont(ui.getRegularFont().deriveFont(Font.PLAIN, 50));\n        } else if (lblGameName.getText().length() > 40) {\n            lblGameName.setFont(ui.getRegularFont().deriveFont(Font.PLAIN, 60));\n        } else if (lblGameName.getText().length() > 30) {\n            lblGameName.setFont(ui.getRegularFont().deriveFont(Font.PLAIN, 70));\n        } else {\n            lblGameName.setFont(ui.getRegularFont().deriveFont(Font.PLAIN, 95));\n        }\n        lblGameName.setForeground(Color.lightGray);\n        pnlTopCenter.add(titleBG);\n\n        pnlCenterContent.add(lblGameName);\n        pnlCenterContent.add(gameIcon);\n\n\n        pnlCenter.setPreferredSize(new Dimension(launchPane.getWidth(), 28));\n        pnlCenter.add(imageLeftSide);\n        pnlCenter.add(pnlCenterContent);\n        pnlCenter.add(imageRightSide);\n\n        titleBG.setPreferredSize(new Dimension(765, 300));\n        pnlTopCenter.setPreferredSize(new Dimension(launchPane.getWidth(), 300));\n        pnlTop.add(BorderLayout.CENTER, pnlTopCenter);\n\n        pnlBottom.add(progressWheelBG);\n\n        pnlBackground.add(BorderLayout.NORTH, pnlTopCenter);\n        pnlBackground.add(BorderLayout.CENTER, pnlCenter);\n        pnlBackground.add(BorderLayout.SOUTH, pnlBottom);\n\n\n        launchPane.add(pnlBackground);\n        launchPane.setVisible(true);\n        launchPane.repaint();\n\n        launcherThread = null;\n\n        if (launcherThread == null) {\n            launcherThread = new Thread(this);\n        }\n        launcherThread.setName(\"Launch Thread\");\n        //Start Loader\n        launcherThread.start();\n\n    }\n\n    @Override\n    public void run() {\n        while (Thread.currentThread() == launcherThread) {\n\n\n            try {\n                String osName = System.getProperty(\"os.name\");\n                if (ui.getOS().equals(\"Windows 7\") || osName\n                        .equals(\"Windows XP\") || ui.getOS().equals(\n                        \"Windows Vista\")) {\n\n\n                    System.out.println(game.getGamePath());\n                    if (game.getGamePath().endsWith(\"exe\")) {\n                        //Get the directory\n                        ProcessBuilder processBuild = new ProcessBuilder(game\n                                .getGamePath());\n\n                        processBuild.directory(new File(game.getGamePath()\n                                .substring(0, game.getGamePath().lastIndexOf(\n                                \"\\\\\") + 1).replace(\"\\\\\", \"\\\\\")));\n\n                        //LAUCH GAME\n                        Process = processBuild.start();\n                        ui.getFrame().setState(JFrame.ICONIFIED);\n\n\n\n                        //Pause A Bit\n                        try {\n                            Thread.sleep(4000);\n                        } catch (InterruptedException ex) {\n                            Logger.getLogger(AuroraLauncher.class.getName())\n                                    .log(Level.SEVERE, null, ex);\n                        }\n\n                        //Game Cover Tracker Data\n                        game.setNumberTimesPlayed(game.getNumberTimesPlayed()\n                                                  + 1);\n                        game.setLastPlayed(ATimeLabel.current(\n                                ATimeLabel.TIME_24HOUR));\n                        //UI Changes\n                        progressWheel.setClockwise(false);\n                        progressWheel.setSpeed(6);\n                        titleBG.setImage(\"playTitle.png\");\n\n\n                        //WAIT FOR GAME TO EXIT\n                        try {\n                            launchPane.setAlwaysOnTop(false);\n                            Process.waitFor();\n\n                        } catch (InterruptedException ex) {\n                            Logger.getLogger(AuroraLauncher.class.getName())\n                                    .log(Level.SEVERE, null, ex);\n                        }\n                    } else { // Launch Shortcuts\n                        launchPane.setAlwaysOnTop(false);\n                        String currentDir = new File(game.getGamePath())\n                                .getCanonicalPath();\n                        currentDir = currentDir.substring(0, currentDir\n                                .lastIndexOf(\"\\\\\") + 1) + '\"' + currentDir\n                                .substring(currentDir.lastIndexOf(\"\\\\\") + 1,\n                                currentDir.length()) + '\"';\n\n                        ProcessBuilder processBuild = new ProcessBuilder();\n                        processBuild.command(\"cmd\", \"/c\", \"\", currentDir);\n\n                        System.out.println(\"Current Dir \" + currentDir);\n                        System.out.println(\"Command \" + processBuild.command());\n\n\n                        //LAUNCH GAME\n                        Process = processBuild.start();\n\n                        ui.getFrame().setState(JFrame.ICONIFIED);\n\n                        //Pause A Bit\n                        try {\n                            Thread.sleep(3000);\n                        } catch (InterruptedException ex) {\n                            Logger.getLogger(AuroraLauncher.class.getName())\n                                    .log(Level.SEVERE, null, ex);\n                        }\n                        //Game Cover Tracker Data\n                        game.setNumberTimesPlayed(game.getNumberTimesPlayed()\n                                                  + 1);\n                        game.setLastPlayed(ATimeLabel.current(\n                                ATimeLabel.TIME_24HOUR));\n                        //UI Changes\n                        progressWheel.setClockwise(false);\n                        progressWheel.setSpeed(5);\n                        titleBG.setImage(\"playTitle.png\");\n\n\n                        //WAIT FOR GAME TO EXIT\n                        try {\n                            //launchPane.setAlwaysOnTop(false);\n                            Process.waitFor();\n                        } catch (InterruptedException ex) {\n                            Logger.getLogger(AuroraLauncher.class.getName())\n                                    .log(Level.SEVERE, null, ex);\n                        }\n                    }\n\n\n                } else if (osName.equals(\"Mac OS X\")) {\n                    // escaping the spaces in the game path\n                    game.getGamePath().replace(\" \", \"\\\\ \");\n                    String workingDir = game.getGamePath();\n                    workingDir = workingDir.substring(0, workingDir.lastIndexOf(\n                            \"/\") + 1);\n                    System.setProperty(\"user.dir\", workingDir);\n                    //LAUCH GAME\n                    Desktop.getDesktop().open(new File(game.getGamePath()));\n\n                    //Tracker Data\n                    game.setNumberTimesPlayed(game.getNumberTimesPlayed() + 1);\n                    game.setLastPlayed(ui.getTimeLabel().getText());\n                }\n            } catch (IOException ex) {\n                ADialog error = new ADialog(ADialog.aDIALOG_ERROR,\n                        \"Unable to find game.\");\n                error.setButtonListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n\n                        launchPane.setVisible(false);\n                        launchPane.dispose();\n                        ui.getFrame().setVisible(true);\n                        ui.getFrame().setState(JFrame.NORMAL);\n\n                    }\n                });\n                error.setVisible(true);\n                Logger.getLogger(AuroraLauncher.class.getName()).log(\n                        Level.SEVERE, null, ex);\n            }\n\n            //Game Has Exited//\n            titleBG.setImage(\"ComputingData.png\");\n\n\n            launchPane.setAlwaysOnTop(true);\n\n            timeAfter = ATimeLabel.current(ATimeLabel.TIME_24HOUR);\n            System.out.println(game.getLastPlayed());\n            System.out.println(timeAfter);\n\n            //Elapsed Time Calculation\n            hoursDiff = Math.abs(Integer.parseInt(timeAfter.substring(0, 2))\n                                 - Integer.parseInt(game.getLastPlayed()\n                    .substring(0, 2))) * 60;\n            minDiff = Math.abs(Integer.parseInt(timeAfter.substring(3, 5))\n                               - Integer.parseInt(game.getLastPlayed()\n                    .substring(3, 5)));\n            //ELAPSED TIME IN MIN IS ((HOURS*60) - MIN FROM TIME1) + MIN FROM TIME2\n            elapsedTime = Math.abs((hoursDiff - Integer.parseInt(timeAfter\n                    .substring(3, 5))) + Integer.parseInt(game.getLastPlayed()\n                    .substring(3, 5)));\n\n            hoursDiff = elapsedTime / 60;\n            minDiff = elapsedTime - (hoursDiff * 60);\n\n            System.out.println(\"Elapsed \" + elapsedTime);\n            System.out.println(\"Hours \" + hoursDiff);\n            System.out.println(\"Min \" + minDiff);\n\n            lblGameName.setFont(ui.getRegularFont().deriveFont(Font.PLAIN, 95));\n            if (minDiff < 1 && hoursDiff < 1) {\n                lblGameName.setText(\"You Played: under 1 min  \");\n            } else if (hoursDiff < 1) {\n                lblGameName.setText(\"You Played: \" + minDiff + \" min  \");\n            } else {\n                lblGameName.setText(\"You Played: \" + hoursDiff + \"hr and \"\n                                    + minDiff + \"min  \");\n            }\n\n            progressWheel.setClockwise(true);\n            progressWheel.setSpeed(8);\n\n            //Wait a bit before returning to Aurora\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException ex) {\n                Logger.getLogger(AuroraLauncher.class.getName()).log(\n                        Level.SEVERE, null, ex);\n            }\n            break;\n        }\n\n        launchPane.setVisible(false);\n        launchPane.dispose();\n        ui.getFrame().setVisible(true);\n        ui.getFrame().setState(JFrame.NORMAL);\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":14212}]],"length":14212}
{"contributors":[],"silentsave":false,"ts":1355499314251,"patch":[[{"diffs":[[0,"rror.set"],[1,"OK"],[0,"ButtonLi"]],"start1":11334,"start2":11334,"length1":16,"length2":18}]],"length":14214,"saved":false}
