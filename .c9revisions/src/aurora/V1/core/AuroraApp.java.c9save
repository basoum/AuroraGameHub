{"ts":1351179095018,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\r\n * Copyright 2012 Sardonix Creative.\r\n *\r\n * This work is licensed under the\r\n * Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.\r\n * To view a copy of this license, visit\r\n *\r\n *      http://creativecommons.org/licenses/by-nc-nd/3.0/\r\n *\r\n * or send a letter to Creative Commons, 444 Castro Street, ScoreUIte 900,\r\n * Mountain View, California, 94041, USA.\r\n * Unless reqcoreUIred by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\npackage aurora.V1.core;\r\n\r\nimport aurora.V1.core.screen_ui.DashboardUI;\r\nimport aurora.engine.V1.UI.AuroraUI;\r\nimport aurora.engine.V1.UI.aButton;\r\nimport aurora.engine.V1.UI.aProgressWheel;\r\nimport java.awt.BorderLayout;\r\nimport java.awt.Dimension;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.KeyListener;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.event.MouseListener;\r\nimport java.awt.event.MouseWheelListener;\r\nimport java.util.ArrayList;\r\nimport javax.swing.JComponent;\r\nimport javax.swing.JFrame;\r\n\r\n/**\r\n * A Super class to Sub menu app.\r\n *\r\n * @author Sammy\r\n * @version 0.3\r\n */\r\npublic abstract class AuroraApp implements Runnable, AuroraUI {\r\n\r\n    private JFrame frame;\r\n    private AuroraCoreUI coreUI;\r\n    private DashboardUI dashboardUI;\r\n    private int SIZE_TopPadding;\r\n    private Thread loadApp;\r\n    private aProgressWheel progress;\r\n    private ArrayList<JComponent> ComponentsContainingListeners;\r\n    private KeyListener[] KeyListeners;\r\n    private ActionListener[] ActionListeners;\r\n    private MouseListener[] MouseListeners;\r\n    private MouseWheelListener[] MouseWheelListeners;\r\n    private KeyListener[] FrameKeyListeners;\r\n    private MouseListener[] FrameMouseListeners;\r\n    private MouseWheelListener[] FrameMouseWheelListeners;\r\n\r\n    public AuroraApp() {\r\n        ComponentsContainingListeners = new ArrayList<JComponent>();\r\n\r\n    }\r\n\r\n    /**\r\n     * Add to the list of items that will have their Listeners Removed when\r\n     * going back to dashboard.\r\n     *\r\n     * @param component Any component\r\n     */\r\n    public final void addToVolatileListenerBank(final JComponent component) {\r\n        ComponentsContainingListeners.add(component);\r\n    }\r\n\r\n    public final void backToDashboard() {\r\n        removeAllListeners();\r\n        clearUI_Backwards();\r\n\r\n\r\n        dashboardUI.buildUI();\r\n        System.gc();\r\n\r\n\r\n\r\n    }\r\n\r\n    public void setUpSize() {\r\n        int Ratio = coreUI.getFrame().getWidth() / coreUI.getFrame().getHeight();\r\n        if (coreUI.isLargeScreen()) {\r\n            SIZE_TopPadding = coreUI.getPnlCenter().getHeight() / 5 + Ratio / 5;\r\n\r\n        } else {\r\n            SIZE_TopPadding = coreUI.getPnlCenter().getHeight() / 5 + Ratio / 10;\r\n        }\r\n\r\n    }\r\n\r\n    public void clearUI_Backwards() {\r\n\r\n        ///...Clear UI\r\n        coreUI.getPnlKeyToPress().removeAll();\r\n\r\n        coreUI.getPnlCenter().removeAll();\r\n        coreUI.getPnlUserSpace().removeAll();\r\n\r\n        coreUI.getPnlUserSpace().revalidate();\r\n        coreUI.getPnlKeyToPress().revalidate();\r\n\r\n\r\n\r\n        coreUI.getPnlCenterFromBottom().removeAll();\r\n        coreUI.getPnlCenterFromBottom().validate();\r\n        coreUI.getPnlCenterFromBottom().add(BorderLayout.NORTH, coreUI.getPnlHeaderOfCenterFromBottom());\r\n        coreUI.getPnlCenterFromBottom().revalidate();\r\n        coreUI.getPnlHeaderOfCenterFromBottom().setPreferredSize(new Dimension(coreUI.getFrame().getWidth(), coreUI.getPnlKeyToPress().getHeight()));\r\n\r\n        coreUI.getPnlSouthFromTop().setPreferredSize(new Dimension(coreUI.getPnlSouthFromTop().getWidth(), coreUI.getPnlSouthFromTop().getHeight()));\r\n        coreUI.getPnlCenter().setPreferredSize(new Dimension(coreUI.getPnlCenter().getWidth(), coreUI.getFrame().getHeight() - coreUI.getPnlBottom().getHeight() - coreUI.getPnlTop().getHeight()));\r\n        coreUI.getPnlCenter().setPreferredSize(new Dimension(coreUI.getPnlCenter().getWidth(), coreUI.getFrame().getHeight() - (coreUI.getFrame().getHeight() / 6 * 2)));\r\n        coreUI.getPnlBottom().setPreferredSize(new Dimension(coreUI.getPnlBottom().getWidth(), coreUI.getFrame().getHeight() / 6 + 25));\r\n        coreUI.getPnlBottom().setImageHeight(coreUI.getFrame().getHeight() / 6 + 25);\r\n\r\n\r\n        coreUI.getPnlSouthFromTop().removeAll();\r\n        coreUI.getPnlSouthFromTop().add(BorderLayout.EAST, coreUI.getPnlFrameControlContainer());\r\n        coreUI.getPnlSouthFromTop().repaint();\r\n\r\n        coreUI.getPnlInfo().removeAll();\r\n        coreUI.getPnlInfo().add(BorderLayout.CENTER, coreUI.getLblInfo());\r\n        coreUI.getFrame().repaint();\r\n        coreUI.getFrame().getGlassPane().setVisible(false);\r\n    }\r\n\r\n    public void clearUI_Forwards() {\r\n\r\n        setUpSize();\r\n\r\n\r\n        ///...Set Up UI\r\n\r\n\r\n        ///THIS STUFF WAS TO ASYNC LOAD APP IN BACKGROUND, DOESN'T WORK BUT\r\n        //WE SHOULD THINK ABOUT MAKING THIS LOAD FASTER\r\n//        loadApp = null;\r\n//\r\n//        if (loadApp == null) {\r\n//            loadApp = new Thread(this);\r\n//        }\r\n//        loadApp.setName(\"Load App Thread\");\r\n//        //Start Loader\r\n//        loadApp.start();\r\n\r\n        coreUI.getLblInfo().setText(\"   Loading...   \");\r\n\r\n        coreUI.getPnlKeyToPress().removeAll();\r\n        coreUI.getPnlCenter().removeAll();\r\n        coreUI.getPnlUserSpace().removeAll();\r\n\r\n        coreUI.getPnlUserSpace().revalidate();\r\n\r\n\r\n        coreUI.getPnlCenter().setPreferredSize(new Dimension(coreUI.getPnlCenter().getWidth(), coreUI.getFrame().getHeight() - (coreUI.getFrame().getHeight() / 6 * 2)));\r\n        coreUI.getPnlBottom().setPreferredSize(new Dimension(coreUI.getPnlBottom().getWidth(), coreUI.getFrame().getHeight() / 6 + 15));\r\n        coreUI.getPnlBottom().setImageHeight(coreUI.getFrame().getHeight() / 6 + 30);\r\n\r\n        //Remove Content in Center\r\n        coreUI.getPnlCenterFromBottom().removeAll();\r\n\r\n\r\n        //re-add Time\r\n        coreUI.getPnlCenterFromBottom().add(BorderLayout.NORTH, coreUI.getPnlHeaderOfCenterFromBottom());\r\n        coreUI.getPnlHeaderOfCenterFromBottom().setPreferredSize(new Dimension(coreUI.getFrame().getWidth(), coreUI.getPnlKeyToPress().getHeight()));\r\n        coreUI.getPnlHeaderOfCenterFromBottom().revalidate();\r\n\r\n        coreUI.getPnlCenter().revalidate();\r\n        coreUI.getPnlCenterFromBottom().revalidate();\r\n\r\n        //Change Back button\r\n        coreUI.getPnlSouthFromTop().removeAll();\r\n        coreUI.getPnlSouthFromTop().add(coreUI.getPnlFrameControlContainer(), BorderLayout.EAST);\r\n        coreUI.getPnlFrameControl().getComponent(0).addMouseListener(new MouseListener() {\r\n            @Override\r\n            public void mouseClicked(MouseEvent e) {\r\n                removeAllListeners();\r\n                backToDashboard();\r\n\r\n            }\r\n\r\n            @Override\r\n            public void mousePressed(MouseEvent e) {\r\n            }\r\n\r\n            @Override\r\n            public void mouseReleased(MouseEvent e) {\r\n            }\r\n\r\n            @Override\r\n            public void mouseEntered(MouseEvent e) {\r\n            }\r\n\r\n            @Override\r\n            public void mouseExited(MouseEvent e) {\r\n            }\r\n        });\r\n\r\n        coreUI.getFrame().getContentPane().addKeyListener(new KeyListener() {\r\n            @Override\r\n            public void keyTyped(KeyEvent e) {\r\n\r\n                if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {\r\n                    removeAllListeners();\r\n                    backToDashboard();\r\n\r\n                }\r\n\r\n            }\r\n\r\n            @Override\r\n            public void keyPressed(KeyEvent e) {\r\n            }\r\n\r\n            @Override\r\n            public void keyReleased(KeyEvent e) {\r\n            }\r\n        });\r\n\r\n        coreUI.getFrame().requestFocus();\r\n\r\n\r\n\r\n        //Finalize\r\n        coreUI.getPnlInfo().removeAll();\r\n        coreUI.getPnlInfo().add(BorderLayout.CENTER, coreUI.getLblInfo());\r\n\r\n        System.gc();\r\n        coreUI.getFrame().repaint();\r\n\r\n\r\n    }\r\n\r\n    private void removeAllListeners() {\r\n\r\n        //For Components in the Volatile Bank!\r\n        for (int i = 0; i < ComponentsContainingListeners.size(); i++) {\r\n\r\n            //Remove KeyListers\r\n            KeyListeners = ComponentsContainingListeners.get(i).getKeyListeners();\r\n\r\n            for (int j = 0; j < KeyListeners.length; j++) {\r\n                ComponentsContainingListeners.get(i).removeKeyListener(KeyListeners[j]);\r\n\r\n            }\r\n\r\n\r\n            //Remove Mouse Listeners\r\n            MouseListeners = ComponentsContainingListeners.get(i).getMouseListeners();\r\n\r\n            for (int j = 0; j < MouseListeners.length; j++) {\r\n                ComponentsContainingListeners.get(i).removeMouseListener(MouseListeners[j]);\r\n\r\n            }\r\n\r\n\r\n            //Remove Mouse Wheel Listeners\r\n            MouseWheelListeners = ComponentsContainingListeners.get(i).getMouseWheelListeners();\r\n\r\n            for (int j = 0; j < MouseWheelListeners.length; j++) {\r\n                ComponentsContainingListeners.get(i).removeMouseWheelListener(MouseWheelListeners[j]);\r\n\r\n            }\r\n\r\n\r\n\r\n            //Maybe its a buttom remove its action Listeners.\r\n            try {\r\n                ActionListeners = ((aButton) ComponentsContainingListeners.get(i)).getActionListeners();\r\n                for (int j = 0; j < ActionListeners.length; j++) {\r\n                    ((aButton) ComponentsContainingListeners.get(i)).removeActionListener(ActionListeners[j]);\r\n                }\r\n            } catch (Exception e) {\r\n                //maybe its not a Button\r\n            }\r\n        }\r\n\r\n        //Only for the Frame!\r\n\r\n        FrameKeyListeners = coreUI.getFrame().getKeyListeners();\r\n\r\n        for (int i = 0; i < FrameKeyListeners.length; i++) {\r\n            coreUI.getFrame().removeKeyListener(FrameKeyListeners[i]);\r\n        }\r\n\r\n        FrameMouseListeners = coreUI.getFrame().getMouseListeners();\r\n\r\n        for (int i = 0; i < FrameMouseListeners.length; i++) {\r\n            coreUI.getFrame().removeMouseListener(FrameMouseListeners[i]);\r\n        }\r\n\r\n        FrameMouseWheelListeners = coreUI.getFrame().getMouseWheelListeners();\r\n\r\n        for (int i = 0; i < FrameMouseWheelListeners.length; i++) {\r\n            coreUI.getFrame().removeMouseWheelListener(FrameMouseWheelListeners[i]);\r\n        }\r\n\r\n\r\n        ComponentsContainingListeners.removeAll(ComponentsContainingListeners);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n\r\n        while (Thread.currentThread() == loadApp) {\r\n\r\n            break;\r\n        }\r\n\r\n\r\n    }\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":10748}]],"length":10748}
