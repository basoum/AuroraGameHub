{"ts":1355499192322,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright 2012 Sardonix Creative.\n *\n * This work is licensed under the\n * Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.\n * To view a copy of this license, visit\n *\n *      http://creativecommons.org/licenses/by-nc-nd/3.0/\n *\n * or send a letter to Creative Commons, 444 Castro Street, Suite 900,\n * Mountain View, California, 94041, USA.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage aurora.V1.core.screen_handler;\n\nimport aurora.V1.core.AuroraCoreUI;\nimport aurora.V1.core.AuroraStorage;\nimport aurora.V1.core.Game;\nimport aurora.V1.core.GamePlaceholder;\nimport aurora.V1.core.GameSearch;\nimport aurora.V1.core.GridAnimation;\nimport aurora.V1.core.GridManager;\nimport aurora.V1.core.GridSearch;\nimport aurora.V1.core.screen_handler.GameLibraryHandler.MoveToLastGrid;\nimport aurora.V1.core.screen_logic.GameLibraryLogic;\nimport aurora.V1.core.screen_ui.GameLibraryUI;\nimport aurora.engine.V1.Logic.AFileManager;\nimport aurora.engine.V1.Logic.ASimpleDB;\nimport aurora.engine.V1.Logic.AuroraScreenHandler;\nimport aurora.engine.V1.Logic.AuroraScreenLogic;\nimport aurora.engine.V1.UI.AButton;\nimport aurora.engine.V1.UI.AGridPanel;\nimport aurora.engine.V1.UI.AHoverButton;\nimport aurora.engine.V1.UI.AImage;\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseListener;\nimport java.awt.event.MouseWheelEvent;\nimport java.awt.event.MouseWheelListener;\nimport java.io.File;\nimport java.net.MalformedURLException;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.swing.DefaultListModel;\nimport javax.swing.JButton;\nimport javax.swing.JFileChooser;\nimport javax.swing.JList;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport javax.swing.filechooser.FileFilter;\n\n/**\n * .------------------------------------------------------------------------.\n * | GameLibraryHandler\n * .------------------------------------------------------------------------.\n * |\n * | This class contains all Listeners/Handlers attached to UI elements\n * | found in GameLibraryUI. The handlers may access the logic or simply\n * | make simple processing within each Handler/Listeners.\n * |\n * | Each Handler is attached to UI components to listen for different actions\n * | The actions can be processed or handled internally or within th Logic\n * | of the Screen.\n * |\n * |\n * .........................................................................\n *\n * @author Sammy Guergachi <sguergachi at gmail.com>\n * @author Carlos Machado <camachado@gmail.com>\n *\n */\npublic class GameLibraryHandler implements\n        AuroraScreenHandler {\n\n    /**\n     * GameLibraryLogic instance.\n     */\n    private GameLibraryLogic libraryLogic;\n\n    /**\n     * GameLibraryUI instance.\n     */\n    private final GameLibraryUI libraryUI;\n\n    private final GridSearch gridSearch;\n\n    private final GameSearch gameSearch;\n\n    private ASimpleDB coverDB;\n\n    /**\n     * .-----------------------------------------------------------------------.\n     * | GameLibraryHandler(GameLibraryUI)\n     * .-----------------------------------------------------------------------.\n     * |\n     * | This is the Constructor of the GameLibrary Handler class.\n     * |\n     * | The Constructor of the Handler class needs to UI class to be able to\n     * | first get the logic from it, and second to be able to manipulate the UI\n     * | within the actual Handlers.\n     * |\n     * .........................................................................\n     * <p/>\n     * @param aLibraryUI GameLibraryUI\n     */\n    public GameLibraryHandler(final GameLibraryUI aLibraryUI) {\n        this.libraryUI = aLibraryUI;\n\n        //* Start Aurora Dabatase connection *//\n        try {\n            coverDB = new ASimpleDB(\"AuroraDB\", \"AuroraTable\", false);\n        } catch (SQLException ex) {\n            Logger.getLogger(GameLibraryUI.class.getName()).log(Level.SEVERE,\n                    null, ex);\n        }\n\n        this.gridSearch = new GridSearch(libraryUI.getCoreUI(), libraryUI,\n                this);\n        this.gameSearch = new GameSearch(libraryUI, coverDB,\n                libraryUI.getStorage());\n    }\n\n    @Override\n    public final void setLogic(final AuroraScreenLogic logic) {\n\n        this.libraryLogic = (GameLibraryLogic) logic;\n\n    }\n\n    public class RemoveSearchHandler implements ActionListener {\n\n        private final AButton SearchButton;\n\n        public RemoveSearchHandler() {\n            this.SearchButton = libraryUI.getSearchButton();\n\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            try {\n                gridSearch.restoreGrid();\n            } catch (MalformedURLException ex) {\n                Logger.getLogger(GameLibraryHandler.class.getName()).log(\n                        Level.SEVERE, null, ex);\n            }\n            gridSearch.resetAppendedName();\n            libraryUI.getSearchBar().setText(\"Start Typing To Search...\");\n            libraryUI.getSearchBar().setForeground(Color.darkGray);\n            libraryUI.getSearchBarBG()\n                    .setImage(\"library_searchBar_inactive.png\");\n            libraryUI.getSearchButtonBG().removeAll();\n            libraryUI.getSearchButtonBG().add(libraryUI.getSearchButton(),\n                    BorderLayout.NORTH);\n            libraryUI.getCoreUI().getFrame().requestFocus();\n            libraryUI.getGameBack().revalidate();\n        }\n    }\n\n    //////Search Library Bar//////////\n    ///What to do if Click on Search Box\n    public class searchSelectHandler extends MouseAdapter {\n\n        @Override\n        public void mouseClicked(MouseEvent e) {\n        }\n\n        @Override\n        public void mousePressed(MouseEvent e) {\n            if (libraryUI.getSearchBar().getText().equals(\n                    \"Start Typing To Search...\")) {\n                libraryUI.getSearchBar().setText(\"\");\n                libraryUI.getSearchBar().setForeground(Color.darkGray);\n                libraryUI.getSearchBarBG().setImage(\n                        \"library_searchBar_active.png\");\n                libraryUI.getSearchButtonBG().removeAll();\n                libraryUI.getSearchButtonBG().add(libraryUI\n                        .getRemoveSearchButton(), BorderLayout.NORTH);\n                gridSearch.resetAppendedName();\n            }\n        }\n    }\n\n    public class searchButtonHandler implements ActionListener {\n        //Handles the Search Button Besides the Search Box\n\n        @Override\n        //Simply Requests focus and resets append string\n        public void actionPerformed(ActionEvent e) {\n\n            libraryUI.getSearchBar().requestFocus();\n            libraryUI.getSearchBar().setText(\"\");\n            libraryUI.getSearchBar().setForeground(Color.darkGray);\n            libraryUI.getSearchBarBG().setImage(\"library_searchBar_active.png\");\n            libraryUI.getSearchButtonBG().removeAll();\n            libraryUI.getSearchButtonBG().add(libraryUI.getRemoveSearchButton(),\n                    BorderLayout.NORTH);\n            libraryUI.getRemoveSearchButton()\n                    .addActionListener(new RemoveSearchHandler());\n        }\n    }\n\n    public class searchLostFocusHandler implements FocusListener {\n\n        @Override\n        public void focusGained(FocusEvent e) {\n        }\n\n        @Override\n        public void focusLost(FocusEvent e) {\n            libraryUI.getSearchBarBG().setImage(\"library_searchBar_active.png\");\n        }\n    }\n\n    public class searchFocusHandler implements FocusListener {\n\n        private JTextField SearchBar;\n\n        private JButton SearchButton;\n\n        public searchFocusHandler() {\n            this.SearchBar = libraryUI.getSearchBar();\n            this.SearchButton = libraryUI.getSearchButton();\n\n        }\n\n        @Override\n        //If Focus was not gained thru the search button, then\n        //reset text and append string\n        public void focusGained(FocusEvent e) {\n            if (libraryUI.getSearchBar().getText().equals(\n                    \"Start Typing To Search...\")) {\n                if (e.getOppositeComponent() == SearchButton) {\n                    SearchBar.setText(\"\");\n                    gridSearch.resetAppendedName();\n                    libraryUI.getSearchBar().setForeground(Color.darkGray);\n                    libraryUI.getSearchBarBG().setImage(\n                            \"library_searchBar_active.png\");\n                    libraryUI.getSearchButtonBG().removeAll();\n                    libraryUI.getSearchButtonBG().add(libraryUI\n                            .getRemoveSearchButton(), BorderLayout.NORTH);\n                    libraryUI.getRemoveSearchButton()\n                            .addActionListener(\n                            new RemoveSearchHandler());\n                }\n            }\n        }\n\n        @Override\n        public void focusLost(FocusEvent e) {\n\n            if (libraryUI.getSearchBar().getText().equals(\"\")) {\n\n                //Make sure Search button had no effect\n                if (e.getOppositeComponent() != SearchButton) {\n                    //if focus lost then searches thru all Grid Panels, then inside each grid\n                    try {\n                        for (int i = 0; i < gridSearch.getGridManager()\n                                .getArray()\n                                .size(); i++) {\n                            for (int j = 0; j < gridSearch.getGridManager()\n                                    .getGrid(\n                                    i).getArray().size(); j++) {\n                                //If the focus was not lost due to a GameCover Obj in the Search Grid\n\n                                if (e.getOppositeComponent() instanceof GamePlaceholder) {\n                                    if (e.getOppositeComponent()\n                                        != (Game) gridSearch.getGridManager()\n                                            .getGrid(i).getArray().get(j)) {\n                                        System.out.println(e\n                                                .getOppositeComponent());\n                                        //Attempt to restore to GameCover Library Grid\n                                        try {\n                                            gridSearch.restoreGrid();\n                                        } catch (MalformedURLException ex) {\n                                            Logger\n                                                    .getLogger(GameLibraryHandler.class\n                                                    .getName())\n                                                    .log(Level.SEVERE, null, ex);\n                                        }\n                                        //reset Search Box and append string\n                                        gridSearch.resetAppendedName();\n\n                                    }\n                                }\n                            }\n                        }\n                    } catch (NullPointerException ex) {\n                        for (int i = 0; i < libraryUI.getGridSplit().getArray()\n                                .size(); i++) {\n                            for (int j = 0; j < libraryUI.getGridSplit()\n                                    .getGrid(i).getArray().size(); j++) {\n                                //If the focus was not lost due to a GameCover Obj in the Search Grid\n\n                                if (e.getOppositeComponent() instanceof GamePlaceholder) {\n                                    if (e.getOppositeComponent()\n                                        != (Game) libraryUI.getGridSplit()\n                                            .getGrid(i).getArray().get(j)) {\n                                        System.out.println(e\n                                                .getOppositeComponent());\n                                        //Attempt to restore to GameCover Library Grid\n                                        try {\n                                            gridSearch.restoreGrid();\n                                        } catch (MalformedURLException exx) {\n                                            Logger\n                                                    .getLogger(GameLibraryHandler.class\n                                                    .getName())\n                                                    .log(Level.SEVERE, null, exx);\n                                        }\n                                        //reset Search Box and append string\n                                        gridSearch.resetAppendedName();\n\n                                    }\n                                }\n                            }\n                        }\n\n                    }\n\n                    SearchBar.setText(\"Start Typing To Search...\");\n                    libraryUI.getSearchBar().setForeground(Color.darkGray);\n                    libraryUI.getSearchBarBG()\n                            .setImage(\"library_searchBar_inactive.png\");\n                    libraryUI.getSearchButtonBG().removeAll();\n                    libraryUI.getSearchButtonBG().add(libraryUI\n                            .getSearchButton(), BorderLayout.NORTH);\n                }\n            }\n        }\n    }\n\n    public class searchBoxHandler extends KeyAdapter {\n        //Handles Typing In Search Box, when it is in focus\n\n        @Override\n        public void keyReleased(KeyEvent e) {\n            //this activates for any letter number or space key\n\n            libraryUI.getSearchBar().setForeground(Color.darkGray);\n            libraryUI.getSearchBarBG().setImage(\"library_searchBar_active.png\");\n            if (!libraryUI.isAddGameUI_Visible()) {\n                if (e.getKeyCode() == KeyEvent.VK_A\n                    || e.getKeyCode() == KeyEvent.VK_B\n                    || e.getKeyCode() == KeyEvent.VK_C\n                    || e.getKeyCode() == KeyEvent.VK_D\n                    || e.getKeyCode() == KeyEvent.VK_E\n                    || e.getKeyCode() == KeyEvent.VK_F\n                    || e.getKeyCode() == KeyEvent.VK_G\n                    || e.getKeyCode() == KeyEvent.VK_H\n                    || e.getKeyCode() == KeyEvent.VK_I\n                    || e.getKeyCode() == KeyEvent.VK_J\n                    || e.getKeyCode() == KeyEvent.VK_K\n                    || e.getKeyCode() == KeyEvent.VK_L\n                    || e.getKeyCode() == KeyEvent.VK_M\n                    || e.getKeyCode() == KeyEvent.VK_N\n                    || e.getKeyCode() == KeyEvent.VK_O\n                    || e.getKeyCode() == KeyEvent.VK_P\n                    || e.getKeyCode() == KeyEvent.VK_Q\n                    || e.getKeyCode() == KeyEvent.VK_R\n                    || e.getKeyCode() == KeyEvent.VK_S\n                    || e.getKeyCode() == KeyEvent.VK_T\n                    || e.getKeyCode() == KeyEvent.VK_U\n                    || e.getKeyCode() == KeyEvent.VK_V\n                    || e.getKeyCode() == KeyEvent.VK_W\n                    || e.getKeyCode() == KeyEvent.VK_X\n                    || e.getKeyCode() == KeyEvent.VK_Y\n                    || e.getKeyCode() == KeyEvent.VK_Z\n                    || e.getKeyCode() == KeyEvent.VK_SPACE\n                    || e.getKeyCode() == KeyEvent.VK_1\n                    || e.getKeyCode() == KeyEvent.VK_2\n                    || e.getKeyCode() == KeyEvent.VK_3\n                    || e.getKeyCode() == KeyEvent.VK_4\n                    || e.getKeyCode() == KeyEvent.VK_5\n                    || e.getKeyCode() == KeyEvent.VK_6\n                    || e.getKeyCode() == KeyEvent.VK_7\n                    || e.getKeyCode() == KeyEvent.VK_8\n                    || e.getKeyCode() == KeyEvent.VK_9\n                    || e.getKeyCode() == KeyEvent.VK_0\n                    || e.getKeyCode() == KeyEvent.VK_QUOTE) {\n                    gridSearch.typedChar(e.getKeyChar()); //Sends the key to the search engine to be appended and check for match\n\n                } else if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {\n                    // If backspace is pressed tell search engine to search for name - 1 character\n                    gridSearch.removeChar(e.getKeyChar());\n\n                }\n            }\n        }\n    }\n\n    public class searchRefocusListener extends KeyAdapter {\n        //Handles When User Starts Typing While Components other than the\n        //Search Box are in focus.\n        //Must get first key typed and put it in the searchbox\n        //Then set focus to the searchbox\n\n        private JTextField SearchBar;\n\n        public searchRefocusListener() {\n            this.SearchBar = libraryUI.getSearchBar();\n        }\n\n        @Override\n        public void keyReleased(KeyEvent e) {\n            //pressing any Number or Letter can activate this\n            if (!libraryUI.isAddGameUI_Visible()) {\n                if (//e.getKeyCode() == KeyEvent.VK_A\n                        e.getKeyCode() == KeyEvent.VK_B\n                        || e.getKeyCode() == KeyEvent.VK_C\n                        // || e.getKeyCode() == KeyEvent.VK_D\n                        || e.getKeyCode() == KeyEvent.VK_E\n                        || e.getKeyCode() == KeyEvent.VK_F\n                        || e.getKeyCode() == KeyEvent.VK_G\n                        || e.getKeyCode() == KeyEvent.VK_H\n                        || e.getKeyCode() == KeyEvent.VK_I\n                        || e.getKeyCode() == KeyEvent.VK_J\n                        || e.getKeyCode() == KeyEvent.VK_K\n                        || e.getKeyCode() == KeyEvent.VK_L\n                        || e.getKeyCode() == KeyEvent.VK_M\n                        || e.getKeyCode() == KeyEvent.VK_N\n                        || e.getKeyCode() == KeyEvent.VK_O\n                        || e.getKeyCode() == KeyEvent.VK_P\n                        || e.getKeyCode() == KeyEvent.VK_Q\n                        || e.getKeyCode() == KeyEvent.VK_R\n                        // || e.getKeyCode() == KeyEvent.VK_S\n                        || e.getKeyCode() == KeyEvent.VK_T\n                        || e.getKeyCode() == KeyEvent.VK_U\n                        || e.getKeyCode() == KeyEvent.VK_V\n                        // || e.getKeyCode() == KeyEvent.VK_W\n                        || e.getKeyCode() == KeyEvent.VK_X\n                        || e.getKeyCode() == KeyEvent.VK_Y\n                        || e.getKeyCode() == KeyEvent.VK_Z\n                        || e.getKeyCode() == KeyEvent.VK_1\n                        || e.getKeyCode() == KeyEvent.VK_2\n                        || e.getKeyCode() == KeyEvent.VK_3\n                        || e.getKeyCode() == KeyEvent.VK_4\n                        || e.getKeyCode() == KeyEvent.VK_5\n                        || e.getKeyCode() == KeyEvent.VK_6\n                        || e.getKeyCode() == KeyEvent.VK_7\n                        || e.getKeyCode() == KeyEvent.VK_8\n                        || e.getKeyCode() == KeyEvent.VK_9\n                        || e.getKeyCode() == KeyEvent.VK_0\n                        || e.getKeyCode() == KeyEvent.VK_QUOTE) {\n\n                    SearchBar.setText(String.valueOf(e.getKeyChar())); //Set first character of Search Box to the key typed\n                    gridSearch.resetAppendedName();//Clear appended text if there is anything still in there\n                    gridSearch.clearGameGrid(); //clear and prep for search mode\n                    gridSearch.typedChar(e.getKeyChar()); // Pass to search engine first character\n                    SearchBar.requestFocus(); // Get focus of Search Box\n\n                    libraryUI.getSearchBar().setForeground(Color.darkGray);\n                    libraryUI.getSearchBarBG().setImage(\n                            \"library_searchBar_active.png\");\n                    libraryUI.getSearchButtonBG().removeAll();\n                    libraryUI.getSearchButtonBG().add(libraryUI\n                            .getRemoveSearchButton(), BorderLayout.NORTH);\n                    libraryUI.getRemoveSearchButton()\n                            .addActionListener(\n                            new RemoveSearchHandler());\n                }\n            }\n        }\n    }\n\n    /////////////////////////////////////////////////////////////\n    public class addGameSearchBoxHandler extends KeyAdapter {\n        //Handles Typing In Search Box, when it is in focus\n\n        @Override\n        public void keyReleased(KeyEvent e) {\n            //this activates for any letter number or space key\n\n            libraryUI.getSearchBar().setForeground(Color.darkGray);\n            libraryUI.getSearchBarBG().setImage(\"library_searchBar_active.png\");\n\n            if (e.getKeyCode() == KeyEvent.VK_A\n                || e.getKeyCode() == KeyEvent.VK_B\n                || e.getKeyCode() == KeyEvent.VK_C\n                || e.getKeyCode() == KeyEvent.VK_D\n                || e.getKeyCode() == KeyEvent.VK_E\n                || e.getKeyCode() == KeyEvent.VK_F\n                || e.getKeyCode() == KeyEvent.VK_G\n                || e.getKeyCode() == KeyEvent.VK_H\n                || e.getKeyCode() == KeyEvent.VK_I\n                || e.getKeyCode() == KeyEvent.VK_J\n                || e.getKeyCode() == KeyEvent.VK_K\n                || e.getKeyCode() == KeyEvent.VK_L\n                || e.getKeyCode() == KeyEvent.VK_M\n                || e.getKeyCode() == KeyEvent.VK_N\n                || e.getKeyCode() == KeyEvent.VK_O\n                || e.getKeyCode() == KeyEvent.VK_P\n                || e.getKeyCode() == KeyEvent.VK_Q\n                || e.getKeyCode() == KeyEvent.VK_R\n                || e.getKeyCode() == KeyEvent.VK_S\n                || e.getKeyCode() == KeyEvent.VK_T\n                || e.getKeyCode() == KeyEvent.VK_U\n                || e.getKeyCode() == KeyEvent.VK_V\n                || e.getKeyCode() == KeyEvent.VK_W\n                || e.getKeyCode() == KeyEvent.VK_X\n                || e.getKeyCode() == KeyEvent.VK_Y\n                || e.getKeyCode() == KeyEvent.VK_Z\n                || e.getKeyCode() == KeyEvent.VK_SPACE\n                || e.getKeyCode() == KeyEvent.VK_1\n                || e.getKeyCode() == KeyEvent.VK_2\n                || e.getKeyCode() == KeyEvent.VK_3\n                || e.getKeyCode() == KeyEvent.VK_4\n                || e.getKeyCode() == KeyEvent.VK_5\n                || e.getKeyCode() == KeyEvent.VK_6\n                || e.getKeyCode() == KeyEvent.VK_7\n                || e.getKeyCode() == KeyEvent.VK_8\n                || e.getKeyCode() == KeyEvent.VK_9\n                || e.getKeyCode() == KeyEvent.VK_0\n                || e.getKeyCode() == KeyEvent.VK_QUOTE) {\n                gameSearch.typedChar(e.getKeyChar()); //Sends the key to the search engine to be appended and check for match\n\n            } else if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {\n                // If backspace is pressed tell search engine to search for name - 1 character\n                gameSearch.removeChar(e.getKeyChar());\n\n            }\n        }\n    }\n\n    ////Add Game UI////////\n    //For when you select the Textfield in the add Game UI\n    public class addGameMouseHandler extends MouseAdapter {\n\n        @Override\n        public void mousePressed(MouseEvent e) {\n\n            if (libraryUI.getSearchText().getText().equals(\n                    \"Search For Game To Add...\")) {\n                libraryUI.getSearchText().requestFocus();\n                libraryUI.getSearchText().setText(\"\");\n                gameSearch.resetCover();\n                libraryUI.getSearchText().setForeground(new Color(23, 139, 255));\n                libraryUI.getPnlSearchBG().setImage(\n                        \"addUI_text_active.png\");\n            }\n        }\n    }\n\n    public class addGameFocusHandler implements FocusListener {\n\n        @Override\n        public void focusGained(FocusEvent e) {\n            if (libraryUI.getSearchText().getText().equals(\n                    \"Search For Game To Add...\")) {\n                libraryUI.getSearchText().setText(\"\");\n                gameSearch.resetCover();\n                libraryUI.getSearchText().setForeground(new Color(23, 139, 255));\n                libraryUI.getPnlSearchBG().setImage(\n                        \"addUI_text_active.png\");\n            }\n\n        }\n\n        @Override\n        public void focusLost(FocusEvent e) {\n\n            if (e.getOppositeComponent() instanceof JList || e\n                    .getOppositeComponent() instanceof JFileChooser == false) {\n                try {\n                    gridSearch.restoreGrid();\n                } catch (MalformedURLException ex) {\n                    Logger.getLogger(GameLibraryHandler.class.getName())\n                            .log(Level.SEVERE, null, ex);\n                }\n                if (libraryUI.getSearchText().getText().length() <= 1) {\n                    libraryUI.getSearchText().setText(\n                            \"Search For Game To Add...\");\n                    libraryUI.getSearchText().setForeground(Color.darkGray);\n                    libraryUI.getPnlSearchBG().setImage(\n                            \"addUI_text_inactive.png\");\n                }\n\n            }\n        }\n    }\n\n    public class HideGameAddUIHandler implements ActionListener {\n\n        private GameLibraryUI libraryUI;\n\n        public HideGameAddUIHandler(GameLibraryUI gameLibraryUI) {\n            this.libraryUI = gameLibraryUI;\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            libraryUI.hideAddGameUI();\n        }\n    }\n\n    public class ExecutableChooserHandler implements ActionListener {\n\n        private JFileChooser gameLocator;\n\n        public ExecutableChooserHandler(JFileChooser locator) {\n            gameLocator = locator;\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n\n            if (gameLocator.getSelectedFile() != null) {\n                libraryUI\n                        .setCurrentPath(gameLocator.getSelectedFile().getPath());\n                libraryUI.getStatusBadge2().setImgURl(\"addUI_badge_valid.png\");\n                libraryLogic.checkNotifiers();\n                System.out.println(libraryUI.getCurrentPath());\n            } else {\n                libraryUI.getStatusBadge2().setImgURl(\"addUI_badge_invalid.png\");\n            }\n        }\n    }\n\n    public class ExecutableFilterHandler extends FileFilter {\n\n        private AuroraCoreUI coreUI;\n\n        public ExecutableFilterHandler() {\n            this.coreUI = libraryUI.getCoreUI();\n        }\n\n        @Override\n        public boolean accept(File file) {\n            if (file.isDirectory()) {\n\n                return true;\n            }\n\n            String extension = AFileManager.getExtension(file);\n            if (extension != null) {\n                if (extension.equals(\"exe\")\n                    || extension.equals(\"app\")\n                    || extension.equals(\"lnk\")) {\n\n                    return true;\n                } else {\n\n                    return false;\n\n                }\n            } else if (coreUI.getOS().indexOf(\"nix\") >= 0 || coreUI.getOS()\n                    .indexOf(\"nux\") >= 0) {\n\n                return true;\n            }\n\n            return false;\n        }\n\n        @Override\n        public String getDescription() {\n            return \"Executable Game File\";\n        }\n    }\n\n    public class AddToLibraryHandler implements ActionListener {\n\n        private GridManager gridManager;\n\n        private JPanel GameBack;\n\n        private MoveToLastGrid GridMove;\n\n        private AuroraStorage storage;\n\n        private String currentPath;\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n\n            currentPath = libraryUI.getCurrentPath();\n            gridManager = libraryUI.getGridSplit();\n            GameBack = libraryUI.getGameBack();\n            GridMove = libraryUI.getGridMove();\n            storage = libraryUI.getStorage();\n\n            gameSearch.getFoundGameCover().setGamePath(currentPath);\n            gameSearch.getFoundGameCover()\n                    .setCoverSize(libraryUI.getGameCoverWidth(), libraryUI\n                    .getGameCoverHeight());\n            gameSearch.getFoundGameCover().reAddInteractive();\n            if (!gridManager.isDupicate(gameSearch.getFoundGameCover())) {\n                storage.getStoredLibrary()\n                        .SaveGame(gameSearch.getFoundGameCover());\n\n\n            }\n            gridManager.addGame(gameSearch.getFoundGameCover());\n            gridManager.finalizeGrid(new ShowAddGameUiHandler(),\n                    libraryUI\n                    .getGameCoverWidth(), libraryUI\n                    .getGameCoverHeight());\n            libraryUI.hideAddGameUI();\n\n            //* reset cover to blank cover *//\n            gameSearch.resetCover();\n\n            libraryUI.setCurrentIndex(\n                    gridManager.getArray().indexOf(GameBack.getComponent(1)));\n\n            //* Transition towards to left most grid to see the game added *//\n            GridMove.runMover();\n        }\n    }\n\n    public class SelectListHandler implements ListSelectionListener {\n\n        private JList gamesList;\n\n        private DefaultListModel listModel;\n\n        private JTextField gameSearchBar;\n\n        public SelectListHandler() {\n            gamesList = libraryUI.getGamesList();\n            listModel = libraryUI.getListModel();\n            gameSearchBar = libraryUI.getGameSearchBar();\n        }\n\n        @Override\n        public void valueChanged(ListSelectionEvent e) {\n\n            if (gamesList.getSelectedIndex() != -1) {\n                System.out.println();\n                String gameSelected = (String) listModel.get(gamesList\n                        .getSelectedIndex());\n                gameSearchBar.setText(gameSelected);\n\n                gameSearch.searchSpecificGame(gameSelected);\n                gameSearch.setAppendedName(gameSelected);\n\n            }\n        }\n    }\n\n    public class ShowAddGameUiHandler implements ActionListener {\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n\n            libraryUI.showAddGameUI();\n\n        }\n    }\n\n    //Transisions towards the Last Grid in the library\n    //To show game added (apple iOS style :P )\n    public class MoveToLastGrid implements Runnable {\n\n        private Thread mover;\n\n        public void runMover() {\n            mover = null;\n\n            if (mover == null) {\n                mover = new Thread(this);\n            }\n            mover.setName(\"Mover Thread\");\n            //Start Loader\n            System.out.println(\"Starting Mover Thread\");\n            mover.start();\n        }\n\n        @Override\n        public void run() {\n            while (Thread.currentThread() == mover) {\n                if (libraryUI.getCurrentIndex() < libraryUI.getGridSplit()\n                        .getFullGrids()) {\n\n                    libraryUI.getMoveLibraryRightHandler().mouseClicked(null);\n\n                } else if (libraryUI.getCurrentIndex() >= libraryUI\n                        .getGridSplit()\n                        .getFullGrids()) {\n                    break;\n                }\n                try {\n                    Thread.sleep(200);\n                } catch (InterruptedException ex) {\n                    Logger.getLogger(GameLibraryUI.class.getName()).log(\n                            Level.SEVERE, null, ex);\n                }\n            }\n\n        }\n    }\n\n    //Prevents from clicking Through the Aurora Add Game UI and select Games in the\n    //Background\n    public class EmptyMouseHandler extends MouseAdapter {\n\n        @Override\n        public void mouseClicked(MouseEvent e) {\n        }\n\n        @Override\n        public void mousePressed(MouseEvent e) {\n        }\n\n        @Override\n        public void mouseReleased(MouseEvent e) {\n        }\n\n        @Override\n        public void mouseEntered(MouseEvent e) {\n        }\n\n        @Override\n        public void mouseExited(MouseEvent e) {\n        }\n    }\n\n    public class HoverButtonLeft extends MouseAdapter {\n\n        private GridManager gridManager;\n\n        private JPanel GameBack;\n\n        private AHoverButton imgGameLeft;\n\n        private AHoverButton imgGameRight;\n\n        private AImage imgFavorite;\n\n        private GridAnimation GridAnimate;\n\n        public HoverButtonLeft() {\n            gridManager = libraryUI.getGridSplit();\n            GameBack = libraryUI.getGameBack();\n        }\n\n        @Override\n        public void mouseClicked(MouseEvent e) {\n            imgGameLeft = libraryUI.getImgGameLeft();\n            imgGameRight = libraryUI.getImgGameRight();\n            imgFavorite = libraryUI.getImgFavorite();\n            GridAnimate = libraryUI.getGridAnimate();\n\n            gridManager = libraryUI.getGridSplit();\n\n\n\n            int currentIndex;\n\n            if (!GridAnimate.getAnimator1().isAnimating() && !GridAnimate\n                    .getAnimator2().isAnimating()) {\n\n                ///Get The Index of The Current Panel Being Displayed\n                ///Refer too GridManager array of All panels to find it\n                currentIndex = gridManager.getArray().indexOf(GameBack\n                        .getComponent(1));\n\n                //Stop from going to far left\n                if (currentIndex - 1 == -1) {\n                    currentIndex = 1;\n                    imgGameLeft.mouseExit();\n                }\n\n\n                if (currentIndex < gridManager.getArray().size()) {\n\n\n                    //Clear Panel\n                    //GameBack.removeAll();\n                    if (currentIndex - 1 <= 0) {\n                        //Far Left Image\n                        GameBack.remove(0);\n                        GameBack.add(imgFavorite, BorderLayout.WEST, 0);\n\n                    } else {\n                        //Left Button\n                        GameBack.remove(0);\n                        GameBack.add(imgGameLeft, BorderLayout.WEST, 0);\n                    }\n                    //Add GameCover Covers\n\n                    GridAnimate.moveLeft(currentIndex);\n\n\n                    try {\n                        libraryLogic.loadGames(currentIndex - 1);\n                    } catch (MalformedURLException ex) {\n                        Logger.getLogger(GameLibraryUI.class.getName())\n                                .log(Level.SEVERE, null, ex);\n                    }\n\n\n                    GameBack.add(BorderLayout.EAST, imgGameRight);\n                }\n\n                libraryUI.getCoreUI().getCenterPanel().removeAll();\n                libraryUI.getCoreUI().getCenterPanel().add(BorderLayout.CENTER,\n                        GameBack);\n\n                GameBack.repaint();\n                GameBack.revalidate();\n\n\n            }\n            imgGameLeft.mouseExit();\n        }\n\n        @Override\n        public void mouseEntered(MouseEvent e) {\n            imgGameLeft = libraryUI.getImgGameLeft();\n            imgGameRight = libraryUI.getImgGameRight();\n            imgFavorite = libraryUI.getImgFavorite();\n            GridAnimate = libraryUI.getGridAnimate();\n            GridAnimate = libraryUI.getGridAnimate();\n            imgGameLeft = libraryUI.getImgGameLeft();\n\n            if (!GridAnimate.getAnimator1().isAnimating() && !GridAnimate\n                    .getAnimator2().isAnimating()) {\n                imgGameLeft.mouseHover(e);\n            }\n        }\n\n        @Override\n        public void mouseExited(MouseEvent e) {\n            imgGameLeft = libraryUI.getImgGameLeft();\n            imgGameRight = libraryUI.getImgGameRight();\n            imgFavorite = libraryUI.getImgFavorite();\n            GridAnimate = libraryUI.getGridAnimate();\n            imgGameLeft.mouseExit();\n\n        }\n    }\n\n    public class HoverButtonRight extends MouseAdapter {\n\n        private GridManager gridManager;\n\n        private JPanel GameBack;\n\n        private AHoverButton imgGameLeft;\n\n        private AHoverButton imgGameRight;\n\n        private AImage imgFavorite;\n\n        private AImage imgBlank;\n\n        private GridAnimation GridAnimate;\n\n        private final AuroraCoreUI coreUI;\n\n        public HoverButtonRight() {\n            this.coreUI = libraryUI.getCoreUI();\n\n            GameBack = libraryUI.getGameBack();\n            imgGameLeft = libraryUI.getImgGameLeft();\n            imgGameRight = libraryUI.getImgGameRight();\n            imgFavorite = libraryUI.getImgFavorite();\n            imgBlank = libraryUI.getImgBlank();\n            GridAnimate = libraryUI.getGridAnimate();\n        }\n\n        @Override\n        public void mouseClicked(MouseEvent e) {\n            gridManager = libraryUI.getGridSplit();\n\n            if (!GridAnimate.getAnimator1().isAnimating() && !GridAnimate\n                    .getAnimator2().isAnimating()) {\n\n                libraryUI.setCurrentIndex(gridManager.getArray()\n                        .indexOf(GameBack\n                        .getComponent(1)));\n\n                if (libraryUI.getCurrentIndex() < gridManager.getArray().size()\n                                                  - 1) {\n\n                    GameBack.remove(0);\n                    GameBack.add(libraryUI.getImgGameLeft(), BorderLayout.WEST,\n                            0);\n\n                    GameBack.add(imgGameRight, BorderLayout.EAST, 2);\n\n                    GridAnimate.moveRight(libraryUI.getCurrentIndex());\n\n\n                    try {\n                        libraryLogic.loadGames(libraryUI.getCurrentIndex() + 1);\n                    } catch (MalformedURLException ex) {\n                        Logger.getLogger(GameLibraryUI.class.getName())\n                                .log(Level.SEVERE, null, ex);\n                    }\n\n\n\n                    //of on last Grid then dont show right arrow button\n                    if (!(libraryUI.getCurrentIndex() + 1 < gridManager\n                            .getArray()\n                            .size() - 1)) {\n\n                        GameBack.remove(libraryUI.getImgGameRight());\n                        GameBack.add(imgBlank, BorderLayout.EAST, 2);\n                        imgGameRight.mouseExit();\n                    }\n                }\n\n                coreUI.getCenterPanel().removeAll();\n                coreUI.getCenterPanel().add(BorderLayout.CENTER, libraryUI\n                        .getGameBack());\n\n                GameBack.repaint();\n                GameBack.revalidate();\n\n            }\n            imgGameRight.mouseExit();\n        }\n\n        @Override\n        public void mouseEntered(MouseEvent e) {\n            System.out.println(\"HOVER IMAGE ACTIVATED\");\n            GridAnimate = libraryUI.getGridAnimate();\n            imgGameRight = libraryUI.getImgGameRight();\n\n            if (!GridAnimate.getAnimator1().isAnimating() && !GridAnimate\n                    .getAnimator2().isAnimating()) {\n                imgGameRight.mouseHover(e);\n            }\n        }\n\n        @Override\n        public void mouseExited(MouseEvent e) {\n            imgGameRight.mouseExit();\n        }\n    }\n\n    //Handler for the Navigation using Keyboard\n    public class GameLibraryKeyListener extends KeyAdapter {\n\n        private GridManager gridManager;\n\n        private JPanel GameBack;\n\n        private final AuroraCoreUI coreUI;\n\n        public GameLibraryKeyListener() {\n            this.coreUI = libraryUI.getCoreUI();\n            GameBack = libraryUI.getGameBack();\n        }\n\n        @Override\n        public void keyPressed(KeyEvent e) {\n\n            int currentIndex;\n            gridManager = libraryUI.getGridSplit();\n\n            /* get the index of the grid that is currently displayed */\n            int visibleGridIndex = gridManager.getVisibleGridIndex();\n            System.out.println(\"Initial visible grid = \" + visibleGridIndex);\n            currentIndex = gridManager.getArray()\n                    .indexOf(GameBack.getComponent(1));\n            libraryUI.setCurrentIndex(currentIndex);\n            System.out.println(\"Current Grid = \" + currentIndex);\n\n            /* get the grid that is currently displayed */\n            AGridPanel grid = gridManager.getGrid(currentIndex);\n\n            /* get an array of all the components in the grid */\n            ArrayList comp = grid.getArray();\n\n            boolean cursorMoved = false;\n\n            Game game = null;\n\n            boolean selectedGameFound = false;\n\n            if (e.getKeyCode() == KeyEvent.VK_W || e.getKeyCode()\n                                                   == KeyEvent.VK_UP) {\n\n                int i = 0;\n\n                while (comp.size() > i && !selectedGameFound\n                       && !(comp.get(i) instanceof GamePlaceholder)) {\n                    //Check for GamePlaceholder CANT MOVE THERE!\n                    game = (Game) comp.get(i);\n\n                    if (game.isSelected()) {\n                        selectedGameFound = true;\n                        System.out.println(game.getName()\n                                           + \" is selected in the library\");\n                        int[] columnAndRow = grid.getColumnAndRow(i + 1);\n                        int col = columnAndRow[0];\n                        int row = columnAndRow[1];\n\n                        System.out.println(\"Col = \" + columnAndRow[0]);\n                        System.out.println(\"Row = \" + columnAndRow[1]);\n\n                        if (row > 1) {\n                            System.out.println(\"Cursor is moving up!\");\n                            //Check for GamePlaceholder CANT MOVE THERE!\n                            if (!(comp.get(i - 4) instanceof GamePlaceholder)) {\n                                game.hideInteractiveComponents();\n                                Game newGame = (Game) comp.get(i - 4);\n                                gridManager.unselectPrevious();\n                                newGame.displayInteractiveComponents();\n                            }\n\n                        } else if (row == 1) {\n                            //Check for GamePlaceholder CANT MOVE THERE!\n                            if (!(comp.get(i + (4 * 1)) instanceof GamePlaceholder)) {\n                                game.hideInteractiveComponents();\n                                Game newGame = (Game) comp.get(i + (4 * 1));\n                                gridManager.unselectPrevious();\n                                newGame.displayInteractiveComponents();\n                            }\n                        } else {\n                            System.out.println(\n                                    \"Cursor cannot move any further up!\");\n                        }\n                    } else {\n                        i++;\n                    }\n\n                }\n\n                if (!selectedGameFound && (comp.get(0) instanceof Game)) {\n                    game = (Game) comp.get(0);\n                    game.displayInteractiveComponents();\n                }\n\n                //>>> MOVE DOWN\n            } else if (e.getKeyCode() == KeyEvent.VK_S || e.getKeyCode()\n                                                          == KeyEvent.VK_DOWN) {\n\n                int i = 0;\n\n                while (i < comp.size() && !selectedGameFound\n                       && !(comp.get(i) instanceof GamePlaceholder)) {\n                    //Check for GamePlaceholder CANT MOVE THERE!\n                    game = (Game) comp.get(i);\n\n                    if (game.isSelected()) {\n                        selectedGameFound = true;\n                        System.out.println(game.getName()\n                                           + \" is selected in the library\");\n                        int[] columnAndRow = grid.getColumnAndRow(i + 1);\n                        int col = columnAndRow[0];\n                        int row = columnAndRow[1];\n\n                        System.out.println(\"Col = \" + columnAndRow[0]);\n                        System.out.println(\"Row = \" + columnAndRow[1]);\n\n                        if (row < grid.getRow()) {\n                            System.out.println(\"Cursor is moving down!\");\n\n                            //Check for GamePlaceholder CANT MOVE THERE!\n                            if (!(comp.get(i + 4) instanceof GamePlaceholder)) {\n                                game.hideInteractiveComponents();\n                                Game newGame = (Game) comp.get(i + 4);\n                                gridManager.unselectPrevious();\n                                newGame.displayInteractiveComponents();\n                            }\n\n                        } else if (row == grid.getRow()) {\n\n                            //Check for GamePlaceholder CANT MOVE THERE!\n                            if (!(comp.get(i - (4 * 1)) instanceof GamePlaceholder)) {\n                                game.hideInteractiveComponents();\n                                Game newGame = (Game) comp.get(i - (4 * 1));\n                                gridManager.unselectPrevious();\n                                newGame.displayInteractiveComponents();\n                            }\n                        } else {\n                            System.out.println(\n                                    \"Cursor cannot move any further down!\");\n                        }\n                    } else {\n                        i++;\n                    }\n\n                }\n\n                if (!selectedGameFound && (comp.get(0) instanceof Game)) {\n                    game = (Game) comp.get(0);\n                    game.displayInteractiveComponents();\n                }\n\n\n                //>>> MOVE LEFT\n            } else if (e.getKeyCode() == KeyEvent.VK_A || e.getKeyCode()\n                                                          == KeyEvent.VK_LEFT) {\n\n                System.out.println(\"A key pressed\");\n\n                int i = 0;\n\n                while (i < comp.size() && !selectedGameFound\n                       && !(comp.get(i) instanceof GamePlaceholder)) {\n                    game = (Game) comp.get(i);\n                    if (game.isSelected()) {\n                        selectedGameFound = true;\n                        System.out.println(\"index = \" + i);\n                        System.out.println(game.getName()\n                                           + \" is selected in the library\");\n                    } else {\n                        i++;\n                    }\n\n                }\n\n                if (!cursorMoved && selectedGameFound) {\n                    int[] columnAndRow = grid.getColumnAndRow(i + 1);\n                    int col = columnAndRow[0];\n                    int row = columnAndRow[1];\n\n                    System.out.println(\"Col = \" + col);\n                    System.out.println(\"Row = \" + row);\n\n                    // check to see if the selected game is not the first game in the grid\n                    if (col > 1 || (col == 1 && row > 1)) {\n                        System.out.println(\"Cursor is moving left!\");\n                        visibleGridIndex = gridManager.getVisibleGridIndex();\n                        System.out.println(\"visible grid after moving right = \"\n                                           + visibleGridIndex);\n                        game.hideInteractiveComponents();\n                        Game newGame = (Game) comp.get(i - 1);\n                        gridManager.unselectPrevious();\n                        newGame.displayInteractiveComponents();\n                        cursorMoved = true;\n                    } else if (col == 1 && row == 1) {\n\n                        if (gridManager.getArray().indexOf(GameBack\n                                .getComponent(1)) > 0) {\n                            libraryUI.moveGridLeft();\n                            /* get the index of the grid that is currently displayed */\n                            visibleGridIndex = gridManager.getVisibleGridIndex();\n                            System.out\n                                             .println(\"visible grid after moving right = \"\n                                                      + visibleGridIndex);\n                            currentIndex = gridManager.getArray()\n                                    .indexOf(GameBack\n                                    .getComponent(1));\n                            /* get the grid that is currently displayed */\n                            grid = gridManager.getGrid(currentIndex);\n\n                            /* get an array of all the components in the grid */\n                            comp = grid.getArray();\n\n                            //Check if GamePlaceholder is to the right.\n                            if (!(comp.get(comp.size() - 1) instanceof GamePlaceholder)) {\n                                game.hideInteractiveComponents();\n                                Game newGame = (Game) comp.get(comp.size() - 1);\n                                gridManager.unselectPrevious();\n                                newGame.displayInteractiveComponents();\n                            }\n                        } else {\n                            System.out.println(\n                                    \"Cursor cannot move any further left!\");\n                        }\n\n\n                    }\n                } else if (!selectedGameFound && (comp.get(0) instanceof Game)) {\n                    game = (Game) comp.get(0);\n                    game.displayInteractiveComponents();\n                }\n\n                // >>> MOVE RIGHT\n            } else if (e.getKeyCode() == KeyEvent.VK_D || e.getKeyCode()\n                                                          == KeyEvent.VK_RIGHT) {\n\n                System.out.println(\"D key pressed\");\n\n                int i = 0;\n                //      boolean selectedGameFound = false;\n\n                while (i < comp.size() && !selectedGameFound\n                       && !(comp.get(i) instanceof GamePlaceholder)) {\n                    game = (Game) comp.get(i);\n                    if (game.isSelected()) {\n                        selectedGameFound = true;\n                        System.out.println(\"index = \" + i);\n                        System.out.println(game.getName()\n                                           + \" is selected in the library\");\n                    } else {\n                        i++;\n                    }\n\n                }\n\n                if (!cursorMoved && selectedGameFound) {\n                    int[] columnAndRow = grid.getColumnAndRow(i + 1);\n                    int col = columnAndRow[0];\n                    int row = columnAndRow[1];\n                    System.out.println(\"Col = \" + col);\n                    System.out.println(\"Row = \" + row);\n\n                    // check to see if the selected is not the last game in the grid\n                    if ((col < grid.getCol()\n                         || (col == grid.getCol() && row < grid.getRow()))\n                        && comp.size() > i + 1) {\n                        System.out.println(\"Cursor is moving right!\");\n                        System.out.println(game.getName()\n                                           + \" is Last Game in This Grid!\");\n\n                        Game newGame;\n\n                        // get the next object\n                        Object obj = comp.get(i + 1);\n                        if (obj instanceof Game) {\n                            System.out.println(\"Object is a game\");\n                            //game.hideInteractiveComponents();\n                            newGame = (Game) obj;\n                            gridManager.unselectPrevious();\n                            newGame.displayInteractiveComponents();\n                            cursorMoved = true;\n                        } else {\n                            System.out.println(\"Object is an add game icon\");\n                        }\n\n\n\n                        // else check to see if the selected game is the last game in the grid\n                    } else if (col == grid.getCol() && row == grid.getRow()) {\n                        System.out\n                                .println(\n                                \"Cursor cannot move any further right! Grid needs to move right\");\n\n                        // check to see if the the current grid is the last grid\n                        if (gridManager.getVisibleGridIndex() < (gridManager\n                                .getNumberOfGrids())\n                            && !(comp.get(0) instanceof GamePlaceholder)) {\n                            System.out.println(\"This is not the last grid\");\n\n                            libraryUI.moveGridRight();\n\n                            /* get the index of the grid that is currently displayed */\n                            visibleGridIndex = gridManager.getVisibleGridIndex();\n                            System.out\n                                             .println(\"visible grid after moving right = \"\n                                                      + visibleGridIndex);\n\n                            currentIndex = gridManager.getArray()\n                                    .indexOf(GameBack\n                                    .getComponent(1));\n\n                            /* get the grid that is currently displayed */\n                            grid = gridManager.getGrid(currentIndex);\n\n                            /* get an array of all the components in the grid */\n                            comp = grid.getArray();\n\n                            Game newGame = (Game) comp.get(0);\n\n                            newGame.requestFocus();\n                            newGame.removePreviousSelected();\n                            newGame.revalidate();\n                            newGame.displayInteractiveComponents();\n\n                        } else {\n                            System.out\n                                    .println(\n                                    \"Cannot move to the grid to the right. No more grids!\");\n                        }\n\n                    }\n                } else if (!selectedGameFound && (comp.get(0) instanceof Game)) {\n                    game = (Game) comp.get(0);\n                    game.displayInteractiveComponents();\n                }\n            } else if (e.getKeyCode() == KeyEvent.VK_ENTER) {\n\n                System.out.println(\"D key pressed\");\n\n                int i = 0;\n\n                while (i < comp.size() && !selectedGameFound\n                       && !(comp.get(i) instanceof GamePlaceholder)) {\n                    game = (Game) comp.get(i);\n                    if (game.isSelected()) {\n                        selectedGameFound = true;\n                        System.out.println(\"index = \" + i);\n                        System.out.println(game.getName()\n                                           + \" is selected in the library\");\n                    } else {\n                        i++;\n                    }\n\n                }\n\n                if (!cursorMoved && selectedGameFound) {\n                    game.getPlayHandler().actionPerformed(null);\n                }\n\n            } else if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {\n                coreUI.showExitDialog();\n            }\n\n        }\n\n        @Override\n        public void keyReleased(KeyEvent e) {\n        }\n    }\n\n    public class GridMouseWheelListener implements MouseWheelListener {\n\n        private GridManager gridManager;\n\n        public GridMouseWheelListener() {\n        }\n\n        @Override\n        public void mouseWheelMoved(MouseWheelEvent e) {\n\n            int currentIndex;\n            gridManager = libraryUI.getGridSplit();\n\n            int numberClicks = e.getWheelRotation();\n            System.out.println(\"Mouse wheel moved \" + numberClicks);\n\n            ///Get The Index of The Current Panel Being Displayed///\n            ///Refer too GridManager array of All panels to find it///\n            //GameBack is the Panel Containing all the game grids///\n\n            currentIndex = gridManager.getArray().indexOf(libraryUI\n                    .getGameBack()\n                    .getComponent(1));\n            libraryUI.setCurrentIndex(currentIndex);\n\n            if (numberClicks < 0) {\n                if (currentIndex > 0) {\n                    libraryUI.moveGridLeft();\n\n                }\n            } else if (numberClicks > 0) {\n                if (currentIndex < (gridManager.getNumberOfGrids() - 1)) {\n                    libraryUI.moveGridRight();\n\n                }\n            }\n\n        }\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":56921}]],"length":56921}
