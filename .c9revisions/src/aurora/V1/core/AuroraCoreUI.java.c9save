{"ts":1351104856908,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright 2012 Sardonix Creative.\n *\n * This work is licensed under the \n * Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.\n * To view a copy of this license, visit \n *\n *      http://creativecommons.org/licenses/by-nc-nd/3.0/\n *\n * or send a letter to Creative Commons, 444 Castro Street, Suite 900, \n * Mountain View, California, 94041, USA.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage aurora.V1.core;\n\nimport aurora.engine.V1.Logic.aSurface;\nimport aurora.engine.V1.Logic.aXAVI;\nimport aurora.engine.V1.UI.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.sound.sampled.LineUnavailableException;\nimport javax.sound.sampled.UnsupportedAudioFileException;\nimport javax.swing.*;\n\n/**\n *\n * @author Sammy\n * @version 0.3\n */\npublic class AuroraCoreUI {\n\n    private final String Revision = \"255\";\n    private final String Version =\n            \"  //BUILD: \" + getRbTok(\"BUILD\")\n            + \"  //REVISION: \" + Revision\n            + \"  //AURORA.ENGINE.VERSION = 0.1.\" + (Integer.parseInt(Revision) - 1)\n            + \"  //  -- ALPHA BUILT ON: 9/25/2012 --   //\";\n    private JFrame frame;\n    private aImagePane pnlBackground;\n    private aImagePane pnlTop;\n    private aImagePane pnlBottom;\n    private JPanel pnlCenter;\n    private JPanel pnlSouthFromTop;\n    private JPanel pnlScreenLable;\n    private JPanel pnlVersion;\n    private aImagePane pnlFrameControl;\n    private aImage imgLogo;\n    private JLabel lblVersion;\n    private JLabel lblInfo;\n    public static aTimeLabel lblTime;\n    private JButton btnExit;\n    private JButton btnMin;\n    final static ResourceBundle rb = ResourceBundle.getBundle(\"version\");\n    private JPanel pnlHeaderOfCenterFromBottom;\n    private JPanel pnlCenterFromBottom;\n    private aDialog dilgWarning;\n    private aDialog err;\n//    public aSound sfxTheme;\n//    public aSound sfxClunk;\n//    private aSound sfxExit;\n//    private aSound sfxMinimize;\n//    private aSound sfxWarning;\n    private JPanel pnlUserSpace;\n    private aXAVI vi;\n    private Font FontRegular;\n    private JPanel pnlKeyToPress;\n    private JLabel lblKeyAction;\n    private aImage imgKeyIco;\n    private JPanel pnlLogo;\n    private AuroraMini miniMode;\n    private boolean LargeScreen;\n    private int SIZE_pnlTop;\n    private int SIZE_pnlCenter;\n    private int SIZE_pnlBottom;\n    private int SIZE_controlHeight;\n    private int SIZE_controlWidth;\n    private int SIZE_welcomeFont;\n    private int SIZE_keysFont;\n    private int SIZE_KeyIconWidth;\n    private int SIZE_KeyIconHeight;\n    private int SIZE_VersionFont;\n    private int SIZE_TimeFont;\n    private int SIZE_logoHeight;\n    private int SIZE_logoWidth;\n    private int SIZE_btnExitWidth;\n    private int SIZE_btnExitHeight;\n    private int SIZE_btnMinWidth;\n    private int SIZE_btnMinHeight;\n    private Font FontBold;\n    private aSurface resource;\n    private int SIZE_ScreenWidth;\n    private int SIZE_ScreenHeight;\n    private MinimizeListener MinimizeHandler;\n    private JPanel pnlTime;\n    private JPanel pnlInfo;\n    private JPanel pnlFrameControlContainer;\n\n    public AuroraCoreUI(JFrame frame) {\n        this.frame = frame;\n        frame.setUndecorated(true);\n        frame.setBackground(Color.BLACK);\n        frame.setResizable(false);\n        frame.setSize(Toolkit.getDefaultToolkit().getScreenSize());\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        resource = new aSurface(\"\");\n\n    }\n\n    public void setUI() throws UnsupportedAudioFileException, IOException, LineUnavailableException, InterruptedException, FontFormatException {\n\n\n        //////////////////////////////////////\n        //Determine Global Size based on Screen Size\n        //////////////////////////////////////\n\n        //TODO work on Screen Gui Change\n\n        SIZE_ScreenWidth = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()[0].getDisplayMode().getWidth();\n        SIZE_ScreenHeight = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()[0].getDisplayMode().getHeight();\n\n        System.out.println(\"Current Screen Ressolution: \"\n                + SIZE_ScreenWidth + \"x\" + SIZE_ScreenHeight);\n\n        if (SIZE_ScreenWidth >= 1680 && SIZE_ScreenHeight >= 1050) {\n            LargeScreen = true;\n        } else {\n            LargeScreen = false;\n        }\n\n        // LargeScreen = false;\n        System.out.println(\"High Resolution Boolean = \" + LargeScreen);\n\n        ////Set Size For UI\n\n        setSizes();\n\n        /////////////////\n        //Start Preparation///////////////////////////////////////\n        ////////////////\n\n\n        //Get Font\n\n        try {\n            FontRegular = Font.createFont(Font.TRUETYPE_FONT, new URL(resource.getSurfacePath() + \"/aurora/V1/resources/AGENCYR.TTF\").openStream());\n            FontBold = Font.createFont(Font.TRUETYPE_FONT, new URL(resource.getSurfacePath() + \"/aurora/V1/resources/AGENCYB.TTF\").openStream());\n        } catch (MalformedURLException ex) {\n            try {\n                FontRegular = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream(\"/aurora/V1/resources/AGENCYR.TTF\"));\n                FontBold = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream(\"/aurora/V1/resources/AGENCYB.TTF\"));\n\n            } catch (Exception exx) {\n                System.out.println(\"ERROR In Getting Font Resourcess\");\n            }\n        }\n        ///////////////////////\n        // The Background Panel Contains The Background Image for the Window as\n        // Well as all components found in the window\n        ///////////////////////\n\n\n        pnlBackground = new aImagePane(\"Aurora_Background.png\", frame.getSize().width, frame.getSize().height, true);\n\n        pnlBackground.setPreferredSize(frame.getSize());\n        pnlBackground.setLayout(new BoxLayout(pnlBackground, BoxLayout.Y_AXIS));\n\n        ///////////////////////\n        // The Top Panel Contains Header Image as well as the Frame Buttons:\n        //  Exit and Minimize\n        ///////////////////////\n\n        pnlTop = new aImagePane(\"Aurora_Header1.png\", frame.getSize().width, (frame.getSize().height / 6), true);\n        pnlTop.setPreferredSize(new Dimension(frame.getSize().width, (frame.getSize().height / 6)));\n\n        pnlTop.setIgnoreRepaint(true);\n        pnlTop.setLayout(new BorderLayout());\n\n\n        ///////////////////////\n        // The Center Panel\n        // and maintains a space between top and bottom panel\n        ///////////////////////\n\n        pnlCenter = new JPanel(true);\n        pnlCenter.setPreferredSize(new Dimension(frame.getSize().width, frame.getSize().height - (frame.getSize().height / 6 + frame.getSize().height / 6)));\n        pnlCenter.setOpaque(false);\n        pnlCenter.setLayout(new BorderLayout());\n        pnlCenter.setIgnoreRepaint(true);\n\n        ///////////////////////\n        // The Bottom Panel Contains the Footer Image as well as\n        // the Time and the Login Controls\n        ///////////////////////\n        pnlBottom = new aImagePane(\"Aurora_Footer1.png\", frame.getSize().width, frame.getSize().height / 6, true);\n        pnlBottom.setPreferredSize(new Dimension(frame.getSize().width, frame.getSize().height / 6));\n        pnlBottom.setOpaque(false);\n        pnlBottom.setLayout(new BorderLayout());\n\n\n\n\n        //////////////////////////////////////////////////////////////////////////\n        //Configure Panels:                                            //////////////////////////////////////////\n        // Add specific UI components to each Panel///////////////////////////////////////\n        //////////////////////////////////////////////////////////////////////////////////\n\n\n        //Create V.I\n        vi = new aXAVI();\n\n\n        /////////////////\n        //Setup Buttons///////////////////////////////////////\n        ////////////////\n\n        btnExit = new aButton(\"Aurora_Close_normal.png\", \"Aurora_Close_down.png\", \"Aurora_Close_over.png\", SIZE_btnExitWidth, SIZE_btnExitHeight);\n        btnExit.addActionListener(new CloseListener());\n        btnExit.setToolTipText(\"Exit\");\n        btnMin = new aButton(\"Aurora_Desktop_normal.png\", \"Aurora_Desktop_down.png\", \"Aurora_Desktop_over.png\", SIZE_btnMinWidth, SIZE_btnMinHeight);\n        MinimizeHandler = new MinimizeListener(this, AuroraMini.MINIMIZE_MODE);\n        btnMin.addActionListener(MinimizeHandler);\n        btnMin.setToolTipText(\"Minimize\");\n\n\n\n\n        /////////\n        // Top Panel\n        /////////\n\n\n        //// Frame Buttons\n\n        pnlFrameControl = new aImagePane(\"Aurora_FrameButton1.png\", SIZE_controlWidth, SIZE_controlHeight);\n        pnlFrameControl.setImageHeight(SIZE_controlHeight);\n        pnlFrameControl.setOpaque(false);\n        pnlFrameControl.add(btnMin);\n        pnlFrameControl.add(btnExit);\n        \n        pnlFrameControlContainer = new JPanel(new BorderLayout());\n        pnlFrameControlContainer.setOpaque(false);\n        pnlFrameControlContainer.add(pnlFrameControl, BorderLayout.NORTH);\n\n        pnlSouthFromTop = new JPanel();\n        pnlSouthFromTop.setLayout(new BorderLayout());\n        pnlSouthFromTop.setOpaque(false);\n        pnlSouthFromTop.add(BorderLayout.LINE_END, pnlFrameControlContainer);\n        pnlSouthFromTop.setPreferredSize(new Dimension(frame.getWidth(), SIZE_controlHeight + 5));\n\n        pnlTop.add(BorderLayout.SOUTH, pnlSouthFromTop);\n\n\n        //// Logo Image\n\n        imgLogo = new aImage(\"Logo_Aurora.png\", SIZE_logoWidth, SIZE_logoHeight);\n        pnlLogo = new JPanel();\n        pnlLogo.setOpaque(false);\n        pnlLogo.add(imgLogo);\n        pnlLogo.setPreferredSize(imgLogo.getSize());\n\n        pnlTop.add(BorderLayout.CENTER, pnlLogo);\n\n        ////////////////\n        // Bottom Panel/////////////////////////////\n        ////////////////\n\n        pnlCenterFromBottom = new JPanel(new BorderLayout());\n        pnlCenterFromBottom.setOpaque(false);\n        pnlBottom.add(BorderLayout.CENTER, pnlCenterFromBottom);\n\n        /// Welcome Label\n        lblInfo = new JLabel(vi.VI(aXAVI.inx_Welcome));\n        lblInfo.setOpaque(false);\n        lblInfo.setForeground(Color.LIGHT_GRAY);\n        lblInfo.setFont(FontRegular.deriveFont(Font.PLAIN, SIZE_welcomeFont));\n\n        pnlInfo = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        pnlInfo.setOpaque(false);\n        pnlInfo.add(lblInfo);\n\n        pnlScreenLable = new JPanel(new BorderLayout());\n        pnlScreenLable.setOpaque(false);\n        pnlScreenLable.add(BorderLayout.NORTH, pnlInfo);\n        pnlBottom.add(BorderLayout.PAGE_START, pnlScreenLable);\n\n\n\n\n        /// Time Label\n\n        pnlHeaderOfCenterFromBottom = new JPanel(new BorderLayout());\n        lblTime = new aTimeLabel();\n        lblTime.setFont(FontBold.deriveFont(Font.PLAIN, SIZE_TimeFont));\n        lblTime.setForeground(new Color(80, 126, 222));\n        pnlTime = new JPanel(new BorderLayout());\n        pnlTime.setOpaque(false);\n        pnlTime.add(lblTime, BorderLayout.NORTH);\n        pnlHeaderOfCenterFromBottom.add(BorderLayout.EAST, pnlTime);\n        pnlHeaderOfCenterFromBottom.setOpaque(false);\n\n\n\n        ///Key Press Panel\n        pnlKeyToPress = new JPanel();\n        pnlKeyToPress.setOpaque(false);\n\n\n        imgKeyIco = new aImage(\"KeyboardKeys/enter.png\");\n        imgKeyIco.setImageSize(SIZE_KeyIconWidth, SIZE_KeyIconHeight);\n        lblKeyAction = new JLabel(\" Select \");\n\n        lblKeyAction.setFont(FontRegular.deriveFont(Font.PLAIN, SIZE_keysFont));\n        lblKeyAction.setForeground(Color.YELLOW);\n\n\n\n\n        pnlHeaderOfCenterFromBottom.add(BorderLayout.WEST, pnlKeyToPress);\n        pnlCenterFromBottom.add(BorderLayout.NORTH, pnlHeaderOfCenterFromBottom);\n\n        ///User Space\n        pnlUserSpace = new JPanel();\n        pnlUserSpace.setOpaque(false);\n        pnlUserSpace.setLayout(new BoxLayout(pnlUserSpace, BoxLayout.Y_AXIS));\n\n        pnlCenterFromBottom.add(BorderLayout.CENTER, pnlUserSpace);\n\n\n        /// Version Label\n\n        lblVersion = new JLabel(Version);\n        lblVersion.setOpaque(false);\n        lblVersion.setForeground(Color.LIGHT_GRAY);\n        lblVersion.setFont(FontRegular.deriveFont(Font.PLAIN, SIZE_VersionFont));\n\n\n        pnlVersion = new JPanel();\n        pnlVersion.setOpaque(false);\n        pnlVersion.setLayout(new BorderLayout());\n        pnlVersion.add(BorderLayout.WEST, lblVersion);\n        pnlBottom.add(BorderLayout.PAGE_END, pnlVersion);\n\n\n\n\n        ///Finalize\n\n        //////////////////////////////////\n        // Add All 3 Main Panels To     //\n        // Background Panel             //\n        //////////////////////////////////\n\n        pnlBackground.add(pnlTop);\n\n        pnlBackground.add(pnlCenter);\n\n        pnlBackground.add(pnlBottom);\n\n\n        frame.addKeyListener(new FrameKeyListener());\n        frame.requestFocus();\n\n    }\n\n    public aDialog getDilgWarning() {\n        return dilgWarning;\n    }\n\n    public void setDilgWarning(aDialog dilgWarning) {\n        this.dilgWarning = dilgWarning;\n    }\n\n    public aDialog getErr() {\n        return err;\n    }\n\n    public void setErr(aDialog err) {\n        this.err = err;\n    }\n\n    public JPanel getPnlLogo() {\n        return pnlLogo;\n    }\n\n    public void setPnlLogo(JPanel pnlLogo) {\n        this.pnlLogo = pnlLogo;\n    }\n\n    public JPanel getPnlTime() {\n        return pnlTime;\n    }\n\n    public void setPnlTime(JPanel pnlTime) {\n        this.pnlTime = pnlTime;\n    }\n\n    public JPanel getPnlFrameControlContainer() {\n        return pnlFrameControlContainer;\n    }\n\n    public void setPnlFrameControlContainer(JPanel pnlFrameControlContainer) {\n        this.pnlFrameControlContainer = pnlFrameControlContainer;\n    }\n\n    public void auroraMinimize(String arg) {\n        if (miniMode == null) {\n            miniMode = new AuroraMini(this, arg); //retain state\n        }\n        miniMode.createUI();\n\n        frame.setLocation(0, 3000);\n    }\n\n    public MinimizeListener getMinimizeHandler() {\n        return MinimizeHandler;\n    }\n\n    public AuroraMini getMiniMode() {\n        if (miniMode == null) {\n            miniMode = new AuroraMini(this, \"null\"); //retain state\n        }\n        return miniMode;\n    }\n\n    public int getSIZE_ScreenHeight() {\n        return SIZE_ScreenHeight;\n    }\n\n    public int getSIZE_ScreenWidth() {\n        return SIZE_ScreenWidth;\n    }\n\n    public Font getFontBold() {\n        return FontBold;\n    }\n\n    public Font getFontRegular() {\n        return FontRegular;\n    }\n\n    public Font getDefaultFont() {\n        return FontRegular;\n    }\n\n    private void setSizes() {\n        double Ratio = (frame.getWidth() - frame.getHeight()) / 2;\n        if (LargeScreen) {\n            SIZE_pnlTop = frame.getHeight() / 4;\n            SIZE_pnlCenter = frame.getHeight() / 2 + frame.getHeight() / 40;\n            SIZE_pnlBottom = frame.getHeight() / 4 + frame.getHeight() / 40;\n            SIZE_controlHeight = 55;\n            SIZE_controlWidth = 160;\n            SIZE_keysFont = frame.getHeight() / 40;\n            SIZE_welcomeFont = 22;\n            SIZE_KeyIconWidth = 0;\n            SIZE_KeyIconHeight = 0;\n            SIZE_VersionFont = 15;\n            SIZE_TimeFont = SIZE_pnlBottom / 12;\n            SIZE_logoHeight = SIZE_pnlTop / 3 + (int) (Ratio / 14);\n            SIZE_logoWidth = frame.getWidth() / 2 + (int) (Ratio / 5);\n            SIZE_btnExitWidth = 0;\n            SIZE_btnExitHeight = 0;\n            SIZE_btnMinWidth = 0;\n            SIZE_btnMinHeight = 0;\n        } else {\n            SIZE_pnlTop = frame.getHeight() / 4;\n            SIZE_pnlCenter = frame.getHeight() / 2 + frame.getHeight() / 40;\n            SIZE_pnlBottom = frame.getHeight() / 4 + frame.getHeight() / 40;\n            SIZE_keysFont = frame.getHeight() / 40;\n            SIZE_welcomeFont = 21;\n            SIZE_KeyIconWidth = SIZE_pnlBottom / 4;\n            SIZE_KeyIconHeight = SIZE_pnlBottom / 8;\n            SIZE_VersionFont = 12;\n            SIZE_TimeFont = SIZE_pnlBottom / 12;\n            SIZE_logoHeight = SIZE_pnlTop / 3 + (int) (Ratio / 20);\n            SIZE_logoWidth = frame.getWidth() / 2;\n            SIZE_controlHeight = 45;\n            SIZE_controlWidth = 150;\n            SIZE_btnExitWidth = 35;\n            SIZE_btnExitHeight = 30;\n            SIZE_btnMinWidth = 35;\n            SIZE_btnMinHeight = 30;\n        }\n    }\n\n////////////\n//Setters //\n////////////\n    public int getSIZE_KeyIconHeight() {\n        return SIZE_KeyIconHeight;\n    }\n\n    public void setSIZE_KeyIconHeight(int SIZE_KeyIconHeight) {\n        this.SIZE_KeyIconHeight = SIZE_KeyIconHeight;\n    }\n\n    public boolean getLargeScreen() {\n        return LargeScreen;\n    }\n\n    public int getSIZE_KeyIconWidth() {\n        return SIZE_KeyIconWidth;\n    }\n\n    public void setSIZE_KeyIconWidth(int SIZE_KeyIconWidth) {\n        this.SIZE_KeyIconWidth = SIZE_KeyIconWidth;\n    }\n\n    public int getSIZE_TimeFont() {\n        return SIZE_TimeFont;\n    }\n\n    public void setSIZE_TimeFont(int SIZE_TimeFont) {\n        this.SIZE_TimeFont = SIZE_TimeFont;\n    }\n\n    public int getSIZE_VersionFont() {\n        return SIZE_VersionFont;\n    }\n\n    public void setSIZE_VersionFont(int SIZE_VersionFont) {\n        this.SIZE_VersionFont = SIZE_VersionFont;\n    }\n\n    public int getSIZE_btnExitHeight() {\n        return SIZE_btnExitHeight;\n    }\n\n    public void setSIZE_btnExitHeight(int SIZE_btnExitHeight) {\n        this.SIZE_btnExitHeight = SIZE_btnExitHeight;\n    }\n\n    public int getSIZE_btnExitWidth() {\n        return SIZE_btnExitWidth;\n    }\n\n    public void setSIZE_btnExitWidth(int SIZE_btnExitWidth) {\n        this.SIZE_btnExitWidth = SIZE_btnExitWidth;\n    }\n\n    public int getSIZE_btnMinHeight() {\n        return SIZE_btnMinHeight;\n    }\n\n    public void setSIZE_btnMinHeight(int SIZE_btnMinHeight) {\n        this.SIZE_btnMinHeight = SIZE_btnMinHeight;\n    }\n\n    public int getSIZE_btnMinWidth() {\n        return SIZE_btnMinWidth;\n    }\n\n    public void setSIZE_btnMinWidth(int SIZE_btnMinWidth) {\n        this.SIZE_btnMinWidth = SIZE_btnMinWidth;\n    }\n\n    public int getSIZE_controlHeight() {\n        return SIZE_controlHeight;\n    }\n\n    public void setSIZE_controlHeight(int SIZE_controlHeight) {\n        this.SIZE_controlHeight = SIZE_controlHeight;\n    }\n\n    public int getSIZE_controlWidth() {\n        return SIZE_controlWidth;\n    }\n\n    public void setSIZE_controlWidth(int SIZE_controlWidth) {\n        this.SIZE_controlWidth = SIZE_controlWidth;\n    }\n\n    public int getSIZE_keysFont() {\n        return SIZE_keysFont;\n    }\n\n    public void setSIZE_keysFont(int SIZE_keysFont) {\n        this.SIZE_keysFont = SIZE_keysFont;\n    }\n\n    public int getSIZE_logoHeight() {\n        return SIZE_logoHeight;\n    }\n\n    public void setSIZE_logoHeight(int SIZE_logoHeight) {\n        this.SIZE_logoHeight = SIZE_logoHeight;\n    }\n\n    public int getSIZE_logoWidth() {\n        return SIZE_logoWidth;\n    }\n\n    public void setSIZE_logoWidth(int SIZE_logoWidth) {\n        this.SIZE_logoWidth = SIZE_logoWidth;\n    }\n\n    public int getSIZE_pnlBottom() {\n        return SIZE_pnlBottom;\n    }\n\n    public void setSIZE_pnlBottom(int SIZE_pnlBottom) {\n        this.SIZE_pnlBottom = SIZE_pnlBottom;\n    }\n\n    public int getSIZE_pnlCenter() {\n        return SIZE_pnlCenter;\n    }\n\n    public void setSIZE_pnlCenter(int SIZE_pnlCenter) {\n        this.SIZE_pnlCenter = SIZE_pnlCenter;\n    }\n\n    public int getSIZE_pnlTop() {\n        return SIZE_pnlTop;\n    }\n\n    public void setSIZE_pnlTop(int SIZE_pnlTop) {\n        this.SIZE_pnlTop = SIZE_pnlTop;\n    }\n\n    public int getSIZE_welcomeFont() {\n        return SIZE_welcomeFont;\n    }\n\n    public void setSIZE_welcomeFont(int SIZE_welcomeFont) {\n        this.SIZE_welcomeFont = SIZE_welcomeFont;\n    }\n\n    public void setPnlBackground(aImagePane pnlBackground) {\n        this.pnlBackground = pnlBackground;\n    }\n\n    public void setPnlBottom(aImagePane pnlBottom) {\n        this.pnlBottom = pnlBottom;\n    }\n\n    public void setPnlCenter(JPanel pnlCenter) {\n        this.pnlCenter = pnlCenter;\n    }\n\n    public void setPnlCenterFromBottom(JPanel pnlCenterFromBottom) {\n        this.pnlCenterFromBottom = pnlCenterFromBottom;\n    }\n\n    public void setPnlSouthFromTop(JPanel pnlSouthFromTop) {\n        this.pnlSouthFromTop = pnlSouthFromTop;\n    }\n\n    public void setPnlFrameControl(aImagePane pnlFrameControl) {\n        this.pnlFrameControl = pnlFrameControl;\n    }\n\n    public void setPnlTop(aImagePane pnlTop) {\n        this.pnlTop = pnlTop;\n    }\n\n    public void setImgLogo(aImage imgLogo) {\n        this.imgLogo = imgLogo;\n    }\n\n    public void setLblInfo(JLabel lblInfo) {\n        this.lblInfo = lblInfo;\n    }\n\n    public void setVi(aXAVI vi) {\n        this.vi = vi;\n    }\n\n    public void setPnlUserbar(JPanel pnlUserbar) {\n        this.pnlUserSpace = pnlUserbar;\n    }\n\n    public String getRevision() {\n        return Revision;\n    }\n\n    public void setFrame(JFrame frame) {\n        this.frame = frame;\n    }\n\n    public void setImgKeyIco(aImage imgKeyIco) {\n        this.imgKeyIco = imgKeyIco;\n    }\n\n    public void setLblKeyAction(JLabel lblKeyAction) {\n        this.lblKeyAction = lblKeyAction;\n    }\n\n    public static void setLblTime(aTimeLabel lblTime) {\n        AuroraCoreUI.lblTime = lblTime;\n    }\n\n    public void setLblVersion(JLabel lblVersion) {\n        this.lblVersion = lblVersion;\n    }\n\n    public void setHeaderOfCenterFromBottom(JPanel pnlHeaderOfCenterFromBottom) {\n        this.pnlHeaderOfCenterFromBottom = pnlHeaderOfCenterFromBottom;\n    }\n\n    public void setPnlKeyToPress(JPanel pnlKeyToPress) {\n        this.pnlKeyToPress = pnlKeyToPress;\n    }\n\n    public void setPnlScreenLable(JPanel pnlScreenLable) {\n        this.pnlScreenLable = pnlScreenLable;\n    }\n\n    public void setPnlVersion(JPanel pnlVersion) {\n        this.pnlVersion = pnlVersion;\n    }\n\n    ///\n    //Getters\n    ///\n    public aImage getImgKeyIco() {\n        return imgKeyIco;\n    }\n\n    public JLabel getLblKeyAction() {\n        return lblKeyAction;\n    }\n\n    public JLabel getLblVersion() {\n        return lblVersion;\n    }\n\n    public JPanel getPnlHeaderOfCenterFromBottom() {\n        return pnlHeaderOfCenterFromBottom;\n    }\n\n    public JPanel getPnlKeyToPress() {\n        return pnlKeyToPress;\n    }\n\n    public String getVersion() {\n        return Version;\n    }\n\n    public JPanel getPnlScreenLable() {\n        return pnlScreenLable;\n    }\n\n    public JPanel getPnlVersion() {\n        return pnlVersion;\n    }\n\n    public boolean isLargeScreen() {\n        return LargeScreen;\n    }\n\n    public JButton getBtnExit() {\n        return btnExit;\n    }\n\n    public JButton getBtnMin() {\n        return btnMin;\n    }\n\n    public JLabel getLblInfo() {\n        return lblInfo;\n    }\n\n    public aXAVI getVi() {\n        return vi;\n    }\n\n    public JFrame getFrame() {\n        return frame;\n    }\n\n    public static aTimeLabel getLblTime() {\n        return lblTime;\n    }\n\n    public JPanel getPnlUserSpace() {\n        return pnlUserSpace;\n    }\n\n    public aImage getImgLogo() {\n        return imgLogo;\n    }\n\n    public aImagePane getPnlBackground() {\n        return pnlBackground;\n    }\n\n    public JPanel getPnlInfo() {\n\n        return pnlInfo;\n    }\n\n    public aImagePane getPnlBottom() {\n        return pnlBottom;\n    }\n\n    public JPanel getPnlCenter() {\n        return pnlCenter;\n    }\n\n    public JPanel getPnlCenterFromBottom() {\n        return pnlCenterFromBottom;\n    }\n\n    public JPanel getPnlSouthFromTop() {\n        return pnlSouthFromTop;\n    }\n\n    public aImagePane getPnlFrameControl() {\n        return pnlFrameControl;\n    }\n\n    public aImagePane getPnlTop() {\n        return pnlTop;\n    }\n\n    public void setSFX() throws UnsupportedAudioFileException, IOException, LineUnavailableException, InterruptedException {\n        //////////\n        /////Background Sound\n        ///////////\n        ///TODO FIX SOUND BUG\n//\n//        try {\n//            sfxTheme = new aSound(aSound.sfxTheme, true);\n//\n//            ///////////\n//            //Play Sound//////////////////////////\n//            ///////////\n//\n//\n//            sfxExit = new aSound(aSound.sfxAlert, false);\n//            sfxMinimize = new aSound(aSound.sfxButton, false);\n//            sfxWarning = new aSound(aSound.sfxButton, false);\n//            sfxClunk = new aSound(aSound.sfxClunk, false);\n//\n//        } catch (MalformedURLException ex) {\n//            err = new aDialog(aDialog.aDIALOG_ERROR, \"A Sound \" + vi.VI(vi.inx_Error) + \" Occured!\");\n//            err.setVisible(true);\n//        }\n    }//end SFX\n\n    public void showExitDilog() {\n        if (dilgWarning == null) {\n            dilgWarning = new aDialog(aDialog.aDIALOG_WARNING, \"Are You Sure you want to \" + vi.VI(vi.inx_Exit) + \"?\", FontBold);\n\n\n            dilgWarning.setButtonListener(new ActionListener() {\n                private aDialog err;\n\n                public void actionPerformed(ActionEvent e) {\n                    ///SOUND\n//                    try {\n//                        sfxWarning.Play();\n//                    } catch (UnsupportedAudioFileException ex) {\n//                        Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//                    } catch (IOException ex) {\n//                        Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//                    } catch (LineUnavailableException ex) {\n//                        Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//                    } catch (InterruptedException ex) {\n//                        Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//                    }\n\n                    System.exit(0);\n                }\n            });\n            dilgWarning.showDialog();\n\n\n        }\n        dilgWarning.setVisible(true);\n        //SOUND\n//        try {\n//            sfxExit.Play();\n//        } catch (UnsupportedAudioFileException ex) {\n//            Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//        } catch (IOException ex) {\n//            Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//        } catch (LineUnavailableException ex) {\n//            Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//        } catch (InterruptedException ex) {\n//            Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//        }\n        try {\n            try {\n                setSFX();\n            } catch (InterruptedException ex) {\n                Logger.getLogger(AuroraCoreUI.class.getName()).log(Level.SEVERE, null, ex);\n            }\n        } catch (UnsupportedAudioFileException ex) {\n            Logger.getLogger(AuroraCoreUI.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (IOException ex) {\n            Logger.getLogger(AuroraCoreUI.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (LineUnavailableException ex) {\n            Logger.getLogger(AuroraCoreUI.class.getName()).log(Level.SEVERE, null, ex);\n        }\n\n    }\n\n    //Get Build Version Of Application\n    private static String getRbTok(String propToken) {\n        String msg = \"\";\n        try {\n            msg = rb.getString(propToken);\n        } catch (MissingResourceException e) {\n            System.err.println(\"Token \".concat(propToken).concat(\" not in Property file!\"));\n        }\n        return msg;\n    }\n\n    public String getOS() {\n        return System.getProperty(\"os.name\");\n    }\n\n    public void setSurface(aSurface resource) {\n        this.resource = resource;\n    }\n\n    public aSurface getResource() {\n        return resource;\n    }\n\n    /*\n     * Sets The Close Button Actions\n     */\n    class CloseListener implements ActionListener {\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n\n            showExitDilog();\n\n        }\n    }\n\n   public class MinimizeListener implements ActionListener {\n\n        private AuroraCoreUI ui;\n        private String arg;\n\n        public MinimizeListener(AuroraCoreUI ui, String arg) {\n            this.ui = ui;\n            this.arg = arg;\n        }\n\n        public void setArg(String arg) {\n            this.arg = arg;\n        }\n\n        public void actionPerformed(ActionEvent e) {\n            //SOUND\n//            try {\n//                sfxMinimize.Play();\n//            } catch (UnsupportedAudioFileException ex) {\n//                Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//            } catch (IOException ex) {\n//                Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//            } catch (LineUnavailableException ex) {\n//                Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//            } catch (InterruptedException ex) {\n//                Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//            }\n\n            //ENABLE MINI MODE// indev\n\n            auroraMinimize(arg);\n\n            //ENABLE BASIC MINIMIZE\n            //ui.getFrame().setState(Frame.ICONIFIED);\n\n\n\n        }\n    }\n\n    class FrameKeyListener implements KeyListener {\n\n        @Override\n        public void keyTyped(KeyEvent e) {\n        }\n\n        @Override\n        public void keyPressed(KeyEvent e) {\n        }\n\n        @Override\n        public void keyReleased(KeyEvent e) {\n\n            if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {\n                showExitDilog();\n            }\n\n        }\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":30014}]],"length":30014}
{"contributors":[],"silentsave":true,"ts":1355499099302,"patch":[[{"diffs":[[0,"nder the"],[-1," "],[0,""],[1,""],[0,"\n * Crea"]],"start1":69,"start2":69,"length1":17,"length2":16},{"diffs":[[0,"e, visit"],[-1," "],[0,""],[1,""],[0,"\n *\n *  "]],"start1":187,"start2":187,"length1":17,"length2":16},{"diffs":[[0,"ite 900,"],[-1," "],[0,""],[1,""],[0,"\n * Moun"]],"start1":322,"start2":322,"length1":17,"length2":16},{"diffs":[[0,"gic."],[-1,"aSurface;\nimport aurora.engine.V1.Logic.aXAVI;\nimport aurora.engine.V1.UI.*;\nimport java.awt.*"],[1,"ANuance;\nimport aurora.engine.V1.Logic.ASurface;\nimport aurora.engine.V1.UI.AButton;\nimport aurora.engine.V1.UI.ACursor;\nimport aurora.engine.V1.UI.ADialog;\nimport aurora.engine.V1.UI.AImage;\nimport aurora.engine.V1.UI.AImagePane;\nimport aurora.engine.V1.UI.ATimeLabel;\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.Font;\nimport java.awt.FontFormatException;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.Point;\nimport java.awt.Toolkit"],[0,";\nim"]],"start1":749,"start2":749,"length1":102,"length2":528},{"diffs":[[0,"nt.KeyListener;\n"],[1,"import java.awt.event.WindowEvent;\nimport java.awt.event.WindowFocusListener;\nimport java.awt.image.BufferedImage;\n"],[0,"import java.io.I"]],"start1":1399,"start2":1399,"length1":32,"length2":147},{"diffs":[[0,"ing.Logger;\n"],[1,"import javax.imageio.ImageIO;\n"],[0,"import javax"]],"start1":1747,"start2":1747,"length1":24,"length2":54},{"diffs":[[0,"ing."],[-1,"*;\n\n/**\n *\n * @author Sammy\n * @version 0.3\n */\npublic class AuroraCoreUI {\n\n    private final String Revision = \"255\";\n    private final String Version =\n            \"  //BUILD: \" + getRbTok(\"BUILD\")\n            + \"  //REVISION: \" + Revision\n            + \"  //AURORA.ENGINE.VERSION = 0.1.\" + (Integer.parseInt(Revision) - 1)\n            + \"  //  -- ALPHA BUILT ON: 9/25/2012 --   //\";\n    private JFrame frame;\n    private aImagePane pnlBackground;\n    private aImagePane pnlTop;\n    private aImagePane pnlBottom;\n    private JPanel pnlCenter;\n    private JPanel pnlSouthFromTop;\n    private JPanel pnlScreenLable;\n    private JPanel pnlVersion;\n    private aImagePane pnlFrameControl;\n    private aImage imgLogo;\n    private JLabel lblVersion;\n    private JLabel lblInfo;\n    public static aTimeLabel lblTime;\n    private JButton btnExit;\n    private JButton btnMin;\n    final static ResourceBundle rb = ResourceBundle.getBundle(\"version\");\n    private JPanel pnlHeaderOfCenterFromBottom;\n    private JPanel pnlCenterFromBottom;\n    private aDialog dilgWarning;\n    private aDialog err;\n//    public aSound sfxTheme;\n//    public aSound sfxClunk;\n//    private aSound sfxExit;\n//    private aSound sfxMinimize;\n//    private aSound sfxWarning;\n    private JPanel pnlUserSpace;\n    private aXAVI vi;\n    private Font FontRegular;\n    private JPanel pnlKeyToPress;\n    private JLabel lblKeyAction;\n    private aImage imgKeyIco;\n    private JPanel pnlLogo;\n    private AuroraMini miniMode;\n    private boolean LargeScreen;\n    private int SIZE_pnlTop;\n    private int SIZE_pnlCenter;\n    private int SIZE_pnlBottom;\n    private int SIZE_controlHeight;\n    private int SIZE_controlWidth;\n    private int SIZE_welcomeFont;\n    private int SIZE_keysFont;\n    private int SIZE_KeyIconWidth;\n    private int SIZE_KeyIconHeight;\n    private int SIZE_VersionFont;\n    private int SIZE_TimeFont;\n    private int SIZE_logoHeight;\n    private int SIZE_logoWidth;\n    private int SIZE_btnExitWidth;\n    private int SIZE_btnExitHeight;\n    private int SIZE_btnMinWidth;\n    private int SIZE_btnMinHeight;\n    private Font FontBold;\n    private aSurface resource;\n    private int SIZE_ScreenWidth;\n    private int SIZE_ScreenHeight;\n    private MinimizeListener MinimizeHandler;\n    private JPanel pnlTime;\n    private JPanel pnlInfo;\n    private JPanel pnlFrameControlContainer;\n\n    public AuroraCoreUI(JFrame frame) {\n        this.frame = frame;\n        frame.setUndecorated(true);\n        frame.setBackground(Color.BLACK);\n        frame.setResizable(false);\n        frame.setSize(Toolkit.getDefaultToolkit().getScreenSize());\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        resource = new aSurface(\"\");\n\n    }\n\n    public void setUI() throws UnsupportedAudioFileException, IOException, LineUnavailableException, InterruptedException, FontFormatException {\n\n\n        //////////////////////////////////////\n        //Determine Global Size based on Screen Size\n        //////////////////////////////////////\n\n        //TODO work on Screen Gui Change\n\n        SIZE_ScreenWidth = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()[0].getDisplayMode().getWidth();\n        SIZE_ScreenHeight = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()[0].getDisplayMode().getHeight();\n\n        System.out.println(\"Current Screen Ressolution: \"\n                + SIZE_ScreenWidth + \"x\" + SIZE_ScreenHeight);\n\n        if (SIZE_ScreenWidth >= 1680 && SIZE_ScreenHeight >= 1050) {\n            LargeScreen = true;\n        } else {\n            LargeScreen = false;\n        }\n\n        // LargeScreen = false;\n        System.out.println(\"High Resolution Boolean = \" + LargeScreen);\n\n        ////Set Size For UI\n\n        setSizes();\n\n        /////////////////\n        //Start Preparation///////////////////////////////////////\n        ////////////////\n\n\n        //Get Font\n\n        try {\n            FontRegular = Font.createFont(Font.TRUETYPE_FONT, new URL(resource.getSurfacePath() + \"/aurora/V1/resources/AGENCYR.TTF\").openStream());\n            FontBold = Font.createFont(Font.TRUETYPE_FONT, new URL(resource.getSurfacePath() + \"/aurora/V1/resources/AGENCYB.TTF\").openStream());\n        } catch (MalformedURLException ex) {\n            try {\n                FontRegular = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream(\"/aurora/V1/resources/AGENCYR.TTF\"));\n                FontBold = Font.createFont(Font.TRUETYPE_FONT, getClass()"],[1,"BoxLayout;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JWindow;\n\n/**\n * .------------------------------------------------------------------------.\n * | AuroraCoreUI\n * .------------------------------------------------------------------------.\n * |\n * | This is the Core UI class, it contains the persistent UI components\n * | that encompasses the main center UI\n * |\n * | It contains the surrounding frame which is to be manipulated and added\n * | to by Aurora Screens.\n * | This class is loaded when the first Aurora Screen is loaded.\n * |\n * |\n * .........................................................................\n *\n * @author Sammy Guergachi <sguergachi at gmail.com>\n * @author Carlos Machado <camachado@gmail.com>\n * <p/>\n */\npublic class AuroraCoreUI {\n\n    /**\n     * Get revision based on Month Number and Day Number and Year Number.\n     */\n    private final String revision = ATimeLabel.current(ATimeLabel.DATE_NUM);\n\n    /**\n     * Generate full Version string to be used at the bottom of UI.\n     */\n    private final String version =\n                         \"             //BUILD: \" + getResourceBundleToken(\"BUILD\")\n                         + \"  //REVISION: \" + revision\n                         + \"  //AURORA.ENGINE.VERSION = 0.1.\" + (Integer\n            .parseInt(revision));\n\n    /**\n     * Size Constant.\n     */\n    private int topPanelSize;\n\n    /**\n     * Size Constant.\n     */\n    private int centerPanelSize;\n\n    /**\n     * Size Constant.\n     */\n    private int bottomPanelSize;\n\n    /**\n     * Size Constant.\n     */\n    private int controlHeight;\n\n    /**\n     * Size Constant.\n     */\n    private int controlWidth;\n\n    /**\n     * Size Constant.\n     */\n    private int welcomeFontSize;\n\n    /**\n     * Size Constant.\n     */\n    private int keysFontSize;\n\n    /**\n     * Size Constant.\n     */\n    private int keyIconWidth;\n\n    /**\n     * Size Constant.\n     */\n    private int keyIconHeight;\n\n    /**\n     * Size Constant.\n     */\n    private int versionFontSize;\n\n    /**\n     * Size Constant.\n     */\n    private int timeFontSize;\n\n    /**\n     * Size Constant.\n     */\n    private int logoHeight;\n\n    /**\n     * Size Constant.\n     */\n    private int logoWidth;\n\n    /**\n     * Size Constant.\n     */\n    private int exitButtonWidth;\n\n    /**\n     * Size Constant.\n     */\n    private int exitButtonHeight;\n\n    /**\n     * Size Constant.\n     */\n    private int minimizeButtonWidth;\n\n    /**\n     * Size Constant.\n     */\n    private int minimizeButtonHeight;\n\n    /**\n     * Size Constant.\n     */\n    private int screenWidth;\n\n    /**\n     * Size Constant.\n     */\n    private int screenHeight;\n\n    /**\n     * Boolean for whether screen is of larger type or smaller type.\n     */\n    private boolean isLargeScreen;\n\n    /**\n     * Warning dialog window.\n     */\n    private ADialog warningDialog;\n\n    /**\n     * Error dialog window.\n     */\n    private ADialog errorDialog;\n\n    /**\n     * Logo image.\n     */\n    private AImage imgLogo;\n\n    /**\n     * Key icon image.\n     */\n    private AImage imgKeyIcon;\n\n    /**\n     * Background image pane.\n     */\n    private AImagePane paneBackground;\n\n    /**\n     * Bottom image pane.\n     */\n    private AImagePane paneBottom;\n\n    /**\n     * Panel that holds the back, minimize, exit\n     * buttons.\n     */\n    private AImagePane paneFrameControl;\n\n    /**\n     * Top image.\n     */\n    private AImagePane paneTop;\n\n    /**\n     * Reference to the available Surface resources.\n     */\n    private ASurface resources;\n\n    /**\n     * Reference to the Nuance virtual intelligence.\n     */\n    private ANuance vi;\n\n    /**\n     * Regular font.\n     */\n    private Font regularFont;\n\n    /**\n     * Bold font.\n     */\n    private Font boldFont;\n\n    /**\n     * Exit button.\n     */\n    private JButton btnExit;\n\n    /**\n     * Minimize button.\n     */\n    private JButton btnMinimize;\n\n    /**\n     * The JFrame where the Core UI is placed on.\n     */\n    private JFrame frame;\n\n    /**\n     * Center panel that displays the main part of Aurora\n     * ie. Dashboard, Library, etc.\n     */\n    private JPanel paneCenter;\n\n    /**\n     * Panel that holds the keys to press images and labels.\n     */\n    private JPanel paneKeyToPress;\n\n    /**\n     * Panel located south of the top panel.\n     */\n    private JPanel southFromTopPanel;\n\n    /**\n     * Panel that holds the Aurora logo.\n     */\n    private JPanel logoPanel;\n\n    /**\n     * Panel that holds the screen label.\n     */\n    private JPanel screenLabelPanel;\n\n    /**\n     * Panel that holds the current version of Aurora.\n     */\n    private JPanel versionPanel;\n\n    /**\n     * Header panel that is located in pnlCenterFromBottom.\n     */\n    private JPanel paneHeaderOfCenterFromBottom;\n\n    /**\n     * Panel that is located in the center of the\n     * bottom panel.\n     */\n    private JPanel paneCenterFromBottom;\n\n    /**\n     * Panel that holds the current time.\n     */\n    private JPanel paneTime;\n\n    /**\n     * Panel that holds the app title.\n     */\n    private JPanel paneTitle;\n\n    /**\n     * The Container to the panel paneFrameControl.\n     */\n    private JPanel paneFrameControlContainer;\n\n    /**\n     *\n     */\n    private JPanel paneBottomCenterContent;\n\n    /**\n     * Label for the version panel.\n     */\n    private JLabel lblVersion;\n\n    /**\n     * Label for the title panel.\n     */\n    private JLabel lblTitle;\n\n    /**\n     * Label for the key image icon.\n     */\n    private JLabel lblKeyAction;\n\n    /**\n     * The instance of AuroraMini which activates when you minimize Aurora.\n     */\n    private AuroraMini miniMode;\n\n    /**\n     * Listener to listen for when Aurora is minimized.\n     */\n    private MinimizeListener minimizeHandler;\n\n    /**\n     * Label indicating the current time.\n     */\n    public static ATimeLabel lblTime;\n\n    /**\n     * Detects what is the current build number using the\n     * version.properties file.\n     */\n    final static ResourceBundle resourceBundle = ResourceBundle.getBundle(\n            \"version\");\n\n    private ATimeLabel lblDate;\n\n    private JPanel paneTimeContainer;\n\n    /**\n     * .-----------------------------------------------------------------------.\n     * | AuroraCoreUI(JFrame)\n     * .-----------------------------------------------------------------------.\n     * |\n     * | This is the Constructor of the AuroraCoreUI class.\n     * |\n     * | The constructor sets up the Aurora app main frame\n     * .........................................................................\n     *\n     * @param aFrame JFrame\n     *\n     */\n    public AuroraCoreUI(final JFrame aFrame) {\n\n        this.frame = aFrame;\n        setCursor();\n        aFrame.setUndecorated(true);\n        aFrame.setBackground(Color.BLACK);\n        aFrame.setResizable(false);\n        aFrame.setSize(Toolkit.getDefaultToolkit().getScreenSize());\n        aFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        aFrame.addWindowFocusListener(new FrameFocusListener());\n        resources = new ASurface(\"\");\n\n    }\n\n    /**\n     * .-----------------------------------------------------------------------\n     * | setUI()\n     * .-----------------------------------------------------------------------\n     * |\n     * | Sets up the Aurora UI\n     * |\n     * | This method sets up all the key UI components that make up the core UI\n     * | for Aurora\n     * |\n     * .........................................................................\n     * <p/>\n     * @throws UnsupportedAudioFileException Exception\n     * @throws IOException                   Exception\n     * @throws LineUnavailableException      Exception\n     * @throws InterruptedException          Exception\n     * @throws FontFormatException           Exception\n     */\n    public final void setUI() throws UnsupportedAudioFileException, IOException,\n                                     LineUnavailableException,\n                                     InterruptedException,\n                                     FontFormatException {\n\n        //* Determine Global Size based on Screen Size *//\n\n        // TODO work on Screen Gui Change\n\n        screenWidth = GraphicsEnvironment.getLocalGraphicsEnvironment()\n                .getScreenDevices()[0].getDisplayMode().getWidth();\n        screenHeight = GraphicsEnvironment.getLocalGraphicsEnvironment()\n                .getScreenDevices()[0].getDisplayMode().getHeight();\n\n        System.out.println(\"Current Screen Ressolution: \"\n                           + screenWidth + \"x\" + screenHeight);\n\n        //*\n        // Check the resolution (in pixels) of the screen to\n        // determine if the screen is large or not\n        //*\n        if (screenWidth >= 1680 && screenHeight >= 1050) {\n            isLargeScreen = true;\n        } else {\n            isLargeScreen = false;\n        }\n\n        // LargeScreen = false;\n        System.out.println(\"High Resolution Boolean = \" + isLargeScreen);\n\n        //* Set Size For UI *//\n\n        setSizes();\n\n        //* Get Font *//\n\n        try {\n            regularFont = Font.createFont(Font.TRUETYPE_FONT, new URL(resources\n                    .getSurfacePath() + \"/aurora/V1/resources/AGENCYR.TTF\")\n                    .openStream());\n            boldFont = Font.createFont(Font.TRUETYPE_FONT, new URL(resources\n                    .getSurfacePath() + \"/aurora/V1/resources/AGENCYB.TTF\")\n                    .openStream());\n        } catch (MalformedURLException ex) {\n            try {\n                regularFont = Font\n                        .createFont(Font.TRUETYPE_FONT, getClass()\n                        .getResourceAsStream(\"/aurora/V1/resources/AGENCYR.TTF\"));\n                boldFont = Font\n                        .createFont(Font.TRUETYPE_FONT, getClass()\n                        "],[0,".get"]],"start1":1915,"start2":1915,"length1":4488,"length2":9852},{"diffs":[[0,"  }\n"],[-1,"        ///////////////////////"],[1,"\n        //*"],[0,"\n   "]],"start1":11953,"start2":11953,"length1":39,"length2":20},{"diffs":[[0,"  //"],[-1,"/////////////////////\n\n\n        pnlBackground = new aImagePane(\"Aurora_Background.png\", frame.getSize().width, frame.getSize().height, true);\n\n        pnlBackground.setPreferredSize(frame.getSize());\n        pnlBackground.setLayout(new BoxLayout(pnlBackground, BoxLayout.Y_AXIS));\n\n        ///////////////////////\n        // The Top Panel Contains Header Image as well as the Frame Buttons:\n        //  Exit and Minimize\n        ///////////////////////\n\n        pnlTop = new aImagePane(\"Aurora_Header1.png\", frame.getSize().width, (frame.getSize().height / 6), true);\n        pnlTop.setPreferredSize(new Dimension(frame.getSize().width, (frame.getSize().height / 6)));\n\n        pnlTop.setIgnoreRepaint(true);\n        pnlTop.setLayout(new BorderLayout());\n\n\n        ///////////////////////\n        // The Center Panel\n        // and maintains a space between top and bottom panel\n        ///////////////////////\n\n        pnlCenter = new JPanel(true);\n        pnlCenter.setPreferredSize(new Dimension(frame.getSize().width, frame.getSize().height - (frame.getSize().height / 6 + frame.getSize().height / 6)));\n        pnlCenter.setOpaque(false);\n        pnlCenter.setLayout(new BorderLayout());\n        pnlCenter.setIgnoreRepaint(true);\n\n        ///////////////////////\n        // The Bottom Panel Contains the Footer Image as well as\n        // the Time and the Login Controls\n        ///////////////////////\n        pnlBottom = new aImagePane(\"Aurora_Footer1.png\", frame.getSize().width, frame.getSize().height / 6, true);\n        pnlBottom.setPreferredSize(new Dimension(frame.getSize().width, frame.getSize().height / 6));\n        pnlBottom.setOpaque(false);\n        pnlBottom.setLayout(new BorderLayout());\n\n\n\n\n        //////////////////////////////////////////////////////////////////////////\n        //Configure Panels:                                            //////////////////////////////////////////\n        // Add specific UI components to each Panel///////////////////////////////////////\n        //////////////////////////////////////////////////////////////////////////////////\n\n\n        //Create V.I\n        vi = new aXAVI();\n\n\n        /////////////////\n        //Setup Buttons///////////////////////////////////////\n        ////////////////\n\n        btnExit = new aButton(\"Aurora_Close_normal.png\", \"Aurora_Close_down.png\", \"Aurora_Close_over.png\", SIZE_btnExitWidth, SIZE_btnExitHeight);\n        btnExit.addActionListener(new CloseListener());\n        btnExit.setToolTipText(\"Exit\");\n        btnMin = new aButton(\"Aurora_Desktop_normal.png\", \"Aurora_Desktop_down.png\", \"Aurora_Desktop_over.png\", SIZE_btnMinWidth, SIZE_btnMinHeight);\n        MinimizeHandler = new MinimizeListener(this, AuroraMini.MINIMIZE_MODE);\n        btnMin.addActionListener(MinimizeHandler);\n        btnMin.setToolTipText(\"Minimize\");\n\n\n\n\n        /////////\n        // Top Panel\n        /////////\n\n\n        //// Frame Buttons\n\n        pnlFrameControl = new aImagePane(\"Aurora_FrameButton1.png\", SIZE_controlWidth, SIZE_controlHeight);\n        pnlFrameControl.setImageHeight(SIZE_controlHeight);\n        pnlFrameControl.setOpaque(false);\n        pnlFrameControl.add(btnMin);\n        pnlFrameControl.add(btnExit);\n        \n        pnlFrameControlContainer = new JPanel(new BorderLayout());\n        pnlFrameControlContainer.setOpaque(false);\n        pnlFrameControlContainer.add(pnlFrameControl, BorderLayout.NORTH);\n\n        pnlSouthFromTop = new JPanel();\n        pnlSouthFromTop.setLayout(new BorderLayout());\n        pnlSouthFromTop.setOpaque(false);\n        pnlSouthFromTop.add(BorderLayout.LINE_END, pnlFrameControlContainer);\n        pnlSouthFromTop.setPreferredSize(new Dimension(frame.getWidth(), SIZE_controlHeight + 5));\n\n        pnlTop.add(BorderLayout.SOUTH, pnlSouthFromTop);\n\n\n        //// Logo Image\n\n        imgLogo = new aImage(\"Logo_Aurora.png\", SIZE_logoWidth, SIZE_logoHeight);\n        pnlLogo = new JPanel();\n        pnlLogo.setOpaque(false);\n        pnlLogo.add(imgLogo);\n        pnlLogo.setPreferredSize(imgLogo.getSize());\n\n        pnlTop.add(BorderLayout.CENTER, pnlLogo);\n\n        ////////////////\n        // Bottom Panel/////////////////////////////\n        ////////////////\n\n        pnlCenterFromBottom = new JPanel(new BorderLayout());\n        pnlCenterFromBottom.setOpaque(false);\n        pnlBottom.add(BorderLayout.CENTER, pnlCenterFromBottom);\n\n        /// Welcome Label\n        lblInfo = new JLabel(vi.VI(aXAVI.inx_Welcome));\n        lblInfo.setOpaque(false);\n        lblInfo.setForeground(Color.LIGHT_GRAY);\n        lblInfo.setFont(FontRegular.deriveFont(Font.PLAIN, SIZE_welcomeFont));\n\n        pnlInfo = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        pnlInfo.setOpaque(false);\n        pnlInfo.add(lblInfo);\n\n        pnlScreenLable = new JPanel(new BorderLayout());\n        pnlScreenLable.setOpaque(false);\n        pnlScreenLable.add(BorderLayout.NORTH, pnlInfo);\n        pnlBottom.add(BorderLayout.PAGE_START, pnlScreenLable);\n\n\n\n\n        /// Time Label\n\n        pnlHeaderOfCenterFromBottom = new JPanel(new BorderLayout());\n        lblTime = new aTimeLabel();\n        lblTime.setFont(FontBold.deriveFont(Font.PLAIN, SIZE_TimeFont));\n        lblTime.setForeground(new Color(80, 126, 222));\n        pnlTime = new JPanel(new BorderLayout());\n        pnlTime.setOpaque(false);\n        pnlTime.add(lblTime, BorderLayout.NORTH);\n        pnlHeaderOfCenterFromBottom.add(BorderLayout.EAST, pnlTime);\n        pnlHeaderOfCenterFromBottom.setOpaque(false);\n\n\n\n        ///Key Press Panel\n        pnlKeyToPress = new JPanel();\n        pnlKeyToPress.setOpaque(false);\n\n\n        imgKeyIco = new aImage(\"KeyboardKeys/enter.png\");\n        imgKeyIco.setImageSize(SIZE_KeyIconWidth, SIZE_KeyIconHeight);\n        lblKeyAction = new JLabel(\" Select \");\n\n        lblKeyAction.setFont(FontRegular.deriveFont(Font.PLAIN, SIZE_keysFont));\n        lblKeyAction.setForeground(Color.YELLOW);\n\n\n\n\n        pnlHeaderOfCenterFromBottom.add(BorderLayout.WEST, pnlKeyToPress);\n        pnlCenterFromBottom.add(BorderLayout.NORTH, pnlHeaderOfCenterFromBottom);\n\n        ///User Space\n        pnlUserSpace = new JPanel();\n        pnlUserSpace.setOpaque(false);\n        pnlUserSpace.setLayout(new BoxLayout(pnlUserSpace, BoxLayout.Y_AXIS));\n\n        pnlCenterFromBottom.add(BorderLayout.CENTER, pnlUserSpace);\n\n\n        /// Version Label\n\n        lblVersion = new JLabel(Version);\n        lblVersion.setOpaque(false);\n        lblVersion.setForeground(Color.LIGHT_GRAY);\n        lblVersion.setFont(FontRegular.deriveFont(Font.PLAIN, SIZE_VersionFont));\n\n\n        pnlVersion = new JPanel();\n        pnlVersion.setOpaque(false);\n        pnlVersion.setLayout(new BorderLayout());\n        pnlVersion.add(BorderLayout.WEST, lblVersion);\n        pnlBottom.add(BorderLayout.PAGE_END, pnlVersion);\n\n\n\n\n        ///Finalize\n\n        //////////////////////////////////\n        // Add All 3 Main Panels To     //\n        // Background Panel             //\n        //////////////////////////////////\n\n        pnlBackground.add(pnlTop);\n\n        pnlBackground.add(pnlCenter);\n\n        pnlBackground.add(pnlBottom);\n\n\n        frame.addKeyListener(new FrameKeyListener());\n        frame.requestFocus();\n\n    }\n\n    public aDialog getDilgWarning() {\n        return dilgWarning;\n    }\n\n    public void setDilgWarning(aDialog dilgWarning) {\n        this.dilgWarning = dilgWarning;\n    }\n\n    public aDialog getErr() {\n        return err;\n    }\n\n    public void setErr(aDialog err) {\n        this.err = err;\n    }\n\n    public JPanel getPnlLogo() {\n        return pnlLogo;\n    }\n\n    public void setPnlLogo(JPanel pnlLogo) {\n        this.pnlLogo = pnlLogo;\n    }\n\n    public JPanel getPnlTime() {\n        return pnlTime;\n    }\n\n    public void setPnlTime(JPanel pnlTime) {\n        this.pnlTime = pnlTime;\n    }\n\n    public JPanel getPnlFrameControlContainer() {\n        return pnlFrameControlContainer;\n    }\n\n    public void setPnlFrameControlContainer(JPanel pnlFrameControlContainer) {\n        this.pnlFrameControlContainer = pnlFrameControlContainer;\n    }\n\n    public void auroraMinimize"],[1,"*\n\n        paneBackground = new AImagePane(\"app_background.png\", frame\n                .getSize().width, frame.getSize().height, true);\n\n        paneBackground.setPreferredSize(frame.getSize());\n        paneBackground.setLayout(new BoxLayout(paneBackground,\n                BoxLayout.Y_AXIS));\n\n        //*\n        // The Top Panel Contains Header Image as well as the Frame Buttons:\n        // Exit and Minimize\n        //*\n\n        paneTop = new AImagePane(\"app_header.png\",\n                frame.getSize().width, (frame.getSize().height / 6), true);\n        paneTop.setPreferredSize(new Dimension(frame.getSize().width,\n                (frame.getSize().height / 6)));\n\n        paneTop.setIgnoreRepaint(true);\n        paneTop.setLayout(new BorderLayout());\n\n\n        //*\n        // The Center Panel\n        // and maintains a space between top and bottom panel\n        //*\n\n        paneCenter = new JPanel(true);\n        paneCenter.setPreferredSize(new Dimension(frame.getSize().width, frame\n                .getSize().height - (frame.getSize().height / 6 + frame\n                .getSize().height / 6)));\n        paneCenter.setOpaque(false);\n        paneCenter.setLayout(new BorderLayout(0, 0));\n        paneCenter.setIgnoreRepaint(true);\n\n        //*\n        // The Bottom Panel Contains the Footer Image as well as\n        // the Time and the Login Controls\n        //*\n        paneBottom = new AImagePane(\"app_footer.png\",\n                frame.getSize().width, frame.getSize().height / 6, true);\n        paneBottom.setPreferredSize(new Dimension(frame.getSize().width,\n                frame.getSize().height / 6));\n        paneBottom.setOpaque(false);\n        paneBottom.setLayout(new BorderLayout());\n\n        //*\n        // Configure Panels:\n        // Add specific UI components to each panel\n        //*\n\n        // Create V.I\n        vi = new ANuance();\n\n        //* Setup Buttons *//\n        btnExit = new AButton(\"app_btn_close_norm.png\",\n                \"app_btn_close_down.png\", \"app_btn_close_over.png\",\n                exitButtonWidth, exitButtonHeight);\n        btnExit.addActionListener(new CloseListener());\n        btnExit.setToolTipText(\"Exit\");\n        btnMinimize = new AButton(\"app_btn_minimize_norm.png\",\n                \"app_btn_minimize_down.png\", \"app_btn_minimize_over.png\",\n                minimizeButtonWidth, minimizeButtonHeight);\n        minimizeHandler = new MinimizeListener(this, AuroraMini.MINIMIZE_MODE);\n        btnMinimize.addActionListener(minimizeHandler);\n        btnMinimize.setToolTipText(\"Minimize\");\n\n        // TOP PANEL\n        // --------------------------------------------------------------------\n\n        //* Frame Buttons *//\n\n        paneFrameControl = new AImagePane(\"start_frameControl_bg.png\",\n                controlWidth, controlHeight);\n        paneFrameControl.setImageHeight(controlHeight);\n        paneFrameControl.setOpaque(false);\n        paneFrameControl.add(btnMinimize);\n        paneFrameControl.add(btnExit);\n\n        paneFrameControlContainer = new JPanel(new BorderLayout(0, 0));\n        paneFrameControlContainer.setOpaque(false);\n        paneFrameControlContainer.setBackground(Color.BLUE);\n        paneFrameControlContainer\n                .add(paneFrameControl, BorderLayout.NORTH);\n\n        southFromTopPanel = new JPanel();\n        southFromTopPanel.setLayout(new BorderLayout());\n        southFromTopPanel.setOpaque(false);\n        southFromTopPanel.setBackground(Color.red);\n        southFromTopPanel.add(BorderLayout.EAST, paneFrameControlContainer);\n        southFromTopPanel.setPreferredSize(new Dimension(frame.getWidth(),\n                controlHeight));\n\n        paneTop.add(BorderLayout.SOUTH, southFromTopPanel);\n\n        // LOGO PANEL\n        // ---------------------------------------------------------------------\n\n        imgLogo = new AImage(\"start_header_logo.png\", logoWidth, logoHeight);\n        logoPanel = new JPanel();\n        logoPanel.setOpaque(false);\n        logoPanel.add(imgLogo);\n        logoPanel.setPreferredSize(imgLogo.getSize());\n\n        paneTop.add(BorderLayout.CENTER, logoPanel);\n\n        // BOTTOM PANEL\n        // --------------------------------------------------------------------\n\n        paneCenterFromBottom = new JPanel(new BorderLayout());\n        paneCenterFromBottom.setOpaque(false);\n        paneBottom.add(BorderLayout.CENTER, paneCenterFromBottom);\n\n        // WELCOME LABEL\n        // --------------------------------------------------------------------\n\n        lblTitle = new JLabel(vi.VI(ANuance.inx_Welcome));\n        lblTitle.setOpaque(false);\n        lblTitle.setForeground(Color.LIGHT_GRAY);\n        lblTitle.setFont(regularFont.deriveFont(Font.PLAIN, welcomeFontSize));\n\n        paneTitle = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        paneTitle.setOpaque(false);\n        paneTitle.add(lblTitle);\n\n        screenLabelPanel = new JPanel(new BorderLayout());\n        screenLabelPanel.setOpaque(false);\n        screenLabelPanel.add(BorderLayout.NORTH, paneTitle);\n        paneBottom.add(BorderLayout.PAGE_START, screenLabelPanel);\n\n        // TIME LABEL\n        // ---------------------------------------------------------------------\n\n        paneHeaderOfCenterFromBottom = new JPanel(new BorderLayout());\n        lblTime = new ATimeLabel(ATimeLabel.TIME);\n        lblTime.setFont(boldFont.deriveFont(Font.PLAIN, timeFontSize));\n        lblTime.setForeground(new Color(0,178,178));\n\n        lblDate = new ATimeLabel(ATimeLabel.DATE_LETTERS);\n        lblDate.setForeground(Color.gray);\n        lblDate.setFont(boldFont.deriveFont(Font.PLAIN, timeFontSize));\n\n        paneTimeContainer = new JPanel();\n        paneTimeContainer.setOpaque(false);\n\n        paneTimeContainer.add(lblDate);\n        paneTimeContainer.add(lblTime);\n\n\n        paneTime = new JPanel(new BorderLayout());\n        paneTime.setOpaque(false);\n        paneTime.add(paneTimeContainer, BorderLayout.NORTH);\n        paneHeaderOfCenterFromBottom.add(BorderLayout.EAST, paneTime);\n        paneHeaderOfCenterFromBottom.setOpaque(false);\n\n        // KEY PRESS PANEL\n        // ---------------------------------------------------------------------\n\n        paneKeyToPress = new JPanel();\n        paneKeyToPress.setOpaque(false);\n\n        imgKeyIcon = new AImage(\"KeyboardKeys/enter.png\");\n        imgKeyIcon.setImageSize(keyIconWidth, keyIconHeight);\n        lblKeyAction = new JLabel(\" Select \");\n\n        lblKeyAction.setFont(regularFont.deriveFont(Font.PLAIN, keysFontSize));\n        lblKeyAction.setForeground(new Color(0,178,178));\n\n        paneHeaderOfCenterFromBottom.add(BorderLayout.WEST, paneKeyToPress);\n        paneCenterFromBottom.add(BorderLayout.NORTH,\n                paneHeaderOfCenterFromBottom);\n\n        // USER SPACE\n        // ---------------------------------------------------------------------\n\n        paneBottomCenterContent = new JPanel();\n        paneBottomCenterContent.setOpaque(false);\n        paneBottomCenterContent\n                .setLayout(new BoxLayout(paneBottomCenterContent,\n                BoxLayout.Y_AXIS));\n\n        paneCenterFromBottom.add(BorderLayout.CENTER, paneBottomCenterContent);\n\n        // VERSION LABEL\n        // ---------------------------------------------------------------------\n\n        lblVersion = new JLabel(version);\n        lblVersion.setOpaque(false);\n        lblVersion.setForeground(Color.LIGHT_GRAY);\n        lblVersion\n                .setFont(regularFont.deriveFont(Font.PLAIN, versionFontSize));\n\n        versionPanel = new JPanel();\n        versionPanel.setOpaque(false);\n        versionPanel.setLayout(new BorderLayout());\n        versionPanel.add(BorderLayout.WEST, lblVersion);\n        paneBottom.add(BorderLayout.PAGE_END, versionPanel);\n\n        //*\n        // Add All 3 Main Panels To\n        // Background Panel\n        //*\n\n        paneBackground.add(paneTop);\n        paneBackground.add(paneCenter);\n        paneBackground.add(paneBottom);\n\n        frame.addKeyListener(new FrameKeyListener());\n        frame.requestFocus();\n\n    }\n\n    public ADialog getWarningDialog() {\n        return warningDialog;\n    }\n\n    public void setWarningDialog(ADialog warningDialog) {\n        this.warningDialog = warningDialog;\n    }\n\n    public ADialog getErrorDialog() {\n        return errorDialog;\n    }\n\n    public void setErrorDialog(ADialog errorDialog) {\n        this.errorDialog = errorDialog;\n    }\n\n    public JPanel getLogoPanel() {\n        return logoPanel;\n    }\n\n    public void setLogoPanel(JPanel logoPanel) {\n        this.logoPanel = logoPanel;\n    }\n\n    public JPanel getTimePanel() {\n        return paneTime;\n    }\n\n    public void setTimePanel(JPanel timePanel) {\n        this.paneTime = timePanel;\n    }\n\n    public JPanel getFrameControlContainerPanel() {\n        return paneFrameControlContainer;\n    }\n\n    public void setFrameControlContainerPanel(JPanel frameControlContainerPanel) {\n        this.paneFrameControlContainer = frameControlContainerPanel;\n    }\n\n    public void minimizeAurora"],[0,"(Str"]],"start1":12110,"start2":12110,"length1":8073,"length2":9003},{"diffs":[[0,"n(0, 3000);\n"],[1,"        frame.setVisible(false);\n"],[0,"    }\n\n    p"]],"start1":21285,"start2":21285,"length1":24,"length2":57},{"diffs":[[0," return "],[-1,"M"],[1,"m"],[0,"inimizeH"]],"start1":21395,"start2":21395,"length1":17,"length2":17},{"diffs":[[0,"; //"],[-1,"retain state\n        }\n        return miniMode;\n    }\n\n    public int getSIZE_ScreenHeight() {\n        return SIZE_ScreenHeight;\n    }\n\n    public int getSIZE_ScreenWidth() {\n        return SIZE_ScreenWidth;\n    }\n\n    public Font getFontBold() {\n        return FontBold;\n    }\n\n    public Font getFontRegular() {\n        return FontRegular;\n    }\n\n    public Font getDefaultFont() {\n        return FontRegular;\n    }\n\n    private void setSizes() {\n        double Ratio = (frame.getWidth() - frame.getHeight()) / 2;\n        if (LargeScreen) {\n            SIZE_pnlTop = frame.getHeight() / 4;\n            SIZE_pnlCenter = frame.getHeight() / 2 + frame.getHeight() / 40;\n            SIZE_pnlBottom = frame.getHeight() / 4 + frame.getHeight() / 40;\n            SIZE_controlHeight = 55;\n            SIZE_controlWidth = 160;\n            SIZE_keysFont = frame.getHeight() / 40;\n            SIZE_welcomeFont = 22;\n            SIZE_KeyIconWidth = 0;\n            SIZE_KeyIconHeight = 0;\n            SIZE_VersionFont = 15;\n            SIZE_TimeFont = SIZE_pnlBottom / 12;\n            SIZE_logoHeight = SIZE_pnlTop / 3 + (int) (Ratio / 14);\n            SIZE_logoWidth = frame.getWidth() / 2 + (int) (Ratio / 5);\n            SIZE_btnExitWidth = 0;\n            SIZE_btnExitHeight = 0;\n            SIZE_btnMinWidth = 0;\n            SIZE_btnMinHeight = 0;\n        } else {\n            SIZE_pnlTop = frame.getHeight() / 4;\n            SIZE_pnlCenter = frame.getHeight() / 2 + frame.getHeight() / 40;\n            SIZE_pnlBottom = frame.getHeight() / 4 + frame.getHeight() / 40;\n            SIZE_keysFont = frame.getHeight() / 40;\n            SIZE_welcomeFont = 21;\n            SIZE_KeyIconWidth = SIZE_pnlBottom / 4;\n            SIZE_KeyIconHeight = SIZE_pnlBottom / 8;\n            SIZE_VersionFont = 12;\n            SIZE_TimeFont = SIZE_pnlBottom / 12;\n            SIZE_logoHeight = SIZE_pnlTop / 3 + (int) (Ratio / 20);\n            SIZE_logoWidth = frame.getWidth() / 2;\n            SIZE_controlHeight = 45;\n            SIZE_controlWidth = 150;\n            SIZE_btnExitWidth = 35;\n            SIZE_btnExitHeight = 30;\n            SIZE_btnMinWidth = 35;\n            SIZE_btnMinHeight = 30;\n        }\n    }\n\n////////////\n//Setters //\n////////////\n    public int getSIZE_KeyIconHeight() {\n        return SIZE_KeyIconHeight;\n    }\n\n    public void setSIZE_KeyIconHeight(int SIZE_KeyIconHeight) {\n        this.SIZE_KeyIconHeight = SIZE_KeyIconHeight;\n    }\n\n    public boolean getLargeScreen() {\n        return LargeScreen;\n    }\n\n    public int getSIZE_KeyIconWidth() {\n        return SIZE_KeyIconWidth;\n    }\n\n    public void setSIZE_KeyIconWidth(int SIZE_KeyIconWidth) {\n        this.SIZE_KeyIconWidth = SIZE_KeyIconWidth;\n    }\n\n    public int getSIZE_TimeFont() {\n        return SIZE_TimeFont;\n    }\n\n    public void setSIZE_TimeFont(int SIZE_TimeFont) {\n        this.SIZE_TimeFont = SIZE_TimeFont;\n    }\n\n    public int getSIZE_VersionFont() {\n        return SIZE_VersionFont;\n    }\n\n    public void setSIZE_VersionFont(int SIZE_VersionFont) {\n        this.SIZE_VersionFont = SIZE_VersionFont;\n    }\n\n    public int getSIZE_btnExitHeight() {\n        return SIZE_btnExitHeight;\n    }\n\n    public void setSIZE_btnExitHeight(int SIZE_btnExitHeight) {\n        this.SIZE_btnExitHeight = SIZE_btnExitHeight;\n    }\n\n    public int getSIZE_btnExitWidth() {\n        return SIZE_btnExitWidth;\n    }\n\n    public void setSIZE_btnExitWidth(int SIZE_btnExitWidth) {\n        this.SIZE_btnExitWidth = SIZE_btnExitWidth;\n    }\n\n    public int getSIZE_btnMinHeight() {\n        return SIZE_btnMinHeight;\n    }\n\n    public void setSIZE_btnMinHeight(int SIZE_btnMinHeight) {\n        this.SIZE_btnMinHeight = SIZE_btnMinHeight;\n    }\n\n    public int getSIZE_btnMinWidth() {\n        return SIZE_btnMinWidth;\n    }\n\n    public void setSIZE_btnMinWidth(int SIZE_btnMinWidth) {\n        this.SIZE_btnMinWidth = SIZE_btnMinWidth;\n    }\n\n    public int getSIZE_controlHeight() {\n        return SIZE_controlHeight;\n    }\n\n    public void setSIZE_controlHeight(int SIZE_controlHeight) {\n        this.SIZE_controlHeight = SIZE_controlHeight;\n    }\n\n    public int getSIZE_controlWidth() {\n        return SIZE_controlWidth;\n    }\n\n    public void setSIZE_controlWidth(int SIZE_controlWidth) {\n        this.SIZE_controlWidth = SIZE_controlWidth;\n    }\n\n    public int getSIZE_keysFont() {\n        return SIZE_keysFont;\n    }\n\n    public void setSIZE_keysFont(int SIZE_keysFont) {\n        this.SIZE_keysFont = SIZE_keysFont;\n    }\n\n    public int getSIZE_logoHeight() {\n        return SIZE_logoHeight;\n    }\n\n    public void setSIZE_logoHeight(int SIZE_logoHeight) {\n        this.SIZE_logoHeight = SIZE_logoHeight;\n    }\n\n    public int getSIZE_logoWidth() {\n        return SIZE_logoWidth;\n    }\n\n    public void setSIZE_logoWidth(int SIZE_logoWidth) {\n        this.SIZE_logoWidth = SIZE_logoWidth;\n    }\n\n    public int getSIZE_pnlBottom() {\n        return SIZE_pnlBottom;\n    }\n\n    public void setSIZE_pnlBottom(int SIZE_pnlBottom) {\n        this.SIZE_pnlBottom = SIZE_pnlBottom;\n    }\n\n    public int getSIZE_pnlCenter() {\n        return SIZE_pnlCenter;\n    }\n\n    public void setSIZE_pnlCenter(int SIZE_pnlCenter) {\n        this.SIZE_pnlCenter = SIZE_pnlCenter;\n    }\n\n    public int getSIZE_pnlTop() {\n        return SIZE_pnlTop;\n    }\n\n    public void setSIZE_pnlTop(int SIZE_pnlTop) {\n        this.SIZE_pnlTop = SIZE_pnlTop;\n    }\n\n    public int getSIZE_welcomeFont() {\n        return SIZE_welcomeFont;\n    }\n\n    public void setSIZE_welcomeFont(int SIZE_welcomeFont) {\n        this.SIZE_welcomeFont = SIZE_welcomeFont;\n    }\n\n    public void setPnlBackground(aImagePane pnlBackground) {\n        this.pnlBackground = pnlBackground;\n    }\n\n    public void setPnlBottom(aImagePane pnlBottom) {\n        this.pnlBottom = pnlBottom;\n    }\n\n    public void setPnlCenter(JPanel pnlCenter) {\n        this.pnlCenter = pnlCenter;\n    }\n\n    public void setPnlCenterFromBottom(JPanel pnlCenterFromBottom) {\n        this.pnlCenterFromBottom = pnlCenterFromBottom;\n    }\n\n    public void setPnlSouthFromTop(JPanel pnlSouthFromTop) {\n        this.pnlSouthFromTop = pnlSouthFromTop;\n    }\n\n    public void setPnlFrameControl(aImagePane pnlFrameControl) {\n        this.pnlFrameControl = pnlFrameControl;\n    }\n\n    public void setPnlTop(aImagePane pnlTop) {\n        this.pnlTop = pnlTop;\n    }\n\n    public void setImgLogo(aImage imgLogo) {\n        this.imgLogo = imgLogo;\n    }\n\n    public void setLblInfo(JLabel lblInfo) {\n        this.lblInfo = lblInfo;\n    }\n\n    public void setVi(aXAVI vi) {\n        this.vi = vi;\n    }\n\n    public void setPnlUserbar(JPanel pnlUserbar) {\n        this.pnlUserSpace = pnlUserbar;\n    }\n\n    public String getRevision() {\n        return Revision;\n    }\n\n    public void setFrame(JFrame frame) {\n        this.frame = frame;\n    }\n\n    public void setImgKeyIco(aImage imgKeyIco) {\n        this.imgKeyIco = imgKeyIco;\n    }\n\n    public void setLblKeyAction(JLabel lblKeyAction) {\n        this.lblKeyAction = lblKeyAction;\n    }\n\n    public static void setLblTime(aTimeLabel lblTime) {\n        AuroraCoreUI.lblTime = lblTime;\n    }\n\n    public void setLblVersion(JLabel lblVersion) {\n        this.lblVersion = lblVersion;\n    }\n\n    public void setHeaderOfCenterFromBottom(JPanel pnlHeaderOfCenterFromBottom) {\n        this.pnlHeaderOfCenterFromBottom = pnlHeaderOfCenterFromBottom;\n    }\n\n    public void setPnlKeyToPress(JPanel pnlKeyToPress) {\n        this.pnlKeyToPress = pnlKeyToPress;\n    }\n\n    public void setPnlScreenLable(JPanel pnlScreenLable) {\n        this.pnlScreenLable = pnlScreenLable;\n    }\n\n    public void setPnlVersion(JPanel pnlVersion) {\n        this.pnlVersion = pnlVersion;\n    }\n\n    ///\n    //Getters\n    ///\n    public aImage getImgKeyIco() {\n        return imgKeyIco;\n    }\n\n    public JLabel getLblKeyAction() {\n        return lblKeyAction;\n    }\n\n    public JLabel getLblVersion() {\n        return lblVersion;\n    }\n\n    public JPanel getPnlHeaderOfCenterFromBottom() {\n        return pnlHeaderOfCenterFromBottom;\n    }\n\n    public JPanel getPnlKeyToPress() {\n        return pnlKeyToPress;\n    }\n\n    public String getVersion() {\n        return Version;\n    }\n\n    public JPanel getPnlScreenLable() {\n        return pnlScreenLable;\n    }\n\n    public JPanel getPnlVersion() {\n        return pnlVersion;\n    }\n\n    public boolean isLargeScreen() {\n        return LargeScreen;\n    }\n\n    public JButton getBtnExit() {\n        return btnExit;\n    }\n\n    public JButton getBtnMin() {\n        return btnMin;\n    }\n\n    public JLabel getLblInfo() {\n        return lblInfo;\n    }\n\n    public aXAVI getVi() {\n        return vi;\n    }\n\n    public JFrame getFrame() {\n        return frame;\n    }\n\n    public static aTimeLabel getLblTime() {\n        return lblTime;\n    }\n\n    public JPanel getPnlUserSpace() {\n        return pnlUserSpace;\n    }\n\n    public aImage getImgLogo() {\n        return imgLogo;\n    }\n\n    public aImagePane getPnlBackground() {\n        return pnlBackground;\n    }\n\n    public JPanel getPnlInfo() {\n\n        return pnlInfo;\n    }\n\n    public aImagePane getPnlBottom() {\n        return pnlBottom;\n    }\n\n    public JPanel getPnlCenter() {\n        return pnlCenter;\n    }\n\n    public JPanel getPnlCenterFromBottom() {\n        return pnlCenterFromBottom;\n    }\n\n    public JPanel getPnlSouthFromTop() {\n        return pnlSouthFromTop;\n    }\n\n    public aImagePane getPnlFrameControl() {\n        return pnlFrameControl;\n    }\n\n    public aImagePane getPnlTop() {\n        return pnlTop;\n    }\n\n    public void setSFX() throws UnsupportedAudioFileException, IOException, LineUnavailableException, InterruptedException {\n        //////////\n        /////Background Sound\n        ///////////\n        ///TODO FIX SOUND BUG\n//\n//        try {\n//            sfxTheme = new aSound(aSound.sfxTheme, true);\n//\n//            ///////////\n//            //Play Sound//////////////////////////\n//            ///////////\n//\n//\n//            sfxExit = new aSound(aSound.sfxAlert, false);\n//            sfxMinimize = new aSound(aSound.sfxButton, false);\n//            sfxWarning = new aSound(aSound.sfxButton, false);\n//            sfxClunk = new aSound(aSound.sfxClunk, false);\n//\n//        } catch (MalformedURLException ex) {\n//            err = new aDialog(aDialog.aDIALOG_ERROR, \"A Sound \" + vi.VI(vi.inx_Error) + \" Occured!\");\n//            err.setVisible(true);\n//        }\n    }//end SFX\n\n    public void showExitDilog() {\n        if (dilgWarning == null) {\n            dilgWarning = new aDialog(aDialog.aDIALOG_WARNING, \"Are You Sure you want to \" + vi.VI(vi.inx_Exit) + \"?\", FontBold);\n\n\n            dilgWarning.setButtonListener(new ActionListener() {\n                private aDialog err;\n\n                public void actionPerformed(ActionEvent e) {\n                    ///SOUND\n//                    try {\n//                        sfxWarning.Play();\n//                    } catch (UnsupportedAudioFileException ex) {\n//                        Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//                    } catch (IOException ex) {\n//                        Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//                    } catch (LineUnavailableException ex) {\n//                        Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//                    } catch (InterruptedException ex) {\n//                        Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//                    }\n\n                    System.exit(0);\n                }\n            });\n            dilgWarning.showDialog();\n\n\n        }\n        dilgWarning.setVisible(true);\n        //SOUND\n//        try {\n//            sfxExit.Play();\n//        } catch (UnsupportedAudioFileException ex) {\n//            Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//        } catch (IOException ex) {\n//            Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//        } catch (LineUnavailableException ex) {\n//            Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//        } catch (InterruptedException ex) {\n//            Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//        }\n        try {\n            try {\n                setSFX();\n            } catch (InterruptedException ex) {\n                Logger.getLogger(AuroraCoreUI.class.getName()).log(Level.SEVERE, null, ex);\n            }\n        } catch (UnsupportedAudioFileException ex) {\n            Logger.getLogger(AuroraCoreUI.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (IOException ex) {\n            Logger.getLogger(AuroraCoreUI.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (LineUnavailableException ex) {\n            Logger.getLogger(AuroraCoreUI.class.getName()).log(Level.SEVERE, null, ex);\n        }\n\n    }\n\n    //Get Build Version Of Application\n    private static String getRbTok(String propToken) {\n        String msg = \"\";\n        try {\n            msg = rb.getString(propToken);\n        } catch (MissingResourceException e) {\n            System.err.println(\"Token \".concat(propToken).concat(\" not in Property file!\"));\n        }\n        return msg;\n    }\n\n    public String getOS() {\n        return System.getProperty(\"os.name\");\n    }\n\n    public void setSurface(aSurface resource) {\n        this.resource = resource;\n    }\n\n    public aSurface getResource() {\n        return resource;\n    }\n\n    /*\n     * Sets The Close Button Actions\n     */\n    class CloseListener implements ActionListener {\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n\n            showExitDilog();\n\n        }\n    }\n\n   public class MinimizeListener implements ActionListener {\n\n        private AuroraCoreUI ui;\n        private String arg;\n\n        public MinimizeListener(AuroraCoreUI ui, String arg) {\n            this.ui = ui;\n            this.arg = arg;\n        }\n\n        public void setArg(String arg) {\n            this.arg = arg;\n        }\n\n        public void actionPerformed(ActionEvent e) {\n            //SOUND\n//            try {\n//                sfxMinimize.Play();\n//            } catch (UnsupportedAudioFileException ex) {\n//                Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//            } catch (IOException ex) {\n//                Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//            } catch (LineUnavailableException ex) {\n//                Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//            } catch (InterruptedException ex) {\n//                Logger.getLogger(AuroraUI.class.getName()).log(Level.SEVERE, null, ex);\n//            }\n\n            //ENABLE MINI MODE// indev\n\n            auroraMinimize(arg);\n\n            //ENABLE BASIC MINIMIZE\n            //ui.getFrame().setState(Frame.ICONIFIED);\n\n\n\n        }\n    }\n\n    class FrameKeyListener implements KeyListener {\n\n        @Override\n        public void keyTyped(KeyEvent e) {\n        }\n\n        @Override\n        public void keyPressed(KeyEvent e) {\n        }\n\n        @Override\n        public void keyReleased(KeyEvent e) {\n\n            if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {\n                showExitDilog();\n            }\n\n        }"],[1,"* retain state *//\n        }\n        return miniMode;\n    }\n\n    public int getScreenHeight() {\n        return screenHeight;\n    }\n\n    public int getScreenWidth() {\n        return screenWidth;\n    }\n\n    public Font getBoldFont() {\n        return boldFont;\n    }\n\n    public Font getRegularFont() {\n        return regularFont;\n    }\n\n    public Font getDefaultFont() {\n        return regularFont;\n    }\n\n    /**\n     * Sets the sizes of the various components based on the screen resolution\n     */\n    private void setSizes() {\n        double Ratio = (frame.getWidth() - frame.getHeight()) / 2;\n        if (isLargeScreen) {\n            topPanelSize = frame.getHeight() / 4;\n            centerPanelSize = frame.getHeight() / 2 + frame.getHeight() / 40;\n            bottomPanelSize = frame.getHeight() / 4 + frame.getHeight() / 40;\n            controlHeight = 55;\n            controlWidth = 160;\n            keysFontSize = frame.getHeight() / 40;\n            welcomeFontSize = 22;\n            keyIconWidth = 0;\n            keyIconHeight = 0;\n            versionFontSize = 15;\n            timeFontSize = bottomPanelSize / 12;\n            logoHeight = topPanelSize / 3 + (int) (Ratio / 14);\n            logoWidth = frame.getWidth() / 2 + (int) (Ratio / 5);\n            exitButtonWidth = 0;\n            exitButtonHeight = 0;\n            minimizeButtonWidth = 0;\n            minimizeButtonHeight = 0;\n        } else {\n            topPanelSize = frame.getHeight() / 4;\n            centerPanelSize = frame.getHeight() / 2 + frame.getHeight() / 40;\n            bottomPanelSize = frame.getHeight() / 4 + frame.getHeight() / 40;\n            keysFontSize = frame.getHeight() / 40;\n            welcomeFontSize = 21;\n            keyIconWidth = bottomPanelSize / 4;\n            keyIconHeight = bottomPanelSize / 8;\n            versionFontSize = 12;\n            timeFontSize = bottomPanelSize / 12;\n            logoHeight = topPanelSize / 3 + (int) (Ratio / 20);\n            logoWidth = frame.getWidth() / 2;\n            controlHeight = 45;\n            controlWidth = 150;\n            exitButtonWidth = 35;\n            exitButtonHeight = 30;\n            minimizeButtonWidth = 35;\n            minimizeButtonHeight = 30;\n        }\n    }\n\n    /**\n     * .-----------------------------------------------------------------------\n     * | setSFX()\n     * .-----------------------------------------------------------------------\n     * |\n     * | Background sound\n     * |\n     * | This is a method that will set the background sound effects for Aurora\n     * |\n     * .........................................................................\n     *\n     */\n    public void setSFX() throws UnsupportedAudioFileException, IOException,\n                                LineUnavailableException, InterruptedException {\n        //*\n        // Background Sound\n        //*\n    }\n\n    /**\n     * .-----------------------------------------------------------------------\n     * | showExitDialog()\n     * .-----------------------------------------------------------------------\n     * |\n     * | This method displays the exit dialog\n     * |\n     * | After the user clicks on the Exit button, the user will be presented\n     * | with a warning dialog asking them if they are sure they want to exit\n     * | the application.\n     * .........................................................................\n     *\n     */\n    public void showExitDialog() {\n        if (warningDialog == null) {\n            warningDialog = new ADialog(ADialog.aDIALOG_WARNING,\n                    \"Are You Sure you want to \" + vi.VI(vi.inx_Exit) + \"?\",\n                    boldFont);\n\n\n            warningDialog.setOKButtonListener(new ActionListener() {\n                private ADialog err;\n\n                public void actionPerformed(ActionEvent e) {\n\n\n                    System.exit(0);\n                }\n            });\n            warningDialog.showDialog();\n\n\n        }\n        warningDialog.setVisible(true);\n\n        try {\n            try {\n                setSFX();\n            } catch (InterruptedException ex) {\n                Logger.getLogger(AuroraCoreUI.class.getName()).log(Level.SEVERE,\n                        null, ex);\n            }\n        } catch (UnsupportedAudioFileException ex) {\n            Logger.getLogger(AuroraCoreUI.class.getName()).log(Level.SEVERE,\n                    null, ex);\n        } catch (IOException ex) {\n            Logger.getLogger(AuroraCoreUI.class.getName()).log(Level.SEVERE,\n                    null, ex);\n        } catch (LineUnavailableException ex) {\n            Logger.getLogger(AuroraCoreUI.class.getName()).log(Level.SEVERE,\n                    null, ex);\n        }\n\n    }\n\n    //* Get Build Version Of Application *//\n    private static String getResourceBundleToken(String propertyToken) {\n        String msg = \"\";\n        try {\n            msg = resourceBundle.getString(propertyToken);\n        } catch (MissingResourceException e) {\n            System.err.println(\"Token \".concat(propertyToken).concat(\n                    \" not in Property file!\"));\n        }\n        return msg;\n    }\n\n    public String getOS() {\n        return System.getProperty(\"os.name\");\n    }\n\n    public void setSurface(ASurface resource) {\n        this.resources = resource;\n    }\n\n    public ASurface getResource() {\n        return resources;\n    }\n    /**\n     * .-----------------------------------------------------------------------.\n     * | setCursor()\n     * .-----------------------------------------------------------------------.\n     * |\n     * | This method sets the mouse pointer cursor and states\n     * |\n     * | Customize the look of the mouse pointer cursor in various states\n     * |\n     * .........................................................................\n     *\n     */\n    private BufferedImage cursorImage;\n\n    private void setCursor() {\n\n        ACursor cursor = new ACursor(new AImage(\"cursor.png\"));\n\n        frame.setCursor(cursor.getCursor());\n\n    }\n\n    private class FrameFocusListener implements WindowFocusListener {\n\n        /**\n         * Glass Pane from Frame.\n         */\n        private JPanel glass;\n\n        /**\n         * ImagePane containing Unfocused Background Image.\n         */\n        private AImagePane paneUnfocused;\n\n        private boolean wasVisible;\n\n        /**\n         * FrameFocusListener()\n         * Detect when Frame is out of focus.\n         */\n        public FrameFocusListener() {\n            paneUnfocused = new AImagePane(\"Aurora_Unfocused.png\", frame\n                    .getWidth(), frame.getHeight());\n            this.glass = (JPanel) frame.getGlassPane();\n        }\n\n        @Override\n        public void windowGainedFocus(WindowEvent e) {\n            System.out.println(\"FOCUS GAINED\");\n            if (wasVisible) {\n                glass.remove(paneUnfocused);\n                glass.repaint();\n            } else {\n\n                glass.remove(paneUnfocused);\n                glass.setVisible(false);\n                glass.repaint();\n            }\n        }\n\n        @Override\n        public void windowLostFocus(WindowEvent e) {\n            System.out.println(\"FOCUS LOST\");\n            if (frame.getGlassPane().isVisible()) {\n                glass.setLayout(null);\n                wasVisible = true;\n                glass.add(paneUnfocused, 0);\n                paneUnfocused.setSize(frame.getSize());\n                paneUnfocused.setLocation(0, 0);\n                paneUnfocused.setBounds(0, 0, frame\n                        .getWidth(), frame.getHeight());\n                glass.setVisible(true);\n                glass.repaint();\n            } else {\n                wasVisible = false;\n                glass.setLayout(null);\n                glass.add(paneUnfocused, 0);\n                paneUnfocused.setSize(frame.getSize());\n                paneUnfocused.setLocation(0, 0);\n                paneUnfocused.setBounds(0, 0, frame\n                        .getWidth(), frame.getHeight());\n                glass.setVisible(true);\n                glass.repaint();\n            }\n        }\n    }\n\n    /*\n     * Sets The Close Button Actions\n     */\n    class CloseListener implements ActionListener {\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n\n            showExitDialog();\n\n        }\n    }\n\n    /*\n     * Sets the minimize button actions\n     */\n    public class MinimizeListener implements ActionListener {\n\n        private AuroraCoreUI ui;\n\n        private String arg;\n\n        public MinimizeListener(AuroraCoreUI ui, String arg) {\n            this.ui = ui;\n            this.arg = arg;\n        }\n\n        public void setArg(String arg) {\n            this.arg = arg;\n        }\n\n        public void actionPerformed(ActionEvent e) {\n            //ENABLE MINI MODE\n\n            minimizeAurora(arg);\n\n        }\n    }\n\n    class FrameKeyListener implements KeyListener {\n\n        @Override\n        public void keyTyped(KeyEvent e) {\n        }\n\n        @Override\n        public void keyPressed(KeyEvent e) {\n        }\n\n        @Override\n        public void keyReleased(KeyEvent e) {\n\n            if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {\n                showExitDialog();\n            }\n\n        }\n    }\n\n    // SETTERS & GETTERS\n    // -----------------------------------------------------------------------\n    public void setKeyIconHeight(int keyIconHeight) {\n        this.keyIconHeight = keyIconHeight;\n    }\n\n    public int getKeyIconHeight() {\n        return keyIconHeight;\n    }\n\n    public boolean getLargeScreen() {\n        return isLargeScreen;\n    }\n\n    public void setKeyIconWidth(int keyIconWidth) {\n        this.keyIconWidth = keyIconWidth;\n    }\n\n    public int getKeyIconWidth() {\n        return keyIconWidth;\n    }\n\n    public void setTimeFontSize(int timeFontSize) {\n        this.timeFontSize = timeFontSize;\n    }\n\n    public int getTimeFontSize() {\n        return timeFontSize;\n    }\n\n    public void setVersionFontSize(int versionFontSize) {\n        this.versionFontSize = versionFontSize;\n    }\n\n    public int getVersionFontSize() {\n        return versionFontSize;\n    }\n\n    public void setExitButtonHeight(int exitButtonHeight) {\n        this.exitButtonHeight = exitButtonHeight;\n    }\n\n    public int getExitButtonHeight() {\n        return exitButtonHeight;\n    }\n\n    public void setExitButtonWidth(int exitButtonWidth) {\n        this.exitButtonWidth = exitButtonWidth;\n    }\n\n    public int getExitButtonWidth() {\n        return exitButtonWidth;\n    }\n\n    public void setMinimizeButtonHeight(int minimizeButtonHeight) {\n        this.minimizeButtonHeight = minimizeButtonHeight;\n    }\n\n    public int getMinimizeButtonHeight() {\n        return minimizeButtonHeight;\n    }\n\n    public void setMinimizeButtonWidth(int minimizeButtonWidth) {\n        this.minimizeButtonWidth = minimizeButtonWidth;\n    }\n\n    public int getMinimizeButtonWidth() {\n        return minimizeButtonWidth;\n    }\n\n    public void setControlHeight(int controlHeight) {\n        this.controlHeight = controlHeight;\n    }\n\n    public int getControlHeight() {\n        return controlHeight;\n    }\n\n    public void setControlWidth(int controlWidth) {\n        this.controlWidth = controlWidth;\n    }\n\n    public int getControlWidth() {\n        return controlWidth;\n    }\n\n    public void setKeysFontSize(int keysFontSize) {\n        this.keysFontSize = keysFontSize;\n    }\n\n    public int getKeysFontSize() {\n        return keysFontSize;\n    }\n\n    public void setLogoHeight(int logoHeight) {\n        this.logoHeight = logoHeight;\n    }\n\n    public int getLogoHeight() {\n        return logoHeight;\n    }\n\n    public void setLogoWidth(int logoWidth) {\n        this.logoWidth = logoWidth;\n    }\n\n    public int getLogoWidth() {\n        return logoWidth;\n    }\n\n    public void setBottomPanelSize(int bottomPanelSize) {\n        this.bottomPanelSize = bottomPanelSize;\n    }\n\n    public int getBottomPanelSize() {\n        return bottomPanelSize;\n    }\n\n    public void setCenterPanelSize(int centerPanelSize) {\n        this.centerPanelSize = centerPanelSize;\n    }\n\n    public int getCenterPanelSize() {\n        return centerPanelSize;\n    }\n\n    public void setTopPanelSize(int topPanelSize) {\n        this.topPanelSize = topPanelSize;\n    }\n\n    public int getTopPanelSize() {\n        return topPanelSize;\n    }\n\n    public void setWelcomeFontSize(int welcomeFontSize) {\n        this.welcomeFontSize = welcomeFontSize;\n    }\n\n    public int getWelcomeFontSize() {\n        return welcomeFontSize;\n    }\n\n    public void setBackgroundImagePane(AImagePane backgroundImagePane) {\n        this.paneBackground = backgroundImagePane;\n    }\n\n    public AImagePane getBackgroundImagePane() {\n        return paneBackground;\n    }\n\n    public void setBottomPane(AImagePane bottomImagePane) {\n        this.paneBottom = bottomImagePane;\n    }\n\n    public AImagePane getBottomPane() {\n        return paneBottom;\n    }\n\n    public void setCenterPanel(JPanel centerPanel) {\n        this.paneCenter = centerPanel;\n    }\n\n    public JPanel getCenterPanel() {\n        return paneCenter;\n    }\n\n    public void setCenterFromBottomPanel(JPanel centerFromBottomPanel) {\n        this.paneCenterFromBottom = centerFromBottomPanel;\n    }\n\n    public JPanel getCenterFromBottomPanel() {\n        return paneCenterFromBottom;\n    }\n\n    public void setSouthFromTopPanel(JPanel southFromTopPanel) {\n        this.southFromTopPanel = southFromTopPanel;\n    }\n\n    public JPanel getSouthFromTopPanel() {\n        return southFromTopPanel;\n    }\n\n    public void setFrameControlImagePane(AImagePane frameControlImagePane) {\n        this.paneFrameControl = frameControlImagePane;\n    }\n\n    public AImagePane getFrameControlImagePane() {\n        return paneFrameControl;\n    }\n\n    public void setTopImagePane(AImagePane topImagePane) {\n        this.paneTop = topImagePane;\n    }\n\n    public AImagePane getTopPane() {\n        return paneTop;\n    }\n\n    public void setLogoImage(AImage logoImage) {\n        this.imgLogo = logoImage;\n    }\n\n    public AImage getLogoImage() {\n        return imgLogo;\n    }\n\n    public void setTitleLabel(JLabel aTitleLabel) {\n        this.lblTitle = aTitleLabel;\n    }\n\n    public JLabel getTitleLabel() {\n        return lblTitle;\n    }\n\n    public void setVi(ANuance vi) {\n        this.vi = vi;\n    }\n\n    public ANuance getVi() {\n        return vi;\n    }\n\n    public void setUserbarPanel(JPanel bottomCenter) {\n        this.paneBottomCenterContent = bottomCenter;\n    }\n\n    public JPanel getBottomContentPane() {\n        return paneBottomCenterContent;\n    }\n\n    public String getRevision() {\n        return revision;\n    }\n\n    public void setFrame(JFrame frame) {\n        this.frame = frame;\n    }\n\n    public JFrame getFrame() {\n        return frame;\n    }\n\n    public void setKeyIconImage(AImage keyIconImage) {\n        this.imgKeyIcon = keyIconImage;\n    }\n\n    public AImage getKeyIconImage() {\n        return imgKeyIcon;\n    }\n\n    public void setKeyActionLabel(JLabel keyActionLabel) {\n        this.lblKeyAction = keyActionLabel;\n    }\n\n    public JLabel getKeyActionLabel() {\n        return lblKeyAction;\n    }\n\n    public static void setTimeLabel(ATimeLabel timeLabel) {\n        AuroraCoreUI.lblTime = timeLabel;\n    }\n\n    public void setVersionLabel(JLabel versionLabel) {\n        this.lblVersion = versionLabel;\n    }\n\n    public JLabel getVersionLabel() {\n        return lblVersion;\n    }\n\n    public void setHeaderOfCenterFromBottomPanel(\n            JPanel headerOfCenterFromBottomPanel) {\n        this.paneHeaderOfCenterFromBottom = headerOfCenterFromBottomPanel;\n    }\n\n    public JPanel getHeaderOfCenterFromBottomPanel() {\n        return paneHeaderOfCenterFromBottom;\n    }\n\n    public void setKeyToPressPanel(JPanel keyToPressPanel) {\n        this.paneKeyToPress = keyToPressPanel;\n    }\n\n    public JPanel getKeyToPressPanel() {\n        return paneKeyToPress;\n    }\n\n    public void setScreenLabelPanel(JPanel screenLabelPanel) {\n        this.screenLabelPanel = screenLabelPanel;\n    }\n\n    public JPanel getScreenLabelPanel() {\n        return screenLabelPanel;\n    }\n\n    public void setVersionPanel(JPanel versionPanel) {\n        this.versionPanel = versionPanel;\n    }\n\n    public JPanel getVersionPanel() {\n        return versionPanel;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    public boolean isLargeScreen() {\n        return isLargeScreen;\n    }\n\n    public JButton getExitButton() {\n        return btnExit;\n    }\n\n    public JButton getMinimizeButton() {\n        return btnMinimize;\n    }\n\n    public static ATimeLabel getTimeLabel() {\n        return lblTime;\n    }\n\n    public JPanel getTitlePanel() {\n        return paneTitle;"],[0,"\n   "]],"start1":21548,"start2":21548,"length1":15337,"length2":16684}]],"length":38237,"saved":false}
