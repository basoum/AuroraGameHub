/*
 *  Made By Sardonix Creative.
 *
 * This work is licensed under the
 * Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
 * To view a copy of this license, visit
 *
 *      http://creativecommons.org/licenses/by-nc-nd/3.0/
 *
 * or send a letter to Creative Commons, 444 Castro Street, Suite 900,
 * Mountain View, California, 94041, USA.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package aurora.V1.core.screen_logic;

import aurora.V1.core.AuroraCoreUI;
import aurora.V1.core.Game;
import aurora.V1.core.GameFinder;
import aurora.V1.core.GameSearch;
import aurora.V1.core.GridSearch;
import aurora.V1.core.screen_handler.LibraryHandler;
import aurora.V1.core.screen_handler.LibraryHandler.GameLibraryKeyListener;
import aurora.V1.core.screen_ui.DashboardUI;
import aurora.V1.core.screen_ui.LibraryUI;
import aurora.engine.V1.Logic.AAnimate;
import aurora.engine.V1.Logic.AFileManager;
import aurora.engine.V1.Logic.ANuance;
import aurora.engine.V1.Logic.APostHandler;
import aurora.engine.V1.Logic.ASimpleDB;
import aurora.engine.V1.Logic.AThreadWorker;
import aurora.engine.V1.Logic.AuroraScreenHandler;
import aurora.engine.V1.Logic.AuroraScreenLogic;
import aurora.engine.V1.UI.AImage;
import aurora.engine.V1.UI.AImagePane;
import aurora.engine.V1.UI.ARadioButton;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.prefs.Preferences;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.apache.log4j.Logger;
import org.imgscalr.Scalr;

/**
 * .------------------------------------------------------------------------.
 * | LibraryLogic
 * .------------------------------------------------------------------------.
 * |
 * |
 * | This Class is the Logic component of the Library App. Its instanced
 * | In LibraryUI.
 * |
 * | This class is supposed to handle all of the Long Processing of UI or
 * | Actions generated by the Handler. Reusable processing and long logic
 * | methods should go here. It implements the AuroraScreenLogic interface.
 * |
 * .........................................................................
 *
 * @author Sammy Guergachi <sguergachi at gmail.com>
 * @author Carlos Machado <camachado@gmail.com>
 * <p/>
 */
public class LibraryLogic implements AuroraScreenLogic {

    /**
     * Library UI instance.
     */
    private final LibraryUI libraryUI;

    /**
     * Library Handler instance.
     */
    private LibraryHandler libraryHandler;

    /**
     * Core UI instance.
     */
    private final AuroraCoreUI coreUI;

    /**
     * Dashboard UI instance.
     */
    private final DashboardUI dashboardUI;

    /**
     * Boolean on whether the library even has a single favorite game in DB.
     */
    private boolean libHasFavourites;

    static final Logger logger = Logger.getLogger(LibraryLogic.class);

    private AAnimate addGameToLibButtonAnimator;

    private boolean isLoaded = false;

    private ASimpleDB coverDB;

    private GameSearch gameSearch_addUI;

    private GridSearch gridSearch;

    private GameSearch gameSearch_editUI;

    private GameSearch gameSearch_autoUI;

    private ArrayList<String> nameOfGames;

    private ArrayList<File> executableGamePath;

    private boolean isAutoLoadedOnce;

    public static boolean refreshAuto;

    private AThreadWorker findGames;

    private ArrayList<Game> autoGameList;

    private DefaultListModel autoGameModel;

    private boolean showAddButtonState;

    private AThreadWorker waitAndStartDownAnimation;

    private AThreadWorker waitAndStartUpAnimation;

    private DefaultListModel<Object> autoChecklistModel;

    private int autoAddHandlers = 0;

    /**
     * .-----------------------------------------------------------------------.
     * | LibraryLogic(LibraryUI)
     * .-----------------------------------------------------------------------.
     * |
     * | This is the Constructor of the Game Library Logic class.
     * |
     * | The LibraryUI is required to make adjustments to the UI from the
     * | logic.
     * |
     * | The games are loaded, added and overall managed through here.
     * |
     * | NOTE: for Logic to work you must use the set(HandlerDashboardHandler)
     * | method for the logic to be able to attach some handlers to UI
     * | elements
     * |
     * .........................................................................
     *
     * @param gamelibraryUi LibraryUI
     *
     */
    public LibraryLogic(final LibraryUI gamelibraryUi) {
        this.libraryUI = gamelibraryUi;
        this.coreUI = gamelibraryUi.getCoreUI();
        this.dashboardUI = gamelibraryUi.getDashboardUI();
    }

    @Override
    public final void setHandler(final AuroraScreenHandler handler) {

        this.libraryHandler = (LibraryHandler) handler;

    }

    /**
     * .-----------------------------------------------------------------------.
     * | setUpCoverDB()
     * .-----------------------------------------------------------------------.
     * |
     * | This method will start connection with CoverDB and will initialize
     * | gameSearch and gridSeach methods.
     * |
     * .........................................................................
     *
     * <p/>
     */
    public void setUpCoverDB() {
        //* Start Aurora Dabatase connection *//
        try {
            coverDB = new ASimpleDB("AuroraDB", "AuroraTable", false, System
                    .getProperty("user.home") + "//AuroraData//");
        } catch (SQLException ex) {
            logger.error(ex);
        }

        gridSearch = new GridSearch(libraryUI.getCoreUI(), libraryUI,
                                    libraryHandler);
        gameSearch_addUI = new GameSearch(libraryUI, coverDB,
                                          libraryUI.getStorage());
        gameSearch_editUI = new GameSearch(libraryUI, coverDB,
                                           libraryUI.getStorage());
        gameSearch_autoUI = new GameSearch(libraryUI, coverDB,
                                           libraryUI.getStorage());

    }

    public GameSearch getGameSearch_autoUI() {
        return gameSearch_autoUI;
    }

    public GameSearch getGameSearch_addUI() {
        return gameSearch_addUI;
    }

    public GridSearch getGridSearch() {
        return gridSearch;
    }

    public GameSearch getGameSearch_editUI() {
        return gameSearch_editUI;
    }

    /**
     * .-----------------------------------------------------------------------.
     * | addGamesToLibrary()
     * .-----------------------------------------------------------------------.
     * |
     * | This method will add all games found in the Aurora Storage to the
     * | Library UI.
     * |
     * | > It will add the games from favorite to non-favorite games.
     * | > It will generate new Grids along the way when it fills previous ones.
     * | > Every time the method is run, it clears all grids and re-adds them
     * | based on the 'organize' setting
     * |
     * .........................................................................
     *
     */
    public final void addGamesToLibrary() {
        try {

            //* check that favorite states are not null *//
            if (libraryUI.getStorage().getStoredLibrary().getFaveStates()
                != null) {
                libHasFavourites = true;
            }

            int librarySize = libraryUI.getStorage().getStoredLibrary()
                    .getNumberGames() - 1;

            ArrayList<Game> gamesList = new ArrayList<Game>();

            // Create Array of Games //
            for (int i = 0; i <= librarySize;
                    i++) {

                Game game;

                try {
                    Thread.sleep(20);
                } catch (InterruptedException ex) {
                    java.util.logging.Logger.getLogger(LibraryLogic.class
                            .getName())
                            .log(Level.SEVERE, null, ex);
                }

                if (!isLoaded) {

                    game = new Game(libraryUI.getGridSplit(), coreUI,
                                    dashboardUI, libraryUI.getStorage());
                    game.setGameName(libraryUI.getStorage()
                            .getStoredLibrary()
                            .getGameNames()
                            .get(i));
                    game.setCoverUrl(libraryUI.getStorage()
                            .getStoredLibrary()
                            .getBoxArtPath()
                            .get(i));

                    if (libHasFavourites) {
                        game.setFavorite(libraryUI.getStorage()
                                .getStoredLibrary()
                                .getFaveStates()
                                .get(i));
                    }

                    //* Handle appostrophese in game path *//
                    game.setGamePath(libraryUI.getStorage()
                            .getStoredLibrary()
                            .getGamePath()
                            .get(i).replace("'", "''"));

                    game.setCoverSize(libraryUI.getGameCoverWidth(),
                                      libraryUI
                            .getGameCoverHeight());
                } else {
                    game = libraryUI.getGridSplit().getGame(i);
                }

                gamesList.add(game);

            }

            // Clear grids to start
            libraryUI.getGridSplit().clearAllGrids();

            // Add Metadata to games from database if it exists //
            if (!isLoaded) {
                if (libraryUI.getStorage().getStoredProfile()
                        .getGameNames() != null) {
                    for (int i = 0; i < libraryUI.getStorage()
                            .getStoredProfile()
                            .getGameNames()
                            .size();
                            i++) {

                        String gameName = libraryUI.getStorage()
                                .getStoredProfile()
                                .getGameNames().get(i);

                        int a = 0;
                        Game game = null;
                        while (a < gamesList.size()) {
                            if (gamesList.get(a).getName().equals(gameName)) {
                                game = gamesList.get(a);
                                break;
                            }
                            a++;
                        }

                        if (game != null) {

                            game.setGameType(libraryUI.getStorage()
                                    .getStoredProfile()
                                    .getGameTypes().get(i));
                            game.setTotalTimePlayed(libraryUI.getStorage()
                                    .getStoredProfile()
                                    .getTotalTimes().get(i));
                            game.setOcurrencesPlayed(libraryUI.getStorage()
                                    .getStoredProfile()
                                    .getOccurrenceTimes().get(i));
                            game.setLastPlayed(libraryUI.getStorage()
                                    .getStoredProfile()
                                    .getLastTimes().get(i));

                            logger.info("ProfileDB Game Name:" + game
                                    .getGameName());
                            logger.info("ProfileDB Game Type:" + game
                                    .getGameType());
                            logger.info("ProfileDB Last Played:" + game
                                    .getLastPlayed());
                            logger.info("ProfileDB Occurences:" + game
                                    .getOccurencesPlayed());
                            logger.info("ProfileDB Total Time:" + game
                                    .getTotalTimePlayed());

                        }
                    }

                }
            }

            // Get current Organize Setting value
            String organize = libraryUI.getStorage().getStoredSettings()
                    .getSettingValue(
                            "organize");

            if (organize == null) {
                organize = "favorite";
                libraryUI.getStorage().getStoredSettings().saveSetting(organize,
                                                                       "favorite");
            }

            // Check if Organization Type is "Favorite" //
            if (organize.equalsIgnoreCase("Favorite")) {
                if (!libraryUI.getImgOrganizeType().getImgURl().equals(
                        "library_favourites.png")) {
                    libraryUI.getImgOrganizeType().setImgURl(
                            "library_favourites.png");
                }

                //* Reverse Add Games Marked Fav first *//
                for (int i = librarySize; i >= 0;
                        i--) {

                    if (libHasFavourites && gamesList.get(i).isFavorite()) {

                        libraryUI.getGridSplit().addGame(gamesList.get(i));
                    }
                }

                //* Add Non-Fav games after *//
                for (int i = 0; i <= librarySize;
                        i++) {

                    if (!libHasFavourites || !gamesList.get(i).isFavorite()) {

                        libraryUI.getGridSplit().addGame(gamesList.get(i));
                    }

                }

                // Organize according to Alphabetic Game Name //
            } else if (organize.equalsIgnoreCase("Alphabetic")) {

                libraryUI.getImgOrganizeType().setImgURl(
                        "library_alphabetic.png");

                String[] alphaArray = new String[gamesList.size()];

                // Transfer name to pre sorted array
                for (int i = librarySize; i >= 0;
                        i--) {

                    alphaArray[i] = gamesList.get(i).getName();
                }

                Arrays.sort(alphaArray);

                for (int i = 0; i <= librarySize;
                        i++) {

                    int h = 0;
                    while (!gamesList.get(h).getName().equals(alphaArray[i])) {
                        h++;
                    }
                    libraryUI.getGridSplit().addGame(gamesList.get(h));
                    gamesList.remove(h); // remove to speed up
                }

                gamesList = null;
                alphaArray = null;

                // Organize according to Time Played //
            } else if (organize.equalsIgnoreCase("Most Played")) {

                libraryUI.getImgOrganizeType().setImgURl(
                        "library_mostplayed.png");

                ArrayList<Game> timeList = new ArrayList<Game>();
                for (int i = 0; i <= librarySize;
                        i++) {
                    if (gamesList.get(i)
                            .getTotalTimePlayed() != null) {
                        timeList.add(gamesList.get(i));
                    } else {
                        gamesList.get(i).setTotalTimePlayed("00:00");
                        timeList.add(gamesList.get(i));
                    }
                }

                Collections.sort(timeList, new Comparator<Game>() {
                    private int time;

                    @Override
                    public int compare(Game g1, Game g2) {
                        SimpleDateFormat format = new SimpleDateFormat("HH:mm");

                        try {

                            time = format.parse(g2.getTotalTimePlayed())
                                    .compareTo(format.parse(g1
                                                    .getTotalTimePlayed()));

                        } catch (ParseException ex) {
                            java.util.logging.Logger.getLogger(
                                    LibraryLogic.class.getName()).
                                    log(Level.SEVERE, null, ex);
                        }

                        return time;

                    }
                });

                for (int i = 0; i <= librarySize;
                        i++) {
                    libraryUI.getGridSplit().addGame(timeList.get(i));
                }

            }

            libraryUI.getGridSplit()
                    .finalizeGrid(libraryHandler.new ShowAddGameUiHandler(),
                                  libraryUI
                            .getGameCoverWidth(), libraryUI.getGameCoverHeight());

            //Load First Grid by default
            loadGames(0);

            AThreadWorker garbage = new AThreadWorker(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    System.gc();
                    libraryUI.getGamesContainer().repaint();
                    libraryUI.getGamesContainer().validate();
                }
            });

            garbage.startOnce();

        } catch (MalformedURLException ex) {
            logger.error(ex);
        }
    }

    /**
     * .-----------------------------------------------------------------------.
     * | loadGames(int currentGridIndex)
     * .-----------------------------------------------------------------------.
     * |
     * | This method is where the Library loads the first and sometimes the
     * | second grid of games.
     * |
     * .........................................................................
     *
     * @throws MalformedURLException Exception
     */
    public final void loadGames(final int currentGridIndex) throws
            MalformedURLException {

        if (logger.isDebugEnabled()) {
            logger.debug("Loading Games");
        }

        int currentGrid = currentGridIndex;
        if (currentGrid < 0) {
            currentGrid = 0;
        }

        if (logger.isDebugEnabled()) {
            logger.debug("current panel: " + currentGrid);
        }

        //Load First Panels
        libraryUI.setIsGameLibraryKeyListenerAdded(false);
        for (int i = 0; i < libraryUI.getGridSplit().getGrid(currentGrid)
                .getArray().size();
                i++) {
            Game game = new Game(libraryUI.getGridSplit(), coreUI, dashboardUI);
            try {
                game = (Game) libraryUI.getGridSplit().getGrid(currentGrid)
                        .getArray().get(i);
                game.addKeyListener(libraryHandler.new SearchRefocusListener());
                if (game.getLibraryLogic() == null) {
                    game.setLibraryLogic(this);
                }

                for (int j = 0; j < game.getKeyListeners().length; j++) {
                    if (game.getKeyListeners()[j] instanceof GameLibraryKeyListener) {
                        libraryUI.setIsGameLibraryKeyListenerAdded(true);
                        break;
                    }
                }

                if (!libraryUI.IsGameLibraryKeyListenerAdded()) {
                    if (logger.isDebugEnabled()) {
                        logger.debug("ADDING GAMELIBRARYLISTENER TO " + game
                                .getName());
                    }

                    game.addKeyListener(
                            libraryHandler.new GameLibraryKeyListener());
                }

                if (!game.isLoaded()) {
                    game.update();

                    if (logger.isDebugEnabled()) {
                        logger.debug("loading: " + game.getGameName());
                    }

                }

                game.setSettingsListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {

                        libraryUI.showEditGameUI((Game) e.getSource());

                    }
                });
            } catch (RuntimeException ex) {
                logger.error(ex);
            }
        }

        libraryUI.setIsGameLibraryKeyListenerAdded(false);

        //Load Second Panel if exists -- SMART LOAD
        if (currentGrid < libraryUI.getGridSplit().getArray().size() - 1) {
            for (int i = 0; i < libraryUI.getGridSplit().getGrid(currentGrid
                                                                 + 1).getArray()
                    .size(); i++) {
                Game game = new Game(libraryUI.getGridSplit(), coreUI,
                                     dashboardUI);
                try {
                    game = (Game) libraryUI.getGridSplit().getGrid(currentGrid
                                                                   + 1)
                            .getArray()
                            .get(i);

                    for (int j = 0; j < game.getKeyListeners().length; j++) {
                        if (game.getKeyListeners()[j] instanceof GameLibraryKeyListener) {
                            libraryUI.setIsGameLibraryKeyListenerAdded(true);
                            break;
                        }
                    }

                    if (!libraryUI.IsGameLibraryKeyListenerAdded()) {
                        if (logger.isDebugEnabled()) {
                            logger.debug("ADDING GAMELIBRARYLISTENER TO" + game
                                    .getName());
                        }

                        game.addKeyListener(
                                libraryHandler.new GameLibraryKeyListener());
                    }

                    if (!game.isLoaded()) {
                        game.update();
                        if (logger.isDebugEnabled()) {
                            logger.debug("Secondary loading: " + game.getName());
                        }

                    }
                } catch (RuntimeException ex) {
                    logger.error(ex);
                }

            }
        }

        isLoaded = true;

    }

    /**
     * .-----------------------------------------------------------------------.
     * | checkAutoAddGameStatus()
     * .-----------------------------------------------------------------------.
     * |
     * | This method checks if Auto Add Status is green meaning we can add games
     * |
     * .........................................................................
     *
     * @throws MalformedURLException Exception
     */
    public void checkAutoAddGameStatus() {

        if (nameOfGames != null) {

            boolean canAutoAdd = false;
            for (int i = 0; i < libraryUI
                    .getModelCheckList().getSize(); i++) {

                if (((ARadioButton) ((AImagePane) libraryUI
                        .getModelCheckList().get(i))
                        .getComponent(0)).isSelected) {
                    canAutoAdd = true;
                    break;
                } else {
                    canAutoAdd = false;
                }

            }

            if (canAutoAdd) {
                libraryUI.getImgAutoStatus().setImgURl("addUI_badge_valid.png");
                //Animate the Button below Add Game UI//
                animateAddButtonDown();
            } else {
                libraryUI.getImgAutoStatus()
                        .setImgURl("addUI_badge_invalid.png");

                //Animate up and hide it//
                animateAddButtonUp();
            }

        }

    }

    /**
     * .-----------------------------------------------------------------------.
     * | checkManualAddGameStatus()
     * .-----------------------------------------------------------------------.
     * |
     * | This method checks if both Add Game UI badges are Green meaning
     * | user is able to add game to the library.
     * |
     * .........................................................................
     *
     * @throws MalformedURLException Exception
     */
    public void checkManualAddGameStatus() {

        if (libraryUI.getStatusBadge1().getImgURl().equals(
                "addUI_badge_valid.png")
            && libraryUI.getStatusBadge2()
                .getImgURl().equals("addUI_badge_valid.png") && !libraryUI
                .getAddGameToLibButton().isVisible()) {

            //Animate the Button below Add Game UI//
            animateAddButtonDown();

        } else if ((libraryUI.getStatusBadge1().getImgURl().equals(
                "addUI_badge_invalid.png")
                    || libraryUI.getStatusBadge2()
                .getImgURl().equals("addUI_badge_invalid.png"))
                   && libraryUI.getAddGameToLibButton().isVisible()) {

            //Animate up and hide it//
            animateAddButtonUp();
        }

    }

    /**
     * Animates the Add Game To Library Button to a visible state
     */
    public void animateAddButtonDown() {

        showAddButtonState = true;

        // Initialize
        if (addGameToLibButtonAnimator == null) {
            addGameToLibButtonAnimator = new AAnimate(libraryUI
                    .getAddGameToLibButton());

        }

        // -
        // If is already animating, wait for prev animation to stop
        // to start this new one.
        // -
        if (waitAndStartDownAnimation == null) {
            waitAndStartDownAnimation = new AThreadWorker(
                    new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent e) {
                            while (addGameToLibButtonAnimator.isAnimating()) {

                                try {
                                    Thread.sleep(100);
                                } catch (InterruptedException ex) {
                                    java.util.logging.Logger.getLogger(
                                            LibraryLogic.class.getName())
                                    .log(Level.SEVERE, null, ex);
                                }

                            }
                            if (showAddButtonState && !libraryUI
                            .getAddGameToLibButton().isVisible()) {

                                libraryUI.getAddGameToLibButton()
                                .setVisible(true);

                                addGameToLibButtonAnimator
                                .setInitialLocation(
                                        (coreUI
                                        .getFrame()
                                        .getWidth() / 2) - libraryUI
                                        .getAddGameToLibButton()
                                        .getWidth() / 2, libraryUI
                                        .getAddGamePane()
                                        .getImgIcon()
                                        .getIconHeight() - 180);

                                addGameToLibButtonAnimator.moveVertical(
                                        libraryUI
                                        .getAddGamePane()
                                        .getImgIcon()
                                        .getIconHeight() - 55, 22);

                                addGameToLibButtonAnimator
                                .removeAllListeners();
                            }

                            waitAndStartDownAnimation.stop();
                        }
                    });
            waitAndStartDownAnimation.startOnce();
        } else {
            // Check to see if thread is already in progress
            if (waitAndStartDownAnimation.isStopped()) {
                waitAndStartDownAnimation.startOnce();
            }
        }
    }

    /**
     * Animates the Add Game To Library Button to hide behind the AddGamePane
     */
    public void animateAddButtonUp() {

        showAddButtonState = false;

        // Initialize
        if (addGameToLibButtonAnimator == null) {
            addGameToLibButtonAnimator = new AAnimate(libraryUI
                    .getAddGameToLibButton());
        }

        // -
        // If is already animating, wait for prev animation to stop
        // to start this new one.
        // -
        if (waitAndStartUpAnimation == null) {
            waitAndStartUpAnimation = new AThreadWorker(
                    new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent e) {
                            while (addGameToLibButtonAnimator.isAnimating()) {

                                try {
                                    Thread.sleep(100);
                                } catch (InterruptedException ex) {
                                    java.util.logging.Logger.getLogger(
                                            LibraryLogic.class.getName())
                                    .log(Level.SEVERE, null, ex);
                                }

                            }
                            if (!showAddButtonState && libraryUI
                            .getAddGameToLibButton().isVisible()) {
                                addGameToLibButtonAnimator.setInitialLocation(
                                        libraryUI
                                        .getAddGameToLibButton().getX(),
                                        libraryUI
                                        .getAddGameToLibButton().getY());

                                addGameToLibButtonAnimator
                                .addPostAnimationListener(new APostHandler() {
                                    @Override
                                    public void postAction() {
                                        libraryUI.getAddGameToLibButton()
                                        .setVisible(false);
                                        addGameToLibButtonAnimator
                                        .removeAllListeners();
                                    }
                                });

                                addGameToLibButtonAnimator.moveVertical(-1, 26);
                            }

                            waitAndStartUpAnimation.stop();
                        }

                    });

            waitAndStartUpAnimation.startOnce();
        } else {

            // Check to see if thread is already in progress
            if (waitAndStartUpAnimation.isStopped()) {
                waitAndStartUpAnimation.startOnce();
            }
        }
    }

    private File steamFile = null;

    /**
     * .-----------------------------------------------------------------------.
     * | fetchSteamDirOnWindows()
     * .-----------------------------------------------------------------------.
     * |
     * | This method looks through the Windows registry to find the Steam game
     * | Directory
     * |
     * .........................................................................
     *
     */
    public File fetchSteamDirOnWindows() {
        final int HKEY_CURRENT_USER = 0x80000001;
        final int KEY_QUERY_VALUE = 1;
        final int KEY_SET_VALUE = 2;
        final int KEY_READ = 0x20019;

        final Preferences userRoot = Preferences.userRoot();
        final Preferences systemRoot = Preferences.systemRoot();
        final Class clz = userRoot.getClass();

        try {
            final Method openKey = clz.getDeclaredMethod("openKey",
                                                         byte[].class, int.class,
                                                         int.class);
            openKey.setAccessible(true);

            final Method closeKey = clz
                    .getDeclaredMethod("closeKey",
                                       int.class);
            closeKey.setAccessible(true);

            final Method winRegQueryValue = clz.getDeclaredMethod(
                    "WindowsRegQueryValueEx", int.class,
                    byte[].class);
            winRegQueryValue.setAccessible(true);
            final Method winRegEnumValue = clz.getDeclaredMethod(
                    "WindowsRegEnumValue1", int.class, int.class,
                    int.class);
            winRegEnumValue.setAccessible(true);
            final Method winRegQueryInfo = clz.getDeclaredMethod(
                    "WindowsRegQueryInfoKey1", int.class);
            winRegQueryInfo.setAccessible(true);

            byte[] valb = null;
            String vals = null;
            String key = null;
            Integer handle = -1;

            // Query for steam path
            key = "Software\\Classes\\steam\\Shell\\Open\\Command";
            handle = (Integer) openKey.invoke(systemRoot,
                                              toCstr(key),
                                              KEY_READ, KEY_READ);
            valb = (byte[]) winRegQueryValue.invoke(systemRoot,
                                                    handle,
                                                    toCstr(""));
            vals = (valb != null ? new String(valb).trim() : null);
            closeKey.invoke(Preferences.systemRoot(), handle);

            int steamExeIndex = vals.indexOf("steam.exe");
            if (steamExeIndex > 0) {
                String steamPath = vals.substring(1, steamExeIndex);
                steamPath = steamPath + "\\steamapps\\common";
                steamFile = new File(steamPath);

            }
        } catch (Exception ex) {
            logger.error(ex);
        }

        return steamFile;

    }

    private byte[] toCstr(String str) {
        byte[] result = new byte[str.length() + 1];
        for (int i = 0; i < str.length(); i++) {
            result[i] = (byte) str.charAt(i);
        }
        result[str.length()] = 0;
        return result;
    }
    /**
     * .-----------------------------------------------------------------------.
     * | autoFindGames()
     * .-----------------------------------------------------------------------.
     * |
     * | searches Windows computers for games on local drive using GameFinder
     * |
     * .........................................................................
     *
     */
    private boolean selected = false;

    private ArrayList<Game> autoAddCurrentList;

    public void autoFindGames() {

        this.autoGameModel = libraryUI.getListModel_autoUI();
        this.autoChecklistModel = libraryUI
                .getModelCheckList();

        autoAddCurrentList = new ArrayList<>();

        findGames = new AThreadWorker(new ActionListener() {
            private ArrayList<String> gameImageNames;

            @Override
            public void actionPerformed(ActionEvent e) {
                if (!isAutoLoadedOnce || refreshAuto) {

                    // -
                    // Automatically load the first time only, every other time
                    // must be manual
                    // -
                    isAutoLoadedOnce = true;
                    refreshAuto = false;
                    autoAddHandlers++;

                    autoGameList = new ArrayList<>();

                    // Change lower library status text and add progress wheel
                    String previousLibraryStatus = LibraryUI.lblLibraryStatus
                            .getCurrentText();
                    LibraryUI.lblLibraryStatus.setForeground(Color.CYAN);
                    LibraryUI.lblLibraryStatus.setText(coreUI.getVi().VI(
                            ANuance.inx_Searching) + " For Games");
                    libraryUI.getPrgLibraryStatus().resume();

                    // Change refresh button to static state
                    libraryUI.getBtnAutoRefresh().setButtonStates(
                            "autoUI_btnRefreshing.png",
                            "autoUI_btnRefreshing.png",
                            "autoUI_btnRefreshing.png");

                    nameOfGames = null;
                    executableGamePath = null;

                    gameSearch_autoUI.resetCover();

                    autoChecklistModel.removeAllElements();
                    autoGameModel.removeAllElements();

                    nameOfGames = GameFinder.getNameOfGamesOnDrive();
                    executableGamePath = GameFinder.getExecutablePathsOnDrive(
                            nameOfGames);
                    gameImageNames = new ArrayList<String>();
                    // Remove null in name of games and executable lists
                    int count = 0;
                    while (count < executableGamePath.size()) {
                        if (executableGamePath.get(count) == null) {
                            nameOfGames.remove(count);
                            executableGamePath.remove(count);
                            count--;
                        }
                        count++;
                    }

                    // Search whether name can be modified to correct one
                    for (int f = 0; f < nameOfGames.size(); f++) {
                        // Check for duplicates
                        if (!libraryUI.getStorage().getStoredLibrary()
                                .getGameNames().contains(nameOfGames.get(f))) {
                            String[] array = gameSearch_autoUI
                                    .searchSimilarGame(
                                            nameOfGames
                                            .get(f));
                            if (!libraryUI.getStorage().getStoredLibrary()
                                    .getGameNames().contains(array[0])) {
                                if (array != null) {
                                    nameOfGames.set(f, array[0]);
                                    gameImageNames.add(array[1]);
                                } else {
                                    gameImageNames.add(null);
                                }
                            } else {
                                nameOfGames.remove(f);
                                executableGamePath.remove(f);
                                f--;
                            }
                        } else {
                            nameOfGames.remove(f);
                            executableGamePath.remove(f);
                            f--;
                        }

                    }

                    // Add games to list in Auto UI
                    for (int i = 0; i < nameOfGames.size(); i++) {

                        // Create Check Box UI
                        final AImagePane radioPanel = new AImagePane(
                                "autoUI_checkBG_norm.png", new FlowLayout(
                                        FlowLayout.CENTER));
                        radioPanel.setPreferredSize(new Dimension(radioPanel
                                .getRealImageWidth(), radioPanel
                                .getRealImageHeight()));
                        radioPanel.setBorder(null);

                        final ARadioButton radioButton = new ARadioButton(
                                "autoUI_check_inactive.png",
                                "autoUI_check_active.png");
                        radioButton.setBorder(null);
                        radioPanel.add(radioButton);

                        JPanel pnlListElement = new JPanel(new FlowLayout(
                                FlowLayout.LEFT, 5, 0));

                        AImagePane imgStatusIcon = new AImagePane(
                                "autoUI_unavailableIcon.png");
                        imgStatusIcon.setPreferredSize(new Dimension(
                                imgStatusIcon.getRealImageWidth(),
                                imgStatusIcon.getRealImageHeight()));

                        // Try and find a search
                        // TODO prevent duplicate
                        if (gameSearch_autoUI == null) {
                            pnlListElement.add(imgStatusIcon);
                        }

                        // Create labels containing name of games
                        JLabel lblGameName = new JLabel(nameOfGames
                                .get(i));

                        pnlListElement.add(lblGameName);

                        Game game = new Game(libraryUI.getGridSplit(),
                                             coreUI, dashboardUI, libraryUI
                                .getStorage());

                        game.setGameName(nameOfGames
                                .get(i));
                        game.setGamePath(executableGamePath.get(i)
                                .getPath());
                        try {
                            String imgURL;
                            AImagePane searchedGame;

                            if (gameImageNames.get(i) != null) {
                                searchedGame = gameSearch_autoUI
                                        .getSpecificGame(gameImageNames.get(
                                                        i));
                            } else {
                                searchedGame = gameSearch_autoUI
                                        .searchSpecificGame(game.getName());
                            }

                            if ((searchedGame) instanceof Game) {
                                imgURL = ((Game) searchedGame)
                                        .getBoxArtUrl();
                            } else {
                                imgURL = searchedGame.getImageURL();
                            }

                            game.setCoverUrl(imgURL);
                        } catch (MalformedURLException ex) {
                            java.util.logging.Logger.getLogger(
                                    LibraryLogic.class.getName()).
                                    log(Level.SEVERE, null, ex);
                        }

                        // Add Game to list of games added in Auto Games
                        autoGameList.add(game);

                        // Add Check box and Game name
                        autoChecklistModel.addElement(radioPanel);
                        autoGameModel.addElement(pnlListElement);

                        try {
                            Thread.sleep(50);
                        } catch (InterruptedException ex) {
                            java.util.logging.Logger.getLogger(
                                    LibraryLogic.class.getName())
                                    .log(Level.SEVERE, null, ex);
                        }

                    }

                    if (autoAddHandlers == 1) {
                        libraryUI.getPnlCheckList().addMouseListener(
                                new MouseAdapter() {

                                    @Override
                                    public void mousePressed(MouseEvent e) {

                                        // Verify that the click occured on the selected cell
                                        final int index = libraryUI
                                        .getPnlCheckList()
                                        .locationToIndex(e.getPoint());

                                        if (((ARadioButton) ((AImagePane) autoChecklistModel
                                        .get(index))
                                        .getComponent(0)).isSelected) {

                                            selected = true;

                                            // Uncheck the game in list
                                            ((ARadioButton) ((AImagePane) autoChecklistModel
                                            .get(index))
                                            .getComponent(0))
                                            .setUnSelected();

                                            // -
                                            // Remove from current selected
                                            // games to add if not in current list
                                            // -
                                            if (autoAddCurrentList.contains(
                                                    autoGameList
                                                    .get(index))) {
                                                autoAddCurrentList.remove(
                                                        autoGameList
                                                        .get(index));
                                            }
                                        } else {

                                            selected = false;

                                            // Check the game in list
                                            ((ARadioButton) ((AImagePane) autoChecklistModel
                                            .get(index))
                                            .getComponent(0)).setSelected();

                                            // -
                                            // Add to current selected
                                            // games to add if not in current list
                                            // -
                                            autoAddCurrentList.add(autoGameList
                                                    .get(index));

                                        }

                                        checkAutoAddGameStatus();

                                        libraryUI.getPnlCheckList().revalidate();
                                        libraryUI.getPnlCheckList().repaint();

                                    }
                                });

                        libraryUI.getPnlCheckList().addMouseMotionListener(
                                new MouseMotionListener() {
                                    @Override
                                    public void mouseDragged(MouseEvent e) {

                                        // Verify that the click occured on the selected cell
                                        final int index = libraryUI
                                        .getPnlCheckList()
                                        .locationToIndex(e.getPoint());

                                        if (selected) { // Unselect

                                            ((ARadioButton) ((AImagePane) autoChecklistModel
                                            .get(index))
                                            .getComponent(0))
                                            .setUnSelected();

                                            // -
                                            // Remove from current selected
                                            // games to add if not in current list
                                            // -
                                            if (autoAddCurrentList.contains(
                                                    autoGameList
                                                    .get(index))) {
                                                autoAddCurrentList.remove(
                                                        autoGameList
                                                        .get(index));
                                            }

                                        } else { // Select

                                            ((ARadioButton) ((AImagePane) autoChecklistModel
                                            .get(index))
                                            .getComponent(0)).setSelected();

                                            // -
                                            // Add to current selected
                                            // games to add if not in current list
                                            // -
                                            if (!autoAddCurrentList.contains(
                                                    autoGameList
                                                    .get(index))) {
                                                autoAddCurrentList.add(
                                                        autoGameList
                                                        .get(index));
                                            }
                                        }

                                        checkAutoAddGameStatus();

                                        libraryUI.getPnlCheckList().revalidate();
                                        libraryUI.getPnlCheckList().repaint();

                                    }

                                    @Override
                                    public void mouseMoved(MouseEvent e) {
                                    }
                                });

                    }

                    libraryUI.getGameList_autoUI().setSelectedIndex(0);

                    libraryUI.getBtnAutoRefresh().setButtonStates(
                            "autoUI_btnRefresh_norm.png",
                            "autoUI_btnRefresh_down.png",
                            "autoUI_btnRefresh_over.png");

                    // After adding display completion in green
                    LibraryUI.lblLibraryStatus.setForeground(Color.GREEN);
                    LibraryUI.lblLibraryStatus.setText("Finished");

                    libraryUI.getPrgLibraryStatus().stop();

                    try {
                        Thread.sleep(1500);
                    } catch (InterruptedException ex) {
                        java.util.logging.Logger.getLogger(LibraryLogic.class
                                .getName()).
                                log(Level.SEVERE, null, ex);
                    }

                    // Show default message after 1.5 seconds
                    LibraryUI.lblLibraryStatus.setForeground(Color.LIGHT_GRAY);
                    LibraryUI.lblLibraryStatus.setText(previousLibraryStatus);
                }
            }
        });

        findGames.startOnce();
    }

    /**
     * Manually refresh the auto search for games
     * checks if its currently running or if threadworker hasnt been initialized
     * <p>
     * @return
     */
    public boolean refreshAutoAdd() {
        refreshAuto = true;
        if (findGames != null && findGames.isStopped()) {
            findGames.startOnce();
            return true;
        } else {
            return false;
        }
    }

    public AThreadWorker getFindGames() {
        return findGames;
    }

    public void setNeedAutoAddRefresh(Boolean needRefresh) {
        this.refreshAuto = needRefresh;
    }

    public void autoSelectAll() {

        AThreadWorker select;
        select = new AThreadWorker(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (libraryUI
                        .getModelCheckList() != null) {
                    for (int i = 0; i < libraryUI
                            .getModelCheckList().getSize(); i++) {
                        ((ARadioButton) ((AImagePane) libraryUI
                                .getModelCheckList().get(i))
                                .getComponent(0)).setSelected();

                        libraryUI.getPnlCheckList().revalidate();
                        libraryUI.getPnlCheckList().repaint();

                        try {
                            Thread.sleep(20);

                        } catch (InterruptedException ex) {
                            java.util.logging.Logger.getLogger(
                                    LibraryLogic.class
                                    .getName()).
                                    log(Level.SEVERE, null, ex);
                        }
                    }

                    autoAddCurrentList.removeAll(autoAddCurrentList);
                    autoAddCurrentList.addAll(autoGameList);
                }
                checkAutoAddGameStatus();

                libraryUI.getPnlCheckList().revalidate();
                libraryUI.getPnlCheckList().repaint();

            }
        });

        select.startOnce();

    }

    public void autoClearAll() {

        AThreadWorker clear = new AThreadWorker(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (libraryUI
                        .getModelCheckList() != null) {
                    for (int i = 0; i < libraryUI
                            .getModelCheckList().getSize(); i++) {
                        ((ARadioButton) ((AImagePane) libraryUI
                                .getModelCheckList().get(i))
                                .getComponent(0)).setUnSelected();

                        libraryUI.getPnlCheckList().revalidate();
                        libraryUI.getPnlCheckList().repaint();

                        try {
                            Thread.sleep(20);

                        } catch (InterruptedException ex) {
                            java.util.logging.Logger.getLogger(
                                    LibraryLogic.class
                                    .getName()).
                                    log(Level.SEVERE, null, ex);
                        }
                    }
                }

                autoAddCurrentList.removeAll(autoAddCurrentList);
                checkAutoAddGameStatus();

                libraryUI.getPnlCheckList().revalidate();
                libraryUI.getPnlCheckList().repaint();

            }
        });

        clear.startOnce();
    }

    /**
     * Shows the OS explorer window and attempts to show desktop on Windows
     * in order to set up environment to allow for
     */
    public void setupDesktopEnvironmentForCoverArtEdit() {

        // Minimizes all and shows Desktop on Windows
        if (coreUI.getOS().contains("Windows")) {
            try {
                String loc = "\"" + System.getenv("APPDATA")
                             + "\\Microsoft\\Internet Explorer\\Quick Launch\\Shows Desktop.lnk"
                             + "\"";
                Runtime.getRuntime().exec(
                        new String[]{
                            "cmd.exe",
                            "/c", loc
                        });
            } catch (IOException ex) {
                java.util.logging.Logger.getLogger(LibraryLogic.class.getName())
                        .log(Level.SEVERE, null, ex);
            }
        }

        // Show File Explorer
        File file = new File(System.getProperty("user.home"));
        Desktop desktop = Desktop.getDesktop();
        try {
            desktop.open(file);
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(LibraryLogic.class.getName())
                    .log(Level.SEVERE, null, ex);
        }

    }

    /**
     * Saves image file and scales it to fit game covers.
     * <p>
     * @param file
     *             <p>
     * @return
     */
    private int SCALE_WIDTH_PARAM = 398;

    private int SCALE_HEIGHT_PARAM = 498;

    public AImagePane processNewCoverArtImage(File file) {

        // Check if image is already available
        AFileManager fileIO = dashboardUI.getStartUI().getFileIO();
        Boolean loadedImage = true;
        String fileName = file.getName();
        AImagePane currentImagePane = new AImagePane();
        try {
            ImageIcon img = fileIO.findImg("Game Data",
                                           fileName);
            currentImagePane.setImage(img, img.getIconHeight(),
                                      img.getIconWidth());

        } catch (Exception ex) {
            loadedImage = false;
        }

        if (!loadedImage) {
            // Resize and Save image
            BufferedImage img;
            try {
                img = ImageIO.read(file);
                BufferedImage scaledImg = Scalr
                        .resize(img, Scalr.Method.QUALITY, Scalr.Mode.FIT_EXACT,
                                SCALE_WIDTH_PARAM, SCALE_HEIGHT_PARAM,
                                Scalr.OP_ANTIALIAS);
                int width = 62;
                int height = 14;
                BufferedImage newImage = new BufferedImage(scaledImg.getWidth()
                                                           + 2 * width,
                                                           scaledImg.getHeight()
                                                           + (2 * height),
                                                           BufferedImage.TYPE_INT_ARGB);

                Graphics g = newImage.getGraphics();

                g.setColor(new Color(0, 0, 0, 0));
                g.fillRect(0, 0, scaledImg.getWidth() + (2 * width), scaledImg
                        .getHeight() + (2 * height));
                g.drawImage(scaledImg, width + 2, height - 2, null);
                g.dispose();

                currentImagePane.setImage(new ImageIcon(newImage),
                                          SCALE_HEIGHT_PARAM,
                                          SCALE_WIDTH_PARAM);

                fileIO.writeImage(currentImagePane, fileName, "Game Data");

            } catch (IOException ex) {
                java.util.logging.Logger.getLogger(LibraryLogic.class.getName())
                        .log(Level.SEVERE, null, ex);
            }
        }

        if (currentImagePane != null) {
            currentImagePane.setPreferredSize(new Dimension(currentImagePane
                    .getRealImageHeight(), currentImagePane
                    .getRealImageWidth()));
            currentImagePane.setImageFileName(fileName);
        }

        return currentImagePane;

    }

    public void flashInvalidStatus(final AImage status) {

        AThreadWorker worker = new AThreadWorker(new ActionListener() {
            private int count;

            @Override
            public void actionPerformed(ActionEvent e) {
                while (count < 6) {

                    if (count % 2 == 0) {
                        status.setImgURl("addUI_badge_invalid_noglow.png");
                    } else {
                        status.setImgURl("addUI_badge_invalid.png");
                    }

                    count++;
                    try {
                        Thread.sleep(200);
                    } catch (InterruptedException ex) {
                        java.util.logging.Logger.getLogger(LibraryLogic.class
                                .getName())
                                .log(Level.SEVERE, null, ex);
                    }
                }

            }
        });

        worker.startOnce();

    }

    public void editCover(Game editingGame, String newGameName) {
        try {

            editingGame.setCoverUrl(newGameName);
            editingGame.refresh(false);
            editingGame.disableEditCoverOverlay();
            libraryUI.getStatusBadge1().setImgURl("addUI_badge_valid.png");
            libraryUI.getImgGameCoverStatus().setImgURl("addUI_badge_valid.png");


            if(libraryUI.isAddGameUI_Visible()){
                gameSearch_addUI.disableSearch();
            }else if(libraryUI.isEditGameUI_Visible()){
                gameSearch_editUI.disableSearch();
            }


        } catch (MalformedURLException ex) {
            java.util.logging.Logger.getLogger(LibraryLogic.class.getName())
                    .log(Level.SEVERE, null, ex);
        }

    }

    public void disableGameSearch(GameSearch search){

    }

    public ArrayList<Game> getAutoAddCurrentList() {
        return autoAddCurrentList;
    }

    public AAnimate getAddGameToLibButtonAnimator() {
        return addGameToLibButtonAnimator;
    }

    public DefaultListModel getAutoGameModel() {
        return autoGameModel;
    }

    public ArrayList<Game> getAutoGameList() {
        return autoGameList;
    }

    public boolean isIsAutoLoadedOnce() {
        return isAutoLoadedOnce;
    }

}
