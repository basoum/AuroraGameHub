{"ts":1355499141409,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright 2012 Sardonix Creative.\n *\n * This work is licensed under the\n * Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.\n * To view a copy of this license, visit\n *\n *      http://creativecommons.org/licenses/by-nc-nd/3.0/\n *\n * or send a letter to Creative Commons, 444 Castro Street, Suite 900,\n * Mountain View, California, 94041, USA.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage aurora.V1.core.screen_logic;\n\nimport aurora.V1.core.AuroraCoreUI;\nimport aurora.V1.core.Game;\nimport aurora.V1.core.screen_handler.GameLibraryHandler;\nimport aurora.V1.core.screen_handler.GameLibraryHandler.GameLibraryKeyListener;\nimport aurora.V1.core.screen_ui.DashboardUI;\nimport aurora.V1.core.screen_ui.GameLibraryUI;\nimport aurora.engine.V1.Logic.APostHandler;\nimport aurora.engine.V1.Logic.AuroraScreenHandler;\nimport aurora.engine.V1.Logic.AuroraScreenLogic;\nimport java.net.MalformedURLException;\n\n/**\n * .------------------------------------------------------------------------.\n * | GameLibraryLogic\n * .------------------------------------------------------------------------.\n * |\n * |\n * | This Class is the Logic component of the Library App. Its instanced\n * | In GameLibraryUI.\n * |\n * | This class is supposed to handle all of the Long Processing of UI or\n * | Actions generated by the Handler. Reusable processing and long logic\n * | methods should go here. It implements the AuroraScreenLogic interface.\n * |\n * .........................................................................\n *\n * @author Sammy Guergachi <sguergachi at gmail.com>\n * @author Carlos Machado <camachado@gmail.com>\n * <p/>\n */\npublic class GameLibraryLogic implements AuroraScreenLogic {\n\n    /**\n     * Library UI instance.\n     */\n    private final GameLibraryUI libraryUI;\n\n    /**\n     * Library Handler instance.\n     */\n    private GameLibraryHandler libraryHandler;\n\n    /**\n     * Core UI instance.\n     */\n    private final AuroraCoreUI coreUI;\n\n    /**\n     * Dashboard UI instance.\n     */\n    private final DashboardUI dashboardUI;\n\n    /**\n     * .-----------------------------------------------------------------------.\n     * | GameLibraryLogic(GameLibraryUI)\n     * .-----------------------------------------------------------------------.\n     * |\n     * | This is the Constructor of the Game Library Logic class.\n     * |\n     * | The GameLibraryUI is required to make adjustments to the UI from the\n     * | logic.\n     * |\n     * | The games are loaded, added and overall managed through here.\n     * |\n     * | NOTE: for Logic to work you must use the set(HandlerDashboardHandler)\n     * | method for the logic to be able to attach some handlers to UI\n     * | elements\n     * |\n     * .........................................................................\n     *\n     * @param gamelibraryUi GameLibraryUI\n     *\n     */\n    public GameLibraryLogic(final GameLibraryUI gamelibraryUi) {\n        this.libraryUI = gamelibraryUi;\n        this.coreUI = gamelibraryUi.getCoreUI();\n        this.dashboardUI = gamelibraryUi.getDashboardUI();\n    }\n\n    @Override\n    public final void setHandler(final AuroraScreenHandler handler) {\n\n        this.libraryHandler = (GameLibraryHandler) handler;\n\n    }\n\n     /**\n     * .-----------------------------------------------------------------------.\n     * | addGamesToLibrary()\n     * .-----------------------------------------------------------------------.\n     * |\n     * | This method will add all games found in the Aurora Storage to the\n     * | Library UI.\n     * |\n     * | It will add the games from favorite to non-favorite games.\n     * | It will generate new Grids along the way when it fills previous ones.\n     * |\n     * .........................................................................\n     *\n     * @return an ArrayList with info\n     */\n    public void addGamesToLibrary() {\n        try {\n\n            //* Add Games Marked Fav first *//\n\n            for (int i = 0; i < libraryUI.getStorage().getStoredLibrary()\n                    .getGameNames()\n                    .size();\n                    i++) {\n\n                Game Game = new Game(libraryUI.getGridSplit(), coreUI,\n                        dashboardUI, libraryUI.getStorage());\n                if (libraryUI.getStorage().getStoredLibrary().getFaveStates()\n                        .get(i)) {\n                    Game.setGameName(libraryUI.getStorage().getStoredLibrary()\n                            .getGameNames()\n                            .get(i));\n                    Game.setCoverUrl(libraryUI.getStorage().getStoredLibrary()\n                            .getBoxArtPath()\n                            .get(i));\n                    //* Handle appostrophese in game path *//\n                    Game.setGamePath(libraryUI.getStorage().getStoredLibrary()\n                            .getGamePath()\n                            .get(i).replace(\"'\", \"''\"));\n                    Game.setFavorite(libraryUI.getStorage().getStoredLibrary()\n                            .getFaveStates()\n                            .get(i));\n                    Game.setCoverSize(libraryUI.getGameCoverWidth(), libraryUI\n                            .getGameCoverHeight());\n\n                    libraryUI.getGridSplit().addGame(Game);\n                }\n            }\n\n            //* Add Non-Fav games after *//\n\n            for (int i = 0; i < libraryUI.getStorage().getStoredLibrary()\n                    .getGameNames()\n                    .size();\n                    i++) {\n\n                Game Game = new Game(libraryUI.getGridSplit(), coreUI,\n                        dashboardUI, libraryUI.getStorage());\n                if (!libraryUI.getStorage().getStoredLibrary().getFaveStates()\n                        .get(i)) {\n                    Game.setGameName(libraryUI.getStorage().getStoredLibrary()\n                            .getGameNames()\n                            .get(i));\n                    Game.setCoverUrl(libraryUI.getStorage().getStoredLibrary()\n                            .getBoxArtPath()\n                            .get(i));\n                    //* Handle appostrophese in game path *//\n                    Game.setGamePath(libraryUI.getStorage().getStoredLibrary()\n                            .getGamePath()\n                            .get(i).replace(\"'\", \"''\"));\n                    Game.setFavorite(libraryUI.getStorage().getStoredLibrary()\n                            .getFaveStates()\n                            .get(i));\n                    Game.setCoverSize(libraryUI.getGameCoverWidth(), libraryUI\n                            .getGameCoverHeight());\n\n                    libraryUI.getGridSplit().addGame(Game);\n                }\n            }\n\n            libraryUI.getGridSplit()\n                    .finalizeGrid(libraryHandler.new ShowAddGameUiHandler(), libraryUI\n                    .getGameCoverWidth(), libraryUI.getGameCoverHeight());\n\n            //Load First Grid by default\n            loadGames(\n                    0);\n        } catch (MalformedURLException ex) {\n            System.out.println(\"MalformedURLExeption \\n\" + ex);\n        }\n    }\n\n    /**\n     * SmartLoad GameCover Covers to minimize memory usage through burst loading\n     *\n     */\n    public void loadGames(int currentGridIndex) throws MalformedURLException {\n\n        System.out.println(\"LAUNCHING LOAD METHOD\");\n        int currentGrid = currentGridIndex;\n        if (currentGrid < 0) {\n            currentGrid = 0;\n        }\n        System.out.println(\"current panel: \" + currentGrid);\n\n\n\n        //Load First Panels\n\n        libraryUI.setIsGameLibraryKeyListenerAdded(false);\n        for (int i = 0; i < libraryUI.getGridSplit().getGrid(currentGrid)\n                .getArray().size();\n                i++) {\n            Game game = new Game(libraryUI.getGridSplit(), coreUI, dashboardUI);\n            try {\n                game = (Game) libraryUI.getGridSplit().getGrid(currentGrid)\n                        .getArray().get(i);\n                game.addKeyListener(libraryHandler.new searchRefocusListener());\n\n                for (int j = 0; j < game.getKeyListeners().length; j++) {\n                    if (game.getKeyListeners()[j] instanceof GameLibraryKeyListener) {\n                        libraryUI.setIsGameLibraryKeyListenerAdded(true);\n                        break;\n                    }\n                }\n\n                if (!libraryUI.IsGameLibraryKeyListenerAdded()) {\n                    System.out.println(\"ADDING GAMELIBRARYLISTENER TO \" + game\n                            .getName());\n                    game\n                            .addKeyListener(libraryHandler.new GameLibraryKeyListener(\n                            ));\n                }\n\n\n                if (!game.isLoaded()) {\n                    game.update();\n\n                    System.out.println(\"loading: \" + game.getGameName());\n                }\n            } catch (RuntimeException ex) {\n                System.out.println(ex);\n            }\n        }\n\n\n        libraryUI.setIsGameLibraryKeyListenerAdded(false);\n        //Load Second Panel if exists -- SMART LOAD\n        if (currentGrid < libraryUI.getGridSplit().getArray().size() - 1) {\n            for (int i = 0; i < libraryUI.getGridSplit().getGrid(currentGrid\n                                                                 + 1).getArray()\n                    .size(); i++) {\n                Game game = new Game(libraryUI.getGridSplit(), coreUI,\n                        dashboardUI);\n                try {\n                    game = (Game) libraryUI.getGridSplit().getGrid(currentGrid\n                                                                   + 1)\n                            .getArray()\n                            .get(i);\n\n                    for (int j = 0; j < game.getKeyListeners().length; j++) {\n                        if (game.getKeyListeners()[j] instanceof GameLibraryKeyListener) {\n                            libraryUI.setIsGameLibraryKeyListenerAdded(true);\n                            break;\n                        }\n                    }\n\n                    if (!libraryUI.IsGameLibraryKeyListenerAdded()) {\n                        System.out.println(\"ADDING GAMELIBRARYLISTENER TO\"\n                                           + game.getName());\n                        game\n                                .addKeyListener(libraryHandler.new GameLibraryKeyListener(\n                                ));\n                    }\n                    if (!game.isLoaded()) {\n                        game.update();\n                        System.out.println(\"Secondary loading: \" + game\n                                .getName());\n                    }\n                } catch (RuntimeException ex) {\n                    System.out.println(ex);\n                }\n\n\n            }\n        }\n    }\n\n    public void checkNotifiers() {\n\n        if (libraryUI.getStatusBadge1().getImgURl().equals(\"addUI_badge_valid.png\")\n            && libraryUI.getStatusBadge2()\n                .getImgURl().equals(\"addUI_badge_valid.png\")) {\n            //Animate the Button bellow Add Game UI\n            libraryUI.getAddGameToLibButton().setVisible(true);\n            libraryUI.getAddGameToLibButtonAnimator().setInitialLocation((coreUI\n                    .getFrame()\n                    .getWidth() / 2) - (335 / 2), libraryUI.getAddGamePane()\n                    .getImgIcon()\n                    .getIconHeight() - 180);\n            libraryUI.getAddGameToLibButtonAnimator().moveVertical(libraryUI\n                    .getAddGamePane()\n                    .getImgIcon()\n                    .getIconHeight() - 55, 20);\n            libraryUI.getAddGameToLibButtonAnimator().removeAllListeners();\n        }\n\n        if ((libraryUI.getStatusBadge1().getImgURl().equals(\"addUI_badge_invalid.png\")\n             || libraryUI.getStatusBadge2()\n                .getImgURl().equals(\"addUI_badge_invalid.png\"))\n            && libraryUI.getAddGameToLibButton().isVisible()) {\n\n\n            libraryUI.getAddGameToLibButtonAnimator().moveVertical(0, 16);\n            libraryUI.getAddGameToLibButtonAnimator()\n                    .addPostAnimationListener(new APostHandler() {\n                @Override\n                public void actionPerformed() {\n                    libraryUI.getAddGameToLibButton().setVisible(false);\n                }\n            });\n        }\n\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":12659}]],"length":12659}
