{"ts":1355499176361,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright 2012 Sardonix Creative.\n *\n * This work is licensed under the\n * Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.\n * To view a copy of this license, visit\n *\n *      http://creativecommons.org/licenses/by-nc-nd/3.0/\n *\n * or send a letter to Creative Commons, 444 Castro Street, Suite 900,\n * Mountain View, California, 94041, USA.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage aurora.V1.core;\n\nimport aurora.V1.core.screen_ui.DashboardUI;\nimport aurora.V1.core.screen_ui.GameLibraryUI;\nimport aurora.V1.core.screen_ui.StartScreenUI;\nimport aurora.engine.V1.UI.AButton;\nimport aurora.engine.V1.UI.ADialog;\nimport aurora.engine.V1.UI.AImagePane;\nimport aurora.engine.V1.UI.AProgressWheel;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.Serializable;\nimport java.net.MalformedURLException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.swing.BoxLayout;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\n\n/**\n *\n * @author Sammy Guergachi <sguergachi at gmail.com>\n * @author Carlos Machado <camachado@gmail.com>\n */\npublic class Game extends AImagePane implements Runnable, Cloneable {\n\n    private String name;\n\n    private String coverUrl;\n\n    private String gamePath;\n\n    private String timePlayed;\n\n    private String lastPlayed;\n\n    private String gameType;\n\n    private int numberTimesPlayed;\n\n    private int width;\n\n    private int height;\n\n    private int SIZE_TOPPANE_COMP;\n\n    private int SIZE_BottomPaneHeight;\n\n    private Thread gameCoverThread;\n\n    private boolean isFavorite;\n\n    private boolean isLoaded = false;\n\n    private boolean isSelected;\n\n    private boolean isRemoved = false;\n\n    private AProgressWheel progressWheel;\n\n    private AImagePane coverImagePane;\n\n    private AImagePane blankImagePane;\n\n    private AImagePane glowImagePane;\n\n    private AImagePane favoriteIconImagePane;\n\n    private AImagePane gameBarImagePane;\n\n    private AImagePane removeImagePane;\n\n    private AImagePane imgConfirmPromptImagePane;\n\n    private JPanel interactivePanel;\n\n    private JPanel topPanel;\n\n    private JPanel playButtonPanel;\n\n    private JPanel infoButtonPanel;\n\n    private JPanel favoriteButtonPanel;\n\n    private JPanel bottomPanel;\n\n    private JPanel gameBarPanel;\n\n    private JPanel confirmPanel;\n\n    private JPanel denyPanel;\n\n    private AButton removeButton;\n\n    private AButton favoriteButton;\n\n    private AButton infoButton;\n\n    private AButton playButton;\n\n    private AButton confirmButton;\n\n    private AButton denyButton;\n\n    private ADialog dbErrorDialog;\n\n    private JLabel yesLabel;\n\n    private JLabel noLabel;\n\n    private GridManager manager;\n\n    private AuroraCoreUI coreUI;\n\n    private DashboardUI dashboardUi;\n\n    private AuroraStorage storage;\n\n    private final String rootCoverDBPath = \"https://s3.amazonaws.com/CoverArtDB/\";\n\n    private PlayButtonListener playButtonListener;\n\n    public Game() {\n    }\n\n    public Game(final GridManager gridManager, final AuroraCoreUI auroraCoreUI,\n                final DashboardUI dashboardUi) {\n\n\n        this.dashboardUi = dashboardUi;\n        this.coreUI = auroraCoreUI;\n        this.manager = gridManager;\n        this.setOpaque(false);\n        this.setDoubleBuffered(true);\n        //this.setSize();\n\n        //DEFAULT CASE\n        this.setImage(\"Blank-Case.png\", height, width);\n        this.setPreferredSize(new Dimension(width, height));\n\n\n\n    }\n\n    public Game(final GridManager manager, final AuroraCoreUI ui,\n                final DashboardUI obj, final AuroraStorage storage) {\n        this.dashboardUi = obj;\n        this.coreUI = ui;\n        this.storage = storage;\n        this.manager = manager;\n        this.setOpaque(false);\n        this.setDoubleBuffered(true);\n        // this.setSize();\n\n        //DEFAULT CASE\n        this.setImage(\"Blank-Case.png\", height, width);\n        this.setPreferredSize(new Dimension(width, height));\n\n\n\n    }\n\n    public Game(final GridManager manager, final AuroraCoreUI ui,\n                final String CoverURL) {\n\n        this.coreUI = ui;\n        this.manager = manager;\n        this.setOpaque(false);\n        this.setDoubleBuffered(true);\n        this.coverUrl = CoverURL;\n        // this.setSize();\n\n        //DEFAULT CASE\n        this.setImage(\"Blank-Case.png\", height, width);\n        this.setPreferredSize(new Dimension(width, height));\n\n\n    }\n\n    public Game(final String CoverURL, final DashboardUI obj) {\n\n\n        this.setOpaque(false);\n        this.coreUI = obj.getCoreUI();\n        this.dashboardUi = obj;\n        this.coverUrl = CoverURL;\n\n        //DEFAULT CASE\n        this.setImage(\"Blank-Case.png\", height, width);\n        this.setPreferredSize(new Dimension(width, height));\n\n\n    }\n\n    public Game(final DashboardUI obj) {\n\n\n        this.setOpaque(false);\n        this.dashboardUi = obj;\n        this.coreUI = obj.getCoreUI();\n\n        //DEFAULT CASE\n        this.setImage(\"Blank-Case.png\", height, width);\n        this.setPreferredSize(new Dimension(width, height));\n\n\n    }\n\n    public final void update() throws MalformedURLException {\n\n\n        interactivePanel = new JPanel(new BorderLayout());\n        interactivePanel.setOpaque(false);\n        interactivePanel.addMouseListener(new Game.InteractiveListener());\n        this.addMouseListener(new Game.InteractiveListener());\n        this.add(interactivePanel);\n        this.revalidate();\n\n        this.setLayout(new BorderLayout());\n        this.setPreferredSize(new Dimension(width, height));\n\n\n        //Create Overlay UI Components//\n        coverImagePane = new AImagePane();\n        blankImagePane = new AImagePane();\n        glowImagePane = new AImagePane(\"game_selectedGlow.png\", width + 10,\n                height + 10);\n        favoriteIconImagePane = new AImagePane(\"game_favouriteIcon.png\", 100, 32);\n        favoriteIconImagePane.setPreferredSize(new Dimension(100, 32));\n        removeButton = new AButton(\"game_btn_remove_norm.png\",\n                \"game_btn_remove_down.png\",\n                \"game_btn_remove_over.png\");\n        removeButton.addActionListener(new RemoveButtonListener());\n\n        gameBarImagePane = new AImagePane(\"game_overlay.png\", width - 30, 55);\n        gameBarImagePane.setOpaque(false);\n        gameBarImagePane.setPreferredSize(new Dimension(width - 30, 55));\n        gameBarImagePane.setLayout(new BorderLayout());\n        gameBarImagePane.setBackground(Color.blue);\n\n        gameBarPanel = new JPanel();\n        gameBarPanel.setOpaque(false);\n        gameBarPanel.setBackground(Color.red);\n        gameBarPanel.setLayout(new BoxLayout(gameBarPanel, BoxLayout.X_AXIS));\n\n        //Game Bar Elements//\n        favoriteButton = new AButton(\"game_btn_star_norm.png\",\n                \"game_btn_star_down.png\",\n                \"game_btn_star_over.png\");\n        favoriteButton.addActionListener(new Game.FavoriteButtonListener());\n        favoriteButtonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        favoriteButtonPanel.setPreferredSize(new Dimension(30, 40));\n        favoriteButtonPanel.add(favoriteButton);\n        favoriteButtonPanel.setOpaque(false);\n\n        infoButton = new AButton(\"game_btn_reverse_norm.png\",\n                \"game_btn_reverse_down.png\",\n                \"game_btn_reverse_over.png\");\n        infoButtonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        infoButtonPanel.setPreferredSize(new Dimension(80, 40));\n        infoButtonPanel.add(infoButton);\n        infoButtonPanel.setOpaque(false);\n\n        playButton = new AButton(\"game_btn_play_norm.png\",\n                \"game_btn_play_down.png\",\n                \"game_btn_play_over.png\");\n        playButton.setPreferredSize(new Dimension(40, 40));\n        playButton.setOpaque(false);\n        playButtonListener = new Game.PlayButtonListener();\n        playButton.addActionListener(playButtonListener);\n\n        gameBarPanel.add(favoriteButtonPanel);\n        gameBarPanel.add(playButton);\n        gameBarPanel.add(infoButtonPanel);\n\n        gameBarImagePane.setVisible(false);\n        gameBarImagePane.add(gameBarPanel);\n\n        //Set up interactive pane\n        topPanel = new JPanel(new BorderLayout());\n        topPanel.setOpaque(false);\n        topPanel.setPreferredSize(new Dimension(width, 55));\n\n        bottomPanel = new JPanel(new BorderLayout());\n        bottomPanel.setOpaque(false);\n        bottomPanel.setPreferredSize(new Dimension(width - 10,\n                SIZE_BottomPaneHeight));\n\n        removeButton.setVisible(false);\n        favoriteIconImagePane.setVisible(false);\n\n        topPanel.add(removeButton, BorderLayout.EAST);\n        topPanel.add(favoriteIconImagePane, BorderLayout.WEST);\n        topPanel.validate();\n\n        bottomPanel.add(gameBarImagePane, BorderLayout.NORTH);\n        gameBarImagePane.validate();\n\n        interactivePanel.add(topPanel, BorderLayout.PAGE_START);\n        interactivePanel.add(bottomPanel, BorderLayout.SOUTH);\n\n        bottomPanel.validate();\n        topPanel.validate();\n        interactivePanel.validate();\n\n        //Loading Thread\n        gameCoverThread = null;\n\n        if (gameCoverThread == null) {\n            gameCoverThread = new Thread(this);\n        }\n        gameCoverThread.setName(\"Game Cover Thread\");\n        //Start Loader\n        gameCoverThread.start();\n\n        favoriteButtonPanel.revalidate();\n\n        System.out.println(\"pane width \" + width);\n\n    }\n\n    @Override\n    public final void run() {\n\n        if (Thread.currentThread() == gameCoverThread) {\n            progressWheel = new AProgressWheel(\"Aurora_Loader.png\");\n            progressWheel.setPreferredSize(this.getPreferredSize());\n            this.add(progressWheel, BorderLayout.NORTH);\n            //Mouse handlers\n            if (dashboardUi.getStartUI().getFileIO().findImg(\"Game Data\",\n                    coverUrl) != null) {\n                //Get Image\n                coverImagePane.setImage(dashboardUi.getStartUI().getFileIO()\n                        .findImg(\"Game Data\", coverUrl), width, height);\n                coverImagePane.setImageSize(width, height);\n                coverImagePane.setPreferredSize(new Dimension(width, height));\n                coverImagePane.setDoubleBuffered(true);\n                this.remove(progressWheel);\n                this.setImage(coverImagePane);\n                this.add(interactivePanel);\n                this.revalidate();\n                this.repaint();\n            } else {\n                //Load Image\n                try {\n\n                    if (StartScreenUI.Online) {\n                        dbErrorDialog = null;\n                        System.out.println(coverUrl);\n                        coverImagePane.setURL(rootCoverDBPath + coverUrl);\n\n                        //Set Background accordingly\n                        coverImagePane.setImageSize(width, height);\n                        coverImagePane.setPreferredSize(new Dimension(width,\n                                height));\n                        if (coverImagePane.getImgIcon().getIconHeight() == -1) {\n                            if (dbErrorDialog == null) {\n                                dbErrorDialog = new ADialog(\n                                        ADialog.aDIALOG_ERROR,\n                                        \"AuroraDB Error! Can't Access BoxArt\",\n                                        coreUI.getBoldFont());\n                                dbErrorDialog.showDialog();\n\n                            }\n                            dbErrorDialog.setVisible(true);\n                        } else {\n                            dashboardUi.getStartUI().getFileIO().writeImage(\n                                    coverImagePane, coverUrl, \"Game Data\");\n\n                            this.remove(progressWheel);\n\n                            //Add Image To GameCover Cover\n                            this.setImage(coverImagePane);\n                            this.add(interactivePanel);\n                            this.revalidate();\n                            this.repaint();\n                        }\n                    } else {\n                        this.remove(progressWheel);\n                        this.add(interactivePanel);\n                        this.revalidate();\n                    }\n\n                } catch (Exception ex) {\n                    Logger.getLogger(Game.class.getName()).log(Level.SEVERE,\n                            null, ex);\n                }\n            }\n        }\n        //End of Loading\n        interactivePanel.setPreferredSize(new Dimension(width, height));\n        interactivePanel.setSize(new Dimension(width, height));\n\n        isLoaded = true;\n\n        //Finalize\n        afterLoad();\n\n    }\n\n    //To be called when we want to re add the Overlay on the Game Covers\n    public final void reAddInteractive() {\n\n        isRemoved = false;\n        setSize();\n        interactivePanel.setVisible(true);\n\n        glowImagePane = new AImagePane(\"game_selectedGlow.png\", width + 10,\n                height + 10);\n        favoriteIconImagePane = new AImagePane(\"game_favouriteIcon.png\", 100, 32);\n        favoriteIconImagePane.setPreferredSize(new Dimension(100, 32));\n        removeButton = new AButton(\"game_btn_remove_norm.png\",\n                \"game_btn_remove_down.png\",\n                \"game_btn_remove_over.png\");\n        removeButton.addActionListener(new RemoveButtonListener());\n\n        gameBarImagePane = new AImagePane(\"game_overlay.png\", width - 30, 55);\n        gameBarImagePane.setOpaque(false);\n        gameBarImagePane.setPreferredSize(new Dimension(width - 30, 55));\n        gameBarImagePane.setLayout(new BorderLayout());\n        gameBarImagePane.setBackground(Color.blue);\n\n        gameBarPanel = new JPanel();\n        gameBarPanel.setOpaque(false);\n        gameBarPanel.setLayout(new BoxLayout(gameBarPanel, BoxLayout.X_AXIS));\n\n        //Game Bar Elements//\n        favoriteButton = new AButton(\"game_btn_star_norm.png\",\n                \"game_btn_star_down.png\",\n                \"game_btn_star_over.png\");\n        favoriteButton.addActionListener(new Game.FavoriteButtonListener());\n        favoriteButtonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        favoriteButtonPanel.setPreferredSize(new Dimension(30, 40));\n        favoriteButtonPanel.add(favoriteButton);\n        favoriteButtonPanel.setOpaque(false);\n\n        infoButton = new AButton(\"game_btn_reverse_norm.png\",\n                \"game_btn_reverse_down.png\",\n                \"game_btn_reverse_over.png\");\n        infoButtonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        infoButtonPanel.setPreferredSize(new Dimension(80, 40));\n        infoButtonPanel.add(infoButton);\n        infoButtonPanel.setOpaque(false);\n\n        playButton = new AButton(\"game_btn_play_norm.png\",\n                \"game_btn_play_down.png\",\n                \"game_btn_play_over.png\");\n        playButton.setPreferredSize(new Dimension(40, 40));\n        playButton.setOpaque(false);\n        playButtonListener = new Game.PlayButtonListener();\n        playButton.addActionListener(playButtonListener);\n\n        gameBarPanel.add(favoriteButtonPanel);\n        gameBarPanel.add(playButton);\n        gameBarPanel.add(infoButtonPanel);\n        gameBarPanel.validate();\n\n        gameBarImagePane.setVisible(false);\n        gameBarImagePane.add(gameBarPanel);\n        gameBarImagePane.setOpaque(false);\n        gameBarImagePane.validate();\n\n        //Set up interactive pane\n\n        topPanel = new JPanel(new BorderLayout());\n        topPanel.setOpaque(false);\n        topPanel.setPreferredSize(new Dimension(width, 55));\n\n        bottomPanel = new JPanel(new BorderLayout());\n        bottomPanel.setOpaque(false);\n        bottomPanel.setPreferredSize(new Dimension(width - 10,\n                SIZE_BottomPaneHeight));\n\n        removeButton.setVisible(false);\n        favoriteIconImagePane.setVisible(false);\n\n        topPanel.add(removeButton, BorderLayout.EAST);\n        topPanel.add(favoriteIconImagePane, BorderLayout.WEST);\n        topPanel.validate();\n\n        bottomPanel.add(gameBarImagePane, BorderLayout.NORTH);\n\n        interactivePanel.add(topPanel, BorderLayout.PAGE_START);\n        interactivePanel.add(bottomPanel, BorderLayout.SOUTH);\n\n        topPanel.validate();\n        interactivePanel.revalidate();\n\n        if (isFavorite()) {\n            setFavorite();\n        }\n\n        this.repaint();\n    }\n\n    private void setSize() {\n        if (coreUI.isLargeScreen()) {\n\n            SIZE_BottomPaneHeight = (50 * 2) - 10;\n            SIZE_TOPPANE_COMP = 5;\n        } else {\n            SIZE_TOPPANE_COMP = 0;\n            SIZE_BottomPaneHeight = (50 * 2) - 10;\n        }\n        System.out.println(\"OVERLAY HEIGHT \" + SIZE_BottomPaneHeight);\n    }\n\n    public final void removePreviousSelected() {\n        if (manager != null) {\n            manager.unselectPrevious();\n        }\n\n    }\n\n    private void afterLoad() {\n        if (isLoaded) {\n\n            if (isSelected) {\n                selected();\n            }\n\n            if (isFavorite) {\n                setFavorite();\n            }\n        }\n\n    }\n\n    public final boolean isLoaded() {\n        return isLoaded;\n    }\n\n    public final void setCoverSize(final int width, final int height) {\n        this.width = width;\n        this.height = height;\n        this.setImageSize(width, height);\n        setSize();\n    }\n\n    public final void selected() {\n        isSelected = true;\n        if (isLoaded) {\n            this.add(glowImagePane);\n            this.repaint();\n            this.validate();\n        }\n\n    }\n\n    public final void unselected() {\n        if (isSelected) {\n            isSelected = false;\n            removeButton.setVisible(false);\n            interactivePanel.revalidate();\n            this.remove(glowImagePane);\n            this.repaint();\n            this.revalidate();\n\n        }\n    }\n\n    // Future method to be used to set isSelected variable\n    public void setSelected(boolean selected) {\n        isSelected = selected;\n    }\n\n    public final void hideInteractiveComponents() {\n        hideInteraction();\n        gameBarImagePane.setVisible(false);\n        unselected();\n    }\n\n    public final void displayInteractiveComponents() {\n\n        interactivePanel.setSize(width + 47, height + 28);\n        System.out.println(\"INTERACTIVE SIZE \" + interactivePanel.getWidth()\n                           + \" \" + interactivePanel.getHeight());\n\n        showRemove();\n        gameBarImagePane.setVisible(true);\n        selected();\n        GameLibraryUI.lblGameName.setText(getName());\n\n\n    }\n\n    public final void setFavorite() {\n        isFavorite = true;\n        if (isLoaded) {\n            favoriteIconImagePane.setVisible(true);\n            interactivePanel.revalidate();\n        }\n\n    }\n\n    public final void unfavorite() {\n        if (isFavorite) {\n            isFavorite = false;\n            favoriteIconImagePane.setVisible(false);\n            interactivePanel.revalidate();\n        }\n    }\n\n    public final void showRemove() {\n\n        if (isLoaded) {\n            removeButton.setVisible(true);\n            interactivePanel.revalidate();\n        }\n    }\n\n    public final void hideInteraction() {\n        if (isLoaded) {\n            removeButton.setVisible(false);\n            interactivePanel.revalidate();\n        }\n    }\n\n    public final void removeInteraction() {\n        this.remove(interactivePanel);\n        this.isRemoved = true;\n    }\n\n    ////Getters and Setters\n    public final AuroraStorage getStorage() {\n        return storage;\n    }\n\n    public final ActionListener getPlayHandler() {\n        return playButtonListener;\n    }\n\n    public final void setStorage(final AuroraStorage storage) {\n        this.storage = storage;\n    }\n\n    public final AButton getFavoriteButton() {\n        return favoriteButton;\n    }\n\n    public final void setFavoriteButton(final AButton favoriteButton) {\n        this.favoriteButton = favoriteButton;\n    }\n\n    public final String getBoxArtUrl() {\n        return coverUrl;\n    }\n\n    public final JPanel getInteractivePane() {\n        return interactivePanel;\n    }\n\n    public final AImagePane getGameBar() {\n        return gameBarImagePane;\n    }\n\n    public final boolean isSelected() {\n        return isSelected;\n    }\n\n    public final boolean isFavorite() {\n        return isFavorite;\n\n    }\n\n    public final String getGameType() {\n        return gameType;\n\n    }\n\n    public final String getLastPlayed() {\n        return lastPlayed;\n    }\n\n    @Override\n    public final int getWidth() {\n        return width;\n    }\n\n    @Override\n    public final int getHeight() {\n        return height;\n    }\n\n    @Override\n    public final String getName() {\n        return name;\n    }\n\n    public final int getNumberTimesPlayed() {\n        return numberTimesPlayed;\n    }\n\n    public final String getTimePlayed() {\n        return timePlayed;\n    }\n\n    public final DashboardUI getDashObj() {\n        return this.dashboardUi;\n    }\n\n    public final void setCoverUrl(final String coverUrl) throws\n            MalformedURLException {\n        this.coverUrl = coverUrl;\n    }\n\n    public final void setFavorite(final boolean favorite) {\n        this.isFavorite = favorite;\n\n        if (favorite) {\n            setFavorite();\n        }\n    }\n\n    public final void setGameType(final String gameType) {\n        this.gameType = gameType;\n    }\n\n    public final void setLastPlayed(final String lastPlayed) {\n        this.lastPlayed = lastPlayed;\n    }\n\n    public final void setDashObj(final DashboardUI dashboardUi) {\n        this.dashboardUi = dashboardUi;\n    }\n\n    public final void setGameName(final String name) {\n        this.name = name;\n    }\n\n    public final String getGameName() {\n        return name;\n    }\n\n    public final void setNumberTimesPlayed(final int numberTimesPlayed) {\n        this.numberTimesPlayed = numberTimesPlayed;\n    }\n\n    public final void setTimePlayed(final String timePlayed) {\n        this.timePlayed = timePlayed;\n    }\n\n    public final Game copy() {\n        try {\n            return (Game) this.clone();\n        } catch (CloneNotSupportedException ex) {\n            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);\n            return null;\n        }\n    }\n\n    public final Game thisGame() {\n        return this;\n    }\n\n    public final void setGamePath(final String path) {\n        System.out.println(\"Game path = \" + path);\n        this.gamePath = path;\n    }\n\n    public final String getGamePath() {\n        return this.gamePath;\n    }\n\n    class FavoriteButtonListener implements ActionListener {\n\n        @Override\n        public void actionPerformed(final ActionEvent e) {\n            System.out.println(\"Favourite button pressed.\");\n            if (isFavorite) {\n                unfavorite();\n                storage.getStoredLibrary().SaveFavState(thisGame());\n            } else {\n                setFavorite();\n                storage.getStoredLibrary().SaveFavState(thisGame());\n            }\n        }\n    }\n\n    //PlayButtonListener added by Carlos\n    class PlayButtonListener implements ActionListener {\n\n        @Override\n        public void actionPerformed(final ActionEvent e) {\n\n            System.out.println(\"Play button pressed.\");\n            new AuroraLauncher(copy(), coreUI).createUI();\n\n        }\n    }\n\n    class RemoveButtonListener implements ActionListener {\n\n        @Override\n        public void actionPerformed(final ActionEvent e) {\n\n            topPanel.remove(removeButton);\n            imgConfirmPromptImagePane = new AImagePane(\n                    \"GameDelete_ConfirmOverlay.png\");\n            imgConfirmPromptImagePane\n                    .setPreferredSize(new Dimension(imgConfirmPromptImagePane\n                    .getImgIcon().getImage().getWidth(null) + SIZE_TOPPANE_COMP,\n                    imgConfirmPromptImagePane.getImgIcon().getImage().getHeight(\n                    null)));\n            topPanel.add(imgConfirmPromptImagePane, BorderLayout.EAST);\n            topPanel.revalidate();\n\n            gameBarPanel.removeAll();\n            yesLabel = new JLabel(\"Yes\");\n            noLabel = new JLabel(\"No\");\n            confirmButton = new AButton(\"GameDelete_Accept.png\",\n                    \"GameDelete_Accept_down.png\", \"GameDelete_Accept_over.png\");\n            confirmButton.addActionListener(new RemoveGameHandler());\n            denyButton = new AButton(\"GameDelete_Deny.png\",\n                    \"GameDelete_Deny_down.png\", \"GameDelete_Deny_over.png\");\n            denyButton.addActionListener(new ActionListener() {\n                @Override\n                public void actionPerformed(final ActionEvent e) {\n                    interactivePanel.removeAll();\n                    interactivePanel.setVisible(false);\n                    remove(glowImagePane);\n                    isSelected = true;\n                    reAddInteractive();\n                    showRemove();\n                    selected();\n                    gameBarImagePane.setVisible(true);\n                }\n            });\n            yesLabel.setFont(coreUI.getDefaultFont().deriveFont(Font.PLAIN, 20));\n            yesLabel.setForeground(Color.yellow);\n\n            noLabel.setFont(coreUI.getDefaultFont().deriveFont(Font.PLAIN, 20));\n            noLabel.setForeground(Color.yellow);\n\n            denyPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n            denyPanel.setPreferredSize(new Dimension(30, 40));\n            denyPanel.add(noLabel);\n            denyPanel.setOpaque(false);\n\n            confirmPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n            confirmPanel.setPreferredSize(new Dimension(90, 40));\n            confirmPanel.add(yesLabel);\n            confirmPanel.setOpaque(false);\n\n            gameBarPanel.add(denyPanel);\n            gameBarPanel.add(denyButton);\n            gameBarPanel.add(confirmButton);\n            gameBarPanel.add(confirmPanel);\n            gameBarImagePane.revalidate();\n            unselected();\n            gameBarImagePane.setVisible(true);\n\n        }\n    }\n\n    class RemoveGameHandler implements ActionListener {\n\n        @Override\n        public void actionPerformed(final ActionEvent e) {\n            System.out.println(\"Remove button pressed for \" + Game.this\n                    .getName());\n            AuroraStorage storage = dashboardUi.getStorage();\n            StoredLibrary library = storage.getStoredLibrary();\n            library.search(name);\n            library.removeGame(Game.this);\n            manager.removeGame(Game.this);\n        }\n    }\n\n    //Game Cover Selected Handler\n    class InteractiveListener implements MouseListener {\n\n        @Override\n        public void mouseClicked(final MouseEvent e) {\n        }\n\n        @Override\n        public void mousePressed(final MouseEvent e) {\n            if (!isRemoved) {\n                requestFocus();\n                if (isSelected()) {\n                    hideInteraction();\n                    gameBarImagePane.setVisible(false);\n                    unselected();\n                    System.out.println(\"GAME UNSELECTED\");\n                } else {\n\n                    removePreviousSelected();\n                    displayInteractiveComponents();\n                }\n            }\n\n        }\n\n        @Override\n        public void mouseReleased(final MouseEvent e) {\n        }\n\n        @Override\n        public void mouseEntered(final MouseEvent e) {\n\n            if (e.getModifiers() == MouseEvent.BUTTON1_MASK) {\n\n                if (!isRemoved) {\n                    requestFocus();\n                    if (isSelected()) {\n                        hideInteraction();\n                        gameBarImagePane.setVisible(false);\n                        unselected();\n                    } else {\n                        removePreviousSelected();\n                        displayInteractiveComponents();\n                    }\n                }\n            }\n        }\n\n        @Override\n        public void mouseExited(final MouseEvent e) {\n        }\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":28274}]],"length":28274}
