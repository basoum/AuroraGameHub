{"ts":1355499151533,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright 2012 Sardonix Creative.\n *\n * This work is licensed under the\n * Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.\n * To view a copy of this license, visit\n *\n *      http://creativecommons.org/licenses/by-nc-nd/3.0/\n *\n * or send a letter to Creative Commons, 444 Castro Street, Suite 900,\n * Mountain View, California, 94041, USA.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage aurora.V1.core;\n\nimport aurora.engine.V1.UI.ADialog;\nimport aurora.engine.V1.UI.AGridPanel;\nimport java.awt.event.ActionListener;\nimport java.util.ArrayList;\nimport javax.swing.JComponent;\n\n/**\n * GridManager An array of aGridPanels Provides methods to manipulate and get\n * Grids\n *\n * @author Sammy\n */\npublic class GridManager {\n\n    private AuroraCoreUI ui;\n\n    private int row;\n\n    private int col;\n\n    private ArrayList<AGridPanel> Grids = new ArrayList<AGridPanel>();\n\n    private int fullGrids;\n\n    private GamePlaceholder blankAddGame;\n\n    private ActionListener listener;\n\n    private GamePlaceholder placeholder;\n\n    private int width;\n\n    private int height;\n\n    private boolean needFinalizing = false;\n\n    private boolean isTransitioningGame;\n\n    private int visibleGrid;\n\n    /**\n     * Manages GridPanels for GameLibrary\n     *\n     * @param row\n     * @param col\n     * @param ui\n     */\n    public GridManager(int row, int col, AuroraCoreUI ui) {\n        this.row = row;\n        this.col = col;\n        this.ui = ui;\n        this.visibleGrid = 0;\n    }\n\n    GridManager() {\n    }\n\n    /**\n     * initiate a default grid\n     *\n     * @param index Specific position to add Grid to Manager\n     */\n    public void initiateGrid(int index) {\n\n        createGrid(row, col, index);\n\n    }\n\n    /**\n     * Add a game to Grid\n     *\n     * @param GameCover object\n     */\n    public void addGame(Game game) {\n        fullGrids = 0;\n        for (int i = 0; i < Grids.size(); i++) {\n            if (!isDupicate(game) || isTransitioningGame) {\n\n                if (!Grids.get(i).isGridFull()) {\n\n                    Grids.get(i).addToGrid(game);\n                    isTransitioningGame = false; // Is Not Being Added to next Grid\n                    System.out.println(\"Added Game To GridPanel: \" + game\n                            .getName());\n                    System.out.println(\"to Grid \" + i);\n\n                } else if (containsPlaceHolders(Grids.get(i))) {\n\n                    replacePlaceHolder(Grids.get(i), game, listener);\n\n                } else {\n                    System.out.println(\"FAILED To add: \" + game.getName());\n                    System.out.println(\"Grid \" + i + \" is Full!\");\n                    fullGrids++;\n                    //when Full make new Grid\n                    if (fullGrids == Grids.size()) {\n                        createGrid(row, col, Grids.size());\n                        Grids.get(Grids.size() - 1).addToGrid(game);\n                        isTransitioningGame = true; // Is Being Added to next Grid\n                        System.out.println(\"Added Game: \" + game.getName());\n                        System.out.println(\"to Grid \" + (Grids.size() - 1));\n\n                    }\n                }\n            } else {\n                ADialog info = new ADialog(ADialog.aDIALOG_WARNING,\n                        \"Cannot Add Duplicate Box Art\", ui.getDefaultFont());\n                info.showDialog();\n                info.setVisible(true);\n                echoGame(game).selected();\n            }\n\n        }\n\n\n    }\n\n    /**\n     * check if Game Cover Art is already in the library\n     *\n     * @param game GameCover to check for duplicates\n     */\n    public boolean isDupicate(Game game) {\n        for (int i = 0; i < Grids.size(); i++) {\n            for (int a = 0; a < Grids.get(i).getArray().size(); a++) {\n                if (Grids.get(i).getArray().get(a) instanceof GamePlaceholder\n                    == false) {\n                    Game cover = (Game) Grids.get(i).getArray().get(a);\n                    if (cover.getBoxArtUrl().equals(game.getBoxArtUrl())) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Finds Same Game and returns that game in the library\n     *\n     * @param game\n     *             <\n     * p/>\n     * @return\n     */\n    public Game echoGame(Game game) {\n\n        for (int i = 0; i < Grids.size(); i++) {\n            for (int a = 0; a < Grids.get(i).getArray().size(); a++) {\n                if (Grids.get(i).getArray().get(a) instanceof GamePlaceholder\n                    == false) {\n                    Game cover = (Game) Grids.get(i).getArray().get(a);\n                    if (cover.getBoxArtUrl().equals(game.getBoxArtUrl())) {\n                        return cover;\n                    }\n                }\n            }\n        }\n        return null;\n\n    }\n\n    public void finalizeGrid(ActionListener listener, int width, int height) {\n        this.listener = listener;\n\n        this.width = width;\n        this.height = height;\n\n        if (!Grids.get(Grids.size() - 1).isGridFull()) {\n\n\n\n            this.blankAddGame = new GamePlaceholder();\n            blankAddGame.setUp(width + 10, height + 10,\n                    \"library_placeholder_bg.png\");\n            blankAddGame.addButton(\"library_placeholder_add_norm.png\",\n                    \"library_placeholder_add_down.png\",\n                    \"library_placeholder_add_over.png\", listener);\n            Grids.get(Grids.size() - 1).addToGrid(blankAddGame);\n\n        }\n\n        addPlaceHolders(width, height);\n    }\n\n    /**\n     * Adds Placeholder Items instead of Games using predefined image heights\n     * and widths\n     *\n     * @param width\n     * @param height\n     */\n    public void addPlaceHolders(int width, int height) {\n        while (!Grids.get(Grids.size() - 1).isGridFull()) {\n            this.placeholder = new GamePlaceholder();\n            placeholder.setUp(width + 10, height + 10,\n                    \"library_placeholder_bg.png\");\n\n            Grids.get(Grids.size() - 1).addToGrid(placeholder);\n        }\n    }\n\n    /**\n     * check if any other cover was selected and sets it to unselected\n     */\n    public void unselectPrevious() {\n        for (int i = 0; i < Grids.size(); i++) {\n            for (int j = 0; j < Grids.get(i).getArray().size(); j++) {\n                try {\n                    Game game = (Game) Grids.get(i).getArray().get(j);\n                    if (game.isSelected()) {\n                        game.unselected();\n                        game.getGameBar().setVisible(false);\n                        game.revalidate();\n                    }\n                } catch (RuntimeException ex) {\n                }\n            }\n\n        }\n    }\n\n    //attempts to remove everything in grid.\n    public void clearAllGrids() {\n        for (int i = 0; i < Grids.size(); i++) {\n\n            try {\n                System.out.println(\"Clearing Grid... \" + i);\n\n                Grids.get(i).getArray().clear();\n                Grids.get(i).update();\n                Grids.get(i).revalidate();\n\n\n            } catch (RuntimeException ex) {\n                System.err.println(ex);\n            }\n\n        }\n    }\n\n    private void replacePlaceHolder(AGridPanel gridPanel, Game game,\n                                    ActionListener addGameHandler) {\n\n        //Replace placeholder with Game then add placeholder at the end\n        //using finilize\n\n        for (int a = (gridPanel.getArray().size() - 1); a >= 0; a--) {\n            if (!(gridPanel.getArray().get(a) instanceof Game)) {\n                gridPanel.removeComp((JComponent) gridPanel.getArray().get(a));\n                gridPanel.update();\n            }\n        }\n\n        gridPanel.addToGrid(game);\n        gridPanel.update();\n        this.finalizeGrid(addGameHandler, game.getWidth(), game.getHeight());\n        gridPanel.update();\n    }\n\n    /**\n     * find a game in any Grid int[0] = Grid int[1] = GridPosition\n     *\n     * @param GameCover object\n     */\n    public int[] findGame(Game game) {\n        int GridPosition = -1;\n        int Grid = -1;\n        for (int i = 0; i < Grids.size(); i++) {\n            if (Grids.get(i).find(game) != -1) {\n                GridPosition = Grids.get(i).find(game);\n                Grid = i;\n            }\n        }\n\n        int[] find = new int[2];\n        find[0] = Grid;\n        find[1] = GridPosition;\n\n        return find;\n    }\n\n    public boolean gameExists(Game game) {\n\n        for (int i = 0; i < Grids.size(); i++) {\n            System.out.println(\"GameName \" + game.getName());\n            System.out.println(Grids.get(i).find(game));\n            if (Grids.get(i).find(game) != -1) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private boolean containsPlaceHolders(AGridPanel gridPanel) {\n\n        for (int i = 0; i < Grids.size(); i++) {\n            for (Object game : gridPanel.getArray()) {\n                if (game instanceof GamePlaceholder) {\n                    return true;\n                }\n            }\n        }\n        return false;\n\n    }\n\n    private boolean containsAddPlaceHolders(AGridPanel gridPanel) {\n\n        for (int i = 0; i < Grids.size(); i++) {\n            for (Object obj : gridPanel.getArray()) {\n                if (obj instanceof GamePlaceholder) {\n                    GamePlaceholder place = (GamePlaceholder) obj;\n                    if (place.isContainsButton()) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n\n    }\n\n    public int getVisibleGridIndex() {\n        return visibleGrid;\n    }\n\n    public void decrementVisibleGridIndex() {\n        visibleGrid--;\n    }\n\n    public void incrementVisibleGridIndex() {\n        visibleGrid++;\n    }\n\n    /**\n     * find a game in any Grid\n     *\n     * int[0] = Grid int[1] = GridPosition\n     *\n     * @param GameCover object\n     */\n    public int[] findGameName(String Name) {\n        int Grid = -1;\n        int GridPosition = -1;\n\n        //Go Through all Grids\n        for (int i = 0; i < Grids.size(); i++) {\n            //Go Through All panels in Each Grid\n\n            for (int a = 0; a < Grids.get(i).getArray().size(); a++) {\n                try {\n                    Game game = (Game) Grids.get(i).getArray().get(a);\n                    if (game.getName().equalsIgnoreCase(Name)) {\n\n                        Grid = i;\n                        GridPosition = a;\n                    }\n                } catch (RuntimeException ex) {\n                }\n            }\n        }\n\n        int[] find = new int[2];\n        find[0] = Grid;\n        find[1] = GridPosition;\n\n        return find;\n    }\n\n    /**\n     * removes a game in any Grid\n     *\n     * @param GameCover object\n     */\n    public void removeGame(Game game) {\n\n        //TODO support appostrophe removal\n\n        // get the grid location of where the game is contained\n        int[] gridLocation = this.findGame(game);\n        System.out.println(\"Game as found in grid location: \" + gridLocation[0]\n                           + \",\" + gridLocation[1]);\n\n        // grab the index of where the grid is located in the manager\n        int index = gridLocation[0];\n\n        // get the grid where the game is located\n        AGridPanel grid = this.getGrid(index);\n\n\n        // alternative to remove the game\n        grid.removeComp(game);\n\n        System.out.println(\"Number of grids that exist: \" + Grids.size());\n\n        if ((Grids.size() - 1) > index) {\n            for (int i = index; i < Grids.size() - 1; i++) {\n                AGridPanel currentGrid = this.getGrid(i);\n                AGridPanel nextGrid = this.getGrid(i + 1);\n                Object o = nextGrid.getFirstComponent();\n\n                if (o.getClass().equals(game.getClass())) {\n                    nextGrid.removeComp((Game) o);\n                    nextGrid.update();\n                    currentGrid.addToGrid((Game) o);\n                    currentGrid.update();\n                } else {\n                    Grids.remove(nextGrid);\n                    if (!containsAddPlaceHolders(grid)) {\n                        needFinalizing = true;\n                    }\n                }\n\n\n\n            }\n        } else if (!containsAddPlaceHolders(grid) && Grids.size() == 1) {\n\n            needFinalizing = true;\n\n        }\n\n\n        if (needFinalizing) {\n\n            finalizeGrid(listener, width, height);\n            needFinalizing = false;\n        } else {\n            addPlaceHolders(game.getWidth(), game.getHeight());\n        }\n\n        grid.update();\n\n\n    }\n\n    /**\n     * Create and add a new GridPanel to the Grids ArrayList\n     *\n     * @param row   Row Number\n     * @param col   Column Number\n     * @param index specific position to add new Grid\n     *\n     */\n    public void createGrid(int row, int col, int index) {\n        AGridPanel GridPanel = new AGridPanel(row, col, true);\n\n        Grids.add(index, GridPanel);\n    }\n\n    /**\n     * Returns AGridPanel which may contain JComponents in a grid\n     *\n     * @param PanelIndex\n     *                   <\n     * p/>\n     * @return AGridPanel\n     *\n     */\n    public AGridPanel getGrid(int panelIndex) {\n\n        return Grids.get(panelIndex);\n\n    }\n\n    /**\n     * check if any other cover was selected and sets it to unselected\n     */\n    public AGridPanel getSelectedGrid() {\n        for (int i = 0; i < Grids.size(); i++) {\n            for (int j = 0; j < Grids.get(i).getArray().size(); j++) {\n                try {\n                    Game game = (Game) Grids.get(i).getArray().get(j);\n                    if (game.isSelected()) {\n                        return Grids.get(i);\n                    }\n                } catch (RuntimeException ex) {\n                }\n            }\n\n        }\n        return null;\n    }\n\n    /**\n     * Returns an Array filled with all AGridPanel's\n     *\n     * @return Grid ArrayList\n     *\n     */\n    public ArrayList getArray() {\n        return Grids;\n    }\n\n    public int getFullGrids() {\n        return fullGrids;\n    }\n\n    public int getNumberOfGrids() {\n        return Grids.size();\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":14452}]],"length":14452}
