/*
<<<<<<< HEAD
 * Copyright 2012 Sardonix Creative.
=======
 * Made By Sardonix Creative.
>>>>>>> origin/dev
 *
 * This work is licensed under the
 * Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
 * To view a copy of this license, visit
 *
 *      http://creativecommons.org/licenses/by-nc-nd/3.0/
 *
 * or send a letter to Creative Commons, 444 Castro Street, Suite 900,
 * Mountain View, California, 94041, USA.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package aurora.V1.core.screen_logic;

import aurora.V1.core.AuroraCoreUI;
import aurora.V1.core.AuroraStorage;
import aurora.V1.core.Game;
import aurora.V1.core.main;
import aurora.V1.core.screen_handler.DashboardHandler;
import aurora.V1.core.screen_ui.DashboardUI;
import aurora.V1.core.screen_ui.LibraryUI;
import aurora.V1.core.screen_ui.ProfileUI;
import aurora.V1.core.screen_ui.SettingsUI;
import aurora.engine.V1.Logic.ARssReader;
import aurora.engine.V1.Logic.ARssReader.Feed;
import aurora.engine.V1.Logic.AThreadWorker;
import aurora.engine.V1.Logic.AuroraScreenHandler;
import aurora.engine.V1.Logic.AuroraScreenLogic;
import aurora.engine.V1.UI.ACarouselPane;
import aurora.engine.V1.UI.AImagePane;
import aurora.engine.V1.UI.AInfoFeedLabel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
<<<<<<< HEAD
import java.net.UnknownHostException;
=======
>>>>>>> origin/dev
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;
import java.util.logging.Level;
//import java.util.logging.Logger;

import javax.swing.JLabel;
import javax.swing.SwingUtilities;

import org.apache.log4j.Logger;

/**
 * .------------------------------------------------------------------------.
 * | DashboardLogic
 * .------------------------------------------------------------------------.
 * |
 * |
 * | This Class is the Logic component of the Dashboard Screen. Its instanced
 * | In DashboardUI.
 * |
 * | This class is supposed to handle all of the Long Processing of UI or
 * | Actions generated by the Handler. Reusable processing and long logic
 * | methods should go here.
 * |
 * .........................................................................
 *
 * @author Sammy Guergachi <sguergachi at gmail.com>
 * @author Carlos Machado <camachado@gmail.com>
 * <p/>
 */
public class DashboardLogic implements AuroraScreenLogic {

    /**
     * The UI Component of the Dashboard Screen.
     */
    private final DashboardUI dashboardUI;
    /**
     * The Handler Component of the Dashboard Screen.
     */
    private DashboardHandler dashboardHandler;
    /**
     * The AuroraStorage instance from DashboardUI.
     */
    private final AuroraStorage storage;
    /**
     * The AuroraCoreUI instance from DashboardUI.
     */
    private final AuroraCoreUI coreUI;
    /**
     * Instance of the GameLibrary UI.
     */
    private LibraryUI libraryUI;
<<<<<<< HEAD

=======
>>>>>>> origin/dev
    /**
     * Instance of the ProfileUI.
     */
    private ProfileUI profileUI;
<<<<<<< HEAD

=======
>>>>>>> origin/dev
    /**
     * Instance of the SettingsUI.
     */
    private SettingsUI settingsUI;
    private ARssReader rssReader;
    private Feed auroraGameHubFeed;
    private ArrayList<AInfoFeedLabel> amazonBuffer;
    private int bufferUntilAmazon;
<<<<<<< HEAD

<<<<<<< HEAD
=======
=======
>>>>>>> origin/dev
    private String sourceName;
    static final Logger logger = Logger.getLogger(DashboardLogic.class);
    private boolean isRssLoaded;

<<<<<<< HEAD
>>>>>>> origin/dev
=======
    static final Logger logger = Logger.getLogger(DashboardLogic.class);

>>>>>>> origin/dev
    /**
     * .-----------------------------------------------------------------------.
     * | DashboardLogic(DashboardUI)
     * .-----------------------------------------------------------------------.
     * |
     * | This is the Constructor of the Dashboard Logic class.
     * |
     * | The DashboardUI is required to make adjustments to the UI from the
     * | logic.
     * | The storage will be extracted from DashboardUI and initialized
     * | here.
     * | CoreUI will also be internally initialized here and extracted
     * | from DashboardUI.
     * |
     * | NOTE: for Logic to work you must use the set(HandlerDashboardHandler)
     * | method for the logic to be able to attach some handlers to UI
     * | elements
     * |
     * .........................................................................
     *
     * @param dashboardUi DashboardUI
     *
     */
    public DashboardLogic(final DashboardUI dashboardUi) {

        this.dashboardUI = dashboardUi;
        this.coreUI = dashboardUI.getCoreUI();

        this.storage = dashboardUI.getStorage();

        this.rssReader = new ARssReader();

        loadAuroraApps();
    }

    @Override
    public final void setHandler(final AuroraScreenHandler handler) {
        this.dashboardHandler = (DashboardHandler) handler;
    }

    /**
     * .-----------------------------------------------------------------------.
     * | getLibraryIcon()
     * .-----------------------------------------------------------------------.
     * |
     * | This method tries to generate a random game if the storage contains
     * | any games.
     * |
     * | If no games are found in storage it will return a simple blank case
     * | icon
     * |
     * .........................................................................
     *
     * @return an ArrayList with info
     */
    public final AImagePane getLibraryIcon() {

        AImagePane icon;

        //* Double check there are no games in Storage *//
        if (logger.isDebugEnabled()) {
<<<<<<< HEAD
        	logger.debug(storage);
=======
            logger.debug(storage);
>>>>>>> origin/dev
        }

        if (storage.getStoredLibrary().getBoxArtPath() == null || storage.
                getStoredLibrary().getBoxArtPath().isEmpty()) {

            //* Set icon to Blank Case *//
            icon = new AImagePane("Blank-Case.png",
                    dashboardUI.getGameCoverWidth() - 10, dashboardUI.
                    getGameCoverHeight() - 10);

        } else {
            Random rand = new Random();

            //* Generate random num based on number of games in storage *//
            int randomNum = rand.nextInt(dashboardUI.getStorage().
                    getStoredLibrary().
                    getGameNames().size());

            //* Get the random game *//
            Game randomGame = new Game(dashboardUI.getStorage().
                    getStoredLibrary().
                    getBoxArtPath().
                    get(randomNum), dashboardUI);
            randomGame.setCoverSize(dashboardUI.getGameCoverWidth() - 10,
                    dashboardUI.getGameCoverHeight() - 10);
            try {
                randomGame.update();
            } catch (MalformedURLException ex) {
<<<<<<< HEAD
            	logger.error(ex);
=======
                logger.error(ex);
>>>>>>> origin/dev
            }

            //* Disable overlay UI of Game *//
            randomGame.removeOverlayUI();
            //* Instead, when clicking on game, launch appropriate App *//

            if (logger.isDebugEnabled()) {
<<<<<<< HEAD
            	logger.debug("ADDING MOUSE LISTENER TO COVER");
=======
                logger.debug("ADDING MOUSE LISTENER TO COVER");
>>>>>>> origin/dev
            }

            randomGame.getInteractivePane().
                    addMouseListener(
                    dashboardHandler.new CarouselLibraryMouseListener());

            //* Now give icon the cleaned up Random game *//
            icon = randomGame;
        }

        return icon;

    }

    public final ArrayList<JLabel> createRssFeed() {
        final ArrayList<JLabel> rssArray = new ArrayList<JLabel>();

                isRssLoaded = false;


                boolean internetConnectionUp = true;
                boolean rssFeedAvailable = true;

                // read in the RSS feed
                try {


                    logger.info("Connecting to RSS mixer!");
                    ARssReader.RSSFeedParser auroraGameHubParser = rssReader.new RSSFeedParser(
                            "http://www.rssmix.com/u/3635025/rss.xml");
                    auroraGameHubFeed = auroraGameHubParser.readFeed();


                    // catch the exception if there is a problem reading the RSS feed
                } catch (Exception ex) {

                    logger.error("Unable to connect to RSS mixer!");

                    URL url;
                    rssFeedAvailable = false;
                    try {
                        // try connecting to Google to confirm if Internet is up or not
                        url = new URL("http://www.google.com");
                        final URLConnection conn = url.openConnection();
                        conn.getInputStream();

<<<<<<< HEAD
            // catch the exception if there is a problem reading the RSS feed
        } catch (Exception ex) {
            URL url;
            rssFeedAvailable = false;
            try {
                // try connecting to Google to confirm if Internet is up or not
                url = new URL("http://www.google.com");
                final URLConnection conn = url.openConnection();
                conn.getInputStream();

                // if the Internet is up, then we try to read our backup RSS feed
                ARssReader.RSSFeedParser auroraGameHubParser = rssReader.new RSSFeedParser(
                        "http://www.gamespot.com/rss/game_updates.php?platform=5");
                auroraGameHubFeed = auroraGameHubParser.readFeed();
                rssFeedAvailable = true;

            } catch (MalformedURLException e) {
            	logger.error(e);
            } catch (IOException ioe) {
                JLabel label = new JLabel("Please connect to the Internet...");
                internetConnectionUp = false;
                array.add(label);
            } catch (Exception ex1) {
                JLabel label = new JLabel("Unable to retrieve RSS feed...");
                array.add(label);
            }
=======
                        // if the Internet is up, then we try to read our backup RSS feed
                        ARssReader.RSSFeedParser auroraGameHubParser = rssReader.new RSSFeedParser(
                                "http://www.gamespot.com/rss/game_updates.php?platform=5");
                        auroraGameHubFeed = auroraGameHubParser.readFeed();
                        rssFeedAvailable = true;
>>>>>>> origin/dev

                    } catch (MalformedURLException exx) {
                        logger.error(exx);
                    } catch (IOException ioe) {
                        JLabel label = new JLabel(
                                "Please connect to the Internet...");
                        internetConnectionUp = false;
                        rssArray.add(label);
                    } catch (Exception ex1) {
                        JLabel label = new JLabel(
                                "Unable to retrieve RSS feed...");
                        rssArray.add(label);
                    }


<<<<<<< HEAD
        // Buffer stuff to control when to show amazon links //
        amazonBuffer = new ArrayList<AInfoFeedLabel>();
        int noAmazonCounter = 0;
        int bufferCounter = 0;

        // How many items before we show an amazon link //
        bufferUntilAmazon = 4;
        if (internetConnectionUp && rssFeedAvailable) {
            for (Iterator<ARssReader.FeedMessage> it = auroraGameHubFeed
                    .getMessages().
                    iterator(); it.hasNext();) {
                ARssReader.FeedMessage message = it.next();
                AInfoFeedLabel label = new AInfoFeedLabel(message.getTitle(),
                        message.getLink());

                // Determine the source of the news article //
                String url = message.getLink();
<<<<<<< HEAD
                int i = url.indexOf(".");
                int j = url.indexOf('.', i + 1);
                String sourceName = url.substring(i + 1, j);
=======
                if (url.contains("www")) {
                    int i = url.indexOf(".");
                    int j = url.indexOf('.', i + 1);
                    sourceName = url.substring(i + 1, j);
                } else {
                    int i = url.indexOf("/");
                    int j = url.indexOf(".");
                    sourceName = url.substring(i + 2, j);
=======
>>>>>>> origin/dev
                }

                // Buffer stuff to control when to show amazon links //
                amazonBuffer = new ArrayList<AInfoFeedLabel>();
                int noAmazonCounter = 0;
                int bufferCounter = 0;

                // How many items before we show an amazon link //
                bufferUntilAmazon = 4;
                if (internetConnectionUp && rssFeedAvailable) {
                    for (Iterator<ARssReader.FeedMessage> it = auroraGameHubFeed
                            .getMessages().
                            iterator(); it.hasNext();) {
                        ARssReader.FeedMessage message = it.next();
                        AInfoFeedLabel label = new AInfoFeedLabel(message
                                .getTitle(),
                                message.getLink());

                        // Determine the source of the news article //
                        String url = message.getLink();
                        if (url.contains("www")) {
                            int i = url.indexOf(".");
                            int j = url.indexOf('.', i + 1);
                            sourceName = url.substring(i + 1, j);
                        } else {
                            int i = url.indexOf("/");
                            int j = url.indexOf(".");
                            sourceName = url.substring(i + 2, j);
                        }

                        if (sourceName.equalsIgnoreCase("FEEDS")) {
                            sourceName = "IGN";
                        }

                        label.setSourceName(sourceName.toUpperCase());

                        // Check if its an amazon Article //
                        if (label.getSourceName().equals("AMAZON")) {

                            // Reset Tool tip to show what the link actually is//
                            label.setToolTip("Amazon Best Sellers");

                            // Parse out the number infront of the text //
                            label.setText(label.getText().substring(label
                                    .getText()
                                    .indexOf(':') + 2, label.getText().length()));

                            // Add it to an arrayList to be added later //
                            amazonBuffer.add(label);

                        } else {
                            // Increment the number of times amazon was not added to buffer //
                            noAmazonCounter++;
                            rssArray.add(label);
                        }

                        if (noAmazonCounter > bufferUntilAmazon) {
                            // Reset times there was no amazon in the feed //
                            noAmazonCounter = 0;
                            //-
                            // If number of times there was no amazon in feed is more
                            // then 5 then add amazon to feed to array
                            //-
                            if (amazonBuffer.size() > bufferCounter) {
                                rssArray.add(amazonBuffer.get(bufferCounter));
                                bufferCounter++;
                            }
                        }

<<<<<<< HEAD
>>>>>>> origin/dev
                label.setSourceName(sourceName.toUpperCase());
=======
>>>>>>> origin/dev

                    }
                }

                isRssLoaded = true;


        return rssArray;

    }

    public boolean isIsRssLoaded() {
        return isRssLoaded;
    }

    public void setIsRssLoaded(boolean isRssLoaded) {
        this.isRssLoaded = isRssLoaded;
    }

    public ArrayList<JLabel> refreshRssFeed(ArrayList<JLabel> list) {

        ArrayList<JLabel> labelList = list;

<<<<<<< HEAD
    }
<<<<<<< HEAD
<<<<<<< HEAD

=======
    
=======

>>>>>>> origin/dev
    public ArrayList<JLabel> refreshRssFeed(ArrayList<JLabel> list) {

    	ArrayList<JLabel> labelList = list;

    	// make the list empty
    	labelList.clear();
    	labelList = createRssFeed();

		return labelList;
=======
        // make the list empty
        labelList.clear();
        labelList = createRssFeed();
>>>>>>> origin/dev

        return labelList;
    }
<<<<<<< HEAD
<<<<<<< HEAD
    
    
>>>>>>> origin/dev
=======


>>>>>>> origin/dev
=======

>>>>>>> origin/dev
    /**
     * .-----------------------------------------------------------------------.
     * | launchAuroraApp(ACarouselPane aCarouselPane)
     * .-----------------------------------------------------------------------.
     * |
     * | This method takes in a CarouselPane and tries to determine which APP
     * | Is associated with the specific Carousel Pane and then Launch that APP
     * |
     * | The method does an if check on each known Carousel Pane found in
     * | Dashboard UI such as: LibraryPane, ProfilePane, SettingsPane etc.
     * | then it launches the appropriate UI of the APP associated with that
     * | Carousel Pane.
     * |
     * .........................................................................
     *
     * @param aCarouselPane ACarouselPane
     * <p/>
     */
    public final void launchAuroraApp(final ACarouselPane aCarouselPane) {

        ACarouselPane pane = aCarouselPane;

        if (pane == dashboardUI.getLibraryPane()) {
            //* action on click right Panel *//
            if (dashboardUI != null) {

                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        libraryUI.clearUI(true);
                        libraryUI.buildUI();
                    }
                });
            }
        } else if (pane == dashboardUI.getProfilePane()) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    profileUI.clearUI(true);
                    profileUI.buildUI();
                }
            });
        } else if (pane == dashboardUI.getSettingsPane()) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    settingsUI.clearUI(true);
                    settingsUI.buildUI();
                }
            });
        } else if (pane == dashboardUI.getAuroraNetPane()) {
            //* do nothing for now *//
        }


    }

    /**
     * .-----------------------------------------------------------------------.
     * | navigateCarousel(ACarouselPane aCarouselPane)
     * .-----------------------------------------------------------------------.
     * |
     * | This method takes a CarouselPane and determines based on known points
     * | if it is the Center Pane, the Left Pane or the Right Pane. It then asks
     * | The Carousel in the DashboardUI to move Right, Left or launch the APP
     * | associated with that Pane depending on the location of that Pane.
     * |
     * | IF Pane on the Right Side >> Move Carousel to the Left
     * | IF Pane on the Left Side >> Move Carousel to the Right
     * | IF Pane is in the Center >> Launch App by passing pane to
     * | launchAuroraApp(ACarouselPane)
     * .........................................................................
     *
     * @param aCarouselPane ACarouselPane
     * <p/>
     */
    public final void navigateCarousel(final ACarouselPane aCarouselPane) {

        ACarouselPane pane = aCarouselPane;

        if (pane != null) {
            /* if Pane is to the Right side, move carousel Left */
            if (pane.getPointX() == dashboardUI.getCarousel().getRightX()) {
                dashboardUI.getCarousel().MoveLeft();

                /* if Pane is to the Left side, move carousel Right */
            } else if (pane.getPointX() == dashboardUI.getCarousel().getLeftX()) {
                dashboardUI.getCarousel().MoveRight();

                /* if Pane is in the Center then launch the App associated with it*/
            } else if (pane.getPointX() == dashboardUI.getCarousel().getCentX()) {
                this.launchAuroraApp(pane);
            }
        }
    }

    /**
     * .-----------------------------------------------------------------------.
     * | loadAuroraApps()
     * .-----------------------------------------------------------------------.
     * |
     * | This method will load the Aurora Apps so that they are ready to launch
     * | as soon as needed.
     * |
     * | This method is called on the creation of the DashboardLogic class
     * | so that the aurora Apps are loaded and ready for reuse instead of
     * | being recreated each time.
     * .........................................................................
     *
     * <p/>
     */
    private void loadAuroraApps() {

        AThreadWorker asyncLoad = new AThreadWorker(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                libraryUI = new LibraryUI(dashboardUI
                        .getStartUI().getAuroraStorage(), dashboardUI,
                        dashboardUI.getCoreUI());
                libraryUI.loadUI();


                profileUI = new ProfileUI(dashboardUI,
                        dashboardUI.getCoreUI());
                profileUI.loadUI();

                settingsUI = new SettingsUI(dashboardUI,
                        dashboardUI.getCoreUI());

                settingsUI.loadUI();


                if (logger.isDebugEnabled()) {
<<<<<<< HEAD
                	logger.debug("Apps Pre Loaded");
=======
                    logger.debug("Apps Pre Loaded");
>>>>>>> origin/dev
                }

            }
        });

        asyncLoad.startOnce();

    }
}
