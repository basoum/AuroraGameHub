{"ts":1355499155566,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright 2012 Sardonix Creative.\n *\n * This work is licensed under the\n * Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.\n * To view a copy of this license, visit\n *\n *      http://creativecommons.org/licenses/by-nc-nd/3.0/\n *\n * or send a letter to Creative Commons, 444 Castro Street, Suite 900,\n * Mountain View, California, 94041, USA.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage aurora.V1.core;\n\nimport aurora.V1.core.screen_handler.GameLibraryHandler;\nimport aurora.V1.core.screen_ui.GameLibraryUI;\nimport aurora.engine.V1.UI.AImage;\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.net.MalformedURLException;\nimport java.util.ArrayList;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * GridSearch Searches through Game Library\n *\n * @author Sammy\n * @version 0.2\n */\npublic class GridSearch {\n\n    private char typed; // This is the character user types\n\n    private String AppendedName = \"\"; //This is the concatination of all characters\n\n    private AuroraCoreUI ui; // The is the UI object\n\n    private GameLibraryUI libraryUI; // This is the Library View Object\n\n    private AImage sideSearchImage; // The Image To The Side of The Grid that says: Search\n\n    private GridManager SearchManager = null; // The Grid Manager For the Manager\n\n    private ArrayList<Game> foundGameList; //List of all games found\n\n    private boolean ClearedGrid; // ClearedGrid boolean\n\n    private Game foundGame; //Current found game\n\n    private Game GameOriginal; //Original GameCover for copying purpouses\n\n    private FavListener FaveListener;\n\n    private final GameLibraryHandler handler;\n\n    private GridAnimation SearchGridAnimator;\n\n    public GridSearch(AuroraCoreUI ui, GameLibraryUI aLibraryUI,\n                      GameLibraryHandler aLibraryHandler) {\n        this.ui = ui;\n        this.libraryUI = aLibraryUI;\n        this.handler = aLibraryHandler;\n        foundGameList = new ArrayList<Game>();\n        this.ClearedGrid = false;\n    }\n\n    public void typedChar(char typedChar) {\n        typed = typedChar; // Set variable to typeChar\n        System.out.println(\"TYPED Character: \" + String.valueOf(typed));\n\n        //Append to Appended Name\n        AppendedName = AppendedName.concat(String.valueOf(typed));\n\n        System.out.println(\"Appended name: \" + AppendedName);\n\n        //clear library grid if not already clear\n        if (!ClearedGrid) {\n            clearGameGrid();\n            System.out.println(\"Cleared Grid\");\n        }\n\n        //Initiate Search Sequence\n        searchGame();\n\n    }\n\n    public void removeChar(char typedChar) {\n        typed = typedChar;\n\n        //What Happends When The Length is zero\n        if (AppendedName.length() == 0 || libraryUI.getSearchBar().getText()\n                .length() == 0) {\n            try {\n                restoreGrid(); //Restores to The original Library\n                resetAppendedName(); // Resets AppendName variable\n                libraryUI.getGameBack().revalidate(); // Refreshes the Grid.\n\n            } catch (MalformedURLException ex) {\n                Logger.getLogger(GridSearch.class.getName()).log(Level.SEVERE,\n                        null, ex);\n            }\n        }\n        //Remove ONE Character From End of Appended Name\n        if (AppendedName.length() - 1 >= 0) {\n            AppendedName = (String) AppendedName.subSequence(0, AppendedName\n                    .length() - 1);\n\n        }\n\n        System.out.println(\"Appended name: \" + AppendedName);\n\n\n        searchGame();\n\n    }\n\n    public void resetAppendedName() {\n        AppendedName = \"\";\n        foundGameList.removeAll(foundGameList);\n    }\n\n    /**\n     * Search is split in two Exact Search and Lenient Search Exact search is\n     * when the game typed is the same as a game in library Lenient search is\n     * when the first few letters are typed and a search for games with those\n     * letters occurs\n     */\n    private void searchGame() {\n        //TODO Progress Wheel\n\n        this.clearSearchGrid();\n\n        System.out.println(\"Check EXACT Search: \" + checkGameExistsInLibrary(\n                AppendedName));\n\n        //EXACT SEARCH\n        if (checkGameExistsInLibrary(AppendedName)) { // Check if game is exact match to library game\n            System.out.println(\"Performing Exact Search: \" + AppendedName);\n\n            //Remove what ever is in the search grid\n\n            //Add the exact game found\n            addFoundGame(AppendedName);\n            //Display the game found\n            try {\n                displayGames();\n\n            } catch (MalformedURLException ex) {\n                Logger.getLogger(GridSearch.class.getName()).log(Level.SEVERE,\n                        null, ex);\n            }\n\n\n\n\n            //LENIENT SEARCH\n        } else if (AppendedName.length() > 0) {\n\n            System.out.println(\"Performing Lenient Search: \" + AppendedName);\n\n            //Search Each Grid\n            for (int g = 0; g < libraryUI.getGridSplit().getArray().size(); g++) {\n                //Search GameCover in specific Grid\n\n                for (int j = 0; j < libraryUI.getGridSplit().getGrid(g)\n                        .getArray().size(); j++) {\n\n                    //check if placeholder object\n                    if (libraryUI.getGridSplit().getGrid(g).getArray().get(j)\n                            .getClass() != GamePlaceholder.class) {\n\n                        //Convert each object in specific grid to GameCover Object\n                        Game game = (Game) libraryUI.getGridSplit().getGrid(g)\n                                .getArray().get(j);\n\n                        int checkLength = ((AppendedName.length()));\n\n\n                        if (checkLength < game.getName().length()) {\n                            //String containing Substring of Games\n                            String gameSub = game.getName().toLowerCase()\n                                    .substring(0, checkLength).toString();\n                            //String Containing Substring of Text Typed\n                            String appendedSub = AppendedName.substring(0,\n                                    checkLength).toLowerCase();\n\n                            System.out.println(\"!Substring of Appended is: \"\n                                               + appendedSub);\n                            System.out.println(\"!Substring of Game is: \"\n                                               + gameSub);\n                            System.out.println(\"!!Match Found?: \" + gameSub\n                                    .equals(appendedSub));\n\n                            if (gameSub.equals(appendedSub)) {\n\n                                //Check for duplicates\n                                if (!foundGameList.contains(game)) {\n                                    addFoundGame(game.getName());\n                                    try {\n                                        displayGames();\n\n                                    } catch (MalformedURLException ex) {\n                                        Logger.getLogger(GridSearch.class\n                                                .getName()).log(Level.SEVERE,\n                                                null, ex);\n                                    }\n                                }\n                            }\n\n                        }\n\n                    }\n                }\n\n            }\n\n            //If Nothing Found clear grid\n            if (foundGameList.isEmpty()) {\n                this.clearSearchGrid();\n                libraryUI.getGameBack().repaint();\n            }\n\n            //Clear grid\n        } else if (AppendedName.length() != 0) {\n            this.clearSearchGrid();\n            libraryUI.getGameBack().repaint();\n\n        }\n\n        //add the place holders at the end\n        SearchManager.addPlaceHolders(libraryUI.getGameCoverWidth(), libraryUI\n                .getGameCoverHeight());\n    }\n\n    private boolean checkGameExistsInSearch(String name) {\n\n        for (int i = 0; i < SearchManager.getArray().size(); i++) {\n            for (int j = 0; j < SearchManager.getGrid(i).getArray().size(); j++) {\n                if (!SearchManager.getGrid(i).getArray().get(j).getClass()\n                        .getName().equals(GamePlaceholder.class.getName())) {\n                    Game game = (Game) SearchManager.getGrid(i).getArray()\n                            .get(j);\n                    if (game.getName().equals(name)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    //Check if GameCover with exact string exists in library\n    private boolean checkGameExistsInLibrary(String name) {\n\n        if (libraryUI.getGridSplit().findGameName(name)[0] != -1\n            && libraryUI.getGridSplit().findGameName(name)[0] != -1) {\n            return true;\n        }\n        return false;\n    }\n\n    private void addFoundGame(String name) {\n\n        //MAKE A COPY OF THE PREVIEOUS GAME\n\n        GameOriginal = (Game) (libraryUI.getGridSplit().getGrid(\n                libraryUI.getGridSplit().findGameName(name)[0]).getArray().get(\n                libraryUI.getGridSplit().findGameName(name)[1]));\n\n        //Set Up New Cover\n        foundGame = new Game(SearchManager, ui, GameOriginal.getBoxArtUrl());\n        //manually copying it over\n        foundGame.setFavorite(GameOriginal.isFavorite());\n        foundGame.setGameName(GameOriginal.getName());\n        foundGame\n                .setCoverSize(GameOriginal.getWidth(), GameOriginal.getHeight());\n        foundGame.setDashObj(GameOriginal.getDashObj());\n        foundGame.setStorage(GameOriginal.getStorage());\n\n        foundGameList.add(foundGame);\n        System.out.println(foundGameList);\n\n    }\n\n    //Live Display of GameCover Found\n    private void displayGames() throws MalformedURLException {\n\n\n        //Go through Array and add to Grid\n        for (int i = 0; i < foundGameList.size(); i++) {\n            //Check for dupicates\n            if (!checkGameExistsInSearch(foundGameList.get(i).getName())) {\n\n                SearchManager.addGame(foundGameList.get(i)); // add to the grid.\n                System.out.println(handler);\n                foundGameList.get(i)\n                        .addFocusListener(handler.new searchLostFocusHandler(\n                        ));\n                foundGameList.get(i).update();\n\n                //Handle Remote Favorting to affect original game too\n                foundGame = foundGameList.get(i);\n                GameOriginal = (Game) (libraryUI.getGridSplit().getGrid(\n                        libraryUI.getGridSplit().findGameName(foundGame\n                        .getGameName())[0]).getArray().get(\n                        libraryUI.getGridSplit().findGameName(foundGame\n                        .getGameName())[1]));\n\n                FaveListener = new FavListener(foundGame, GameOriginal);\n\n\n                foundGameList.get(i).getFavoriteButton().addActionListener(\n                        FaveListener);\n\n                libraryUI.getGameBack().revalidate();\n                libraryUI.getGameBack().repaint();\n\n                SearchManager.getGrid(0).revalidate();\n                SearchManager.getGrid(0).repaint();\n            }\n\n\n        }\n    }\n\n    //Clears Search grid and foundGameList\n    public void clearSearchGrid() {\n        System.out.println(\"Clearing Search Grid\");\n        SearchManager.clearAllGrids();\n        foundGameList.removeAll(foundGameList);\n        System.out.println(foundGameList);\n\n    }\n\n    /**\n     * Remove Library Grid, add new one for search\n     */\n    public void clearGameGrid() {\n\n        //Tells Every body here that this method has already been executed\n        ClearedGrid = true;\n\n\n        //Remove Favorite Side Image\n        libraryUI.getGameBack().remove(0);\n        libraryUI.getGameBack().remove(libraryUI.getImgFavorite());\n        //Add search Side image\n        this.sideSearchImage = new AImage(\"library_search.png\");\n        libraryUI.getGameBack().add(sideSearchImage, BorderLayout.WEST);\n        for (int i = 0; i < libraryUI.getGridSplit().getArray().size(); i++) {\n            libraryUI.getGameBack().remove(libraryUI.getGridSplit().getGrid(i));\n\n        }\n\n        libraryUI.getGameBack().revalidate();\n        libraryUI.getGameBack().repaint();\n\n        setUpGrid();\n\n\n    }\n\n    public GridManager getGridManager() {\n        return SearchManager;\n    }\n\n    /*\n     * Restore Library Grid\n     */\n    public void restoreGrid() throws MalformedURLException {\n\n        ClearedGrid = false;\n\n\n        libraryUI.getGameBack().removeAll();\n\n        libraryUI.getGameBack().add(libraryUI.getImgFavorite(),\n                BorderLayout.WEST);\n        libraryUI.getGameBack().add(libraryUI.getGridSplit().getGrid(0),\n                BorderLayout.CENTER);\n        libraryUI.getGameBack().add(libraryUI.getImgGameRight(),\n                BorderLayout.EAST);\n\n        libraryUI.getGameBack().revalidate();\n        libraryUI.getGameBack().repaint();\n\n\n    }\n\n    //New Grid for Search\n    private void setUpGrid() {\n        this.SearchManager = new GridManager(2, 4, ui);\n        SearchManager.initiateGrid(0);\n        libraryUI.getGameBack().add(SearchManager.getGrid(0),\n                BorderLayout.CENTER);\n\n        this.SearchGridAnimator = new GridAnimation(SearchManager, libraryUI\n                .getGameBack());\n\n\n    }\n\n    class FavListener implements ActionListener {\n\n        private Game game;\n\n        private Game original;\n\n        public FavListener(Game game, Game original) {\n            this.game = game;\n            this.original = original;\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            if (game.isFavorite()) {\n                original.unfavorite();\n            } else {\n                original.setFavorite();\n            }\n        }\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":14258}]],"length":14258}
