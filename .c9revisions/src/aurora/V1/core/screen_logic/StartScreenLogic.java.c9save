{"ts":1355499205432,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright 2012 Sardonix Creative.\n *\n * This work is licensed under the\n * Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.\n * To view a copy of this license, visit\n *\n *      http://creativecommons.org/licenses/by-nc-nd/3.0/\n *\n * or send a letter to Creative Commons, 444 Castro Street, Suite 900,\n * Mountain View, California, 94041, USA.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage aurora.V1.core.screen_logic;\n\nimport aurora.V1.core.AuroraCoreUI;\nimport aurora.V1.core.screen_handler.StartScreenHandler;\nimport aurora.V1.core.screen_ui.DashboardUI;\nimport aurora.V1.core.screen_ui.StartScreenUI;\nimport aurora.engine.V1.Logic.AThreadWorker;\nimport aurora.engine.V1.Logic.AuroraScreenHandler;\nimport aurora.engine.V1.Logic.AuroraScreenLogic;\nimport aurora.engine.V1.UI.AImage;\nimport aurora.engine.V1.UI.AImagePane;\nimport aurora.engine.V1.UI.AProgressWheel;\nimport aurora.engine.V1.UI.AScrollingImage;\nimport java.awt.BorderLayout;\nimport java.awt.Dimension;\nimport java.awt.FontFormatException;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.IOException;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.sound.sampled.LineUnavailableException;\nimport javax.sound.sampled.UnsupportedAudioFileException;\nimport javax.swing.JPanel;\n\n/**\n *\n * @author Sammy Guergachi <sguergachi at gmail.com>\n */\npublic class StartScreenLogic implements AuroraScreenLogic {\n\n    private final StartScreenUI startScreenUI;\n\n    private StartScreenHandler startHandler;\n\n    private final AuroraCoreUI coreUI;\n\n    private JPanel bottomOfTopPane;\n\n    private AScrollingImage imgHexPane;\n\n    private AImagePane headerPane;\n\n    private JPanel centerPane;\n\n    private AImage imgTopLogo;\n\n    private int topHeight;\n\n    private AImage imgTopLogoSmall;\n\n    private int topSmallImageHeight;\n\n    private int topSmallImageWidth;\n\n    private AThreadWorker animateTransision;\n\n    private int centerHeight;\n\n    private DashboardUI dashboardUI;\n\n    private AProgressWheel progressWheel;\n\n    public StartScreenLogic(StartScreenUI aStartScreenUI) {\n\n        this.startScreenUI = aStartScreenUI;\n        this.coreUI = startScreenUI.getCoreUI();\n\n    }\n\n    @Override\n    public void setHandler(AuroraScreenHandler handler) {\n        startHandler = (StartScreenHandler) handler;\n    }\n\n    private void loadUI() {\n\n\n\n        bottomOfTopPane = coreUI.getSouthFromTopPanel();\n        headerPane = coreUI.getTopPane();\n        centerPane = coreUI.getCenterPanel();\n\n        imgHexPane = startScreenUI.getImgHexPane();\n        imgTopLogo = coreUI.getLogoImage();\n        imgTopLogoSmall = new AImage(\"dash_header_logo.png\");\n\n\n        setSize();\n\n        imgTopLogoSmall.setImageSize(topSmallImageWidth, topSmallImageHeight);\n\n\n\n    }\n\n    public void transisionToDashboard() {\n\n        loadUI();\n\n        animateTransision = new AThreadWorker(new ActionListener() {\n            //* Times cycling through threadWorker loop *//\n            private int c = 0;\n            //* Scale of Hex Image growning *//\n\n            private int scale = 0;\n\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                c++;\n                if (c == 1) {\n                    //* change header logo to smaller logo *//\n                    imgTopLogo.setIcon(imgTopLogoSmall.getImgIcon());\n                    imgTopLogo.repaint();\n\n                    //* stop scrolling Animation *//\n                    imgHexPane.stop();\n\n                    //* Remove Panel Containing Frame Controls*//\n                    headerPane.remove(bottomOfTopPane);\n                    headerPane.revalidate();\n\n                    imgHexPane.setCenterToFrame(coreUI.getFrame());\n                    imgHexPane.repaint();\n\n                } else {\n                    //* Change Size Values *//\n                    scale++;\n                    topHeight--;\n                    centerHeight += 5;\n\n                    //* Change Component Sizes *//\n                    imgHexPane.grow(scale);\n                    headerPane.setImageHeight(topHeight);\n                    imgHexPane.repaint();\n                    imgHexPane.revalidate();\n\n                    headerPane.setPreferredSize(new Dimension(headerPane\n                            .getWidth(),\n                            topHeight - 50));\n                    centerPane.setPreferredSize(new Dimension(centerPane\n                            .getWidth(),\n                            centerHeight));\n\n\n\n\n                    if (topHeight >= imgTopLogoSmall.getImgIcon()\n                            .getIconHeight() + 300) {\n                        centerHeight = centerHeight - 2;\n                        topHeight = imgTopLogoSmall.getImgIcon().getIconHeight()\n                                    + 50;\n                        headerPane.setImageHeight(topHeight);\n\n                    }\n\n                    //* Check if Reached Proper Size to stop *//\n                    if (scale == 34) {\n\n                        showDashdoard();\n                        animateTransision.stop();\n                    }\n\n                }\n\n\n            }\n        }, 18);\n\n        animateTransision.start();\n\n    }\n\n    private void showDashdoard() {\n\n\n\n\n        AThreadWorker loadDashboard = new AThreadWorker(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n\n\n\n                //* Re-add Frame Controls *//\n                bottomOfTopPane.setVisible(true);\n                coreUI.getTopPane().add(BorderLayout.PAGE_END, coreUI\n                        .getSouthFromTopPanel());\n                coreUI.getTopPane().revalidate();\n\n                //* Remove all components in Center Panel *//\n                coreUI.getCenterPanel().removeAll();\n\n                //* Get or Generate new DashboardUI *//\n                dashboardUI = startScreenUI.getLoadedDashboardUI();\n\n                if (dashboardUI == null) {\n                    System.out.println(\"Creating New Dashboard\");\n                    dashboardUI = new DashboardUI(coreUI, startScreenUI);\n                    dashboardUI.loadUI();\n                } else {\n                    System.out.println(\"Using LOADED Dashboard\");\n                }\n\n\n                //* Remove garbage from Memory *//\n//                System.gc();\n\n                //* Build DashboardUI *//\n                dashboardUI.buildUI();\n\n\n            }\n        });\n\n        loadDashboard.startOnce();\n\n    }\n\n    private void setSize() {\n\n        topHeight = headerPane.getHeight();\n        centerHeight = centerPane.getHeight() + 60;\n        topSmallImageHeight = coreUI.getCenterPanel().getHeight() / 16 + 20;\n        topSmallImageWidth = coreUI.getFrame().getWidth() / 2 + 20;\n\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":7136}]],"length":7136}
